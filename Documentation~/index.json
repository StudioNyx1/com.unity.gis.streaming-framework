{
  "api/index.html": {
    "href": "api/index.html",
    "title": "| Unity Geospatial Streaming | 1.0.0",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "api/Unity.Geospatial.Streaming.CameraData.html": {
    "href": "api/Unity.Geospatial.Streaming.CameraData.html",
    "title": "Struct CameraData | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct CameraData Store the necessary data to generate a DetailObserverData instance from a Camera component. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public struct CameraData Fields FarClip The distance of the far clipping plane from the Camera, in world units. The far clipping plane is furthest point of the Camera's view frustum. The Camera cannot see geometry that is further this distance. Declaration public float FarClip Field Value Type Description Single FovRad Horizontal and vertical field of view of the camera stored in radians. Declaration public float2 FovRad Field Value Type Description float2 NearClip The distance of the near clipping plane from the the Camera, in world units. The near clipping plane is nearest point of the Camera's view frustum. The Camera cannot see geometry that is closer this distance. Declaration public float NearClip Field Value Type Description Single Resolution Output pixel resolution. Declaration public float2 Resolution Field Value Type Description float2 ScreenSpaceError The maximum screen space error used by the observer allowing to specify if the object should be displayed. This value is used to calculate the ErrorMultiplier . Higher value will result in loading less geometry to be loaded since it would require a smaller GeometricError ; A lower value will result in displaying more geometry. Declaration public float ScreenSpaceError Field Value Type Description Single UniversePosition Position in double float precision of the camera in Unity world space. Declaration public double3 UniversePosition Field Value Type Description double3 UniverseRotation Orientation of the camera. This gives where the camera is looking. Declaration public quaternion UniverseRotation Field Value Type Description quaternion"
  },
  "api/Unity.Geospatial.Streaming.DecoderMultiplexer.html": {
    "href": "api/Unity.Geospatial.Streaming.DecoderMultiplexer.html",
    "title": "Class DecoderMultiplexer | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class DecoderMultiplexer Multiplexer used to converge multiple outputs into a single input with round-robin arbitration of which input to use at which time. Inheritance Object UGProcessingNode DecoderMultiplexer Inherited Members UGProcessingNode.IsIdle UGProcessingNode.DataAvailabilityStatus UGProcessingNode.GetDataAvailabilityStatus(UGProcessingNode.NodeOutput) UGProcessingNode.TaskManager UGProcessingNode.InputConnections UGProcessingNode.OutputConnections UGProcessingNode.SetTaskManager(ITaskManager) UGProcessingNode.Connect<T>(UGProcessingNode.NodeOutput<T>, UGProcessingNode.NodeInput<T>) Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class DecoderMultiplexer : UGProcessingNode, IDisposable Constructors DecoderMultiplexer(Int32) Default constructor. Declaration public DecoderMultiplexer(int inputCount) Parameters Type Name Description Int32 inputCount Amount of decoders to be executed. Properties InputCount Get the number of UGProcessingNode.NodeInput<T> have been created with a InstanceCommand . Declaration public int InputCount { get; } Property Value Type Description Int32 IsProcessing true if the node is currently being executed and cannot be called until completion; false otherwise. Declaration protected override bool IsProcessing { get; } Property Value Type Description Boolean Overrides UGProcessingNode.IsProcessing Output Downstream UGProcessingNode to be executed after this instance. Declaration public UGProcessingNode.NodeOutput<InstanceCommand> Output { get; } Property Value Type Description UGProcessingNode.NodeOutput < InstanceCommand > ScheduleMainThread true if the process needs to be executed on the main thread; false otherwise. Declaration public override bool ScheduleMainThread { get; } Property Value Type Description Boolean Overrides UGProcessingNode.ScheduleMainThread Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides UGProcessingNode.Dispose() GetInput(Int32) Get the InstanceCommand UGProcessingNode.NodeInput<T> for the given index . Declaration public UGProcessingNode.NodeInput<InstanceCommand> GetInput(int index) Parameters Type Name Description Int32 index Index of the instance to retrieve. Returns Type Description UGProcessingNode.NodeInput < InstanceCommand > The node input instance at the given index . MainThreadProcess() At the end of each new frame, this method will be called as processes to be executed on the main thread. Declaration public override void MainThreadProcess() Overrides UGProcessingNode.MainThreadProcess() MainThreadUpKeep() At each new frame, this method will be executed before the main thread processes allowing pre-execution. Declaration public override void MainThreadUpKeep() Overrides UGProcessingNode.MainThreadUpKeep()"
  },
  "api/Unity.Geospatial.Streaming.DeferredMaterialFactory.html": {
    "href": "api/Unity.Geospatial.Streaming.DeferredMaterialFactory.html",
    "title": "Class DeferredMaterialFactory | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class DeferredMaterialFactory UGMaterialFactory implementation where materials get instantiated later by the UGSystem allowing dynamic creation based on the current state of the instance. Inheritance Object UGMaterialFactory DeferredMaterialFactory Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class DeferredMaterialFactory : UGMaterialFactory Methods InstantiateMaterial(MaterialType) Create a new UGMaterial instance based on the given type . Declaration public override UGMaterial InstantiateMaterial(MaterialType type) Parameters Type Name Description MaterialType type Determine which UGMaterial to instantiate. Returns Type Description UGMaterial The new material instance. Overrides UGMaterialFactory.InstantiateMaterial(MaterialType)"
  },
  "api/Unity.Geospatial.Streaming.DeferredMaterialFactoryObject.html": {
    "href": "api/Unity.Geospatial.Streaming.DeferredMaterialFactoryObject.html",
    "title": "Class DeferredMaterialFactoryObject | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class DeferredMaterialFactoryObject UGMaterialFactoryObject implementation where materials get instantiated later by the UGSystem allowing dynamic creation based on the current state of the instance. Inheritance Object Object ScriptableObject UGMaterialFactoryObject DeferredMaterialFactoryObject Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax [CreateAssetMenu(fileName = \"Deferred Material Factory\", menuName = \"Geospatial/Rendering/Deferred Material Factory\", order = 101)] public class DeferredMaterialFactoryObject : UGMaterialFactoryObject Methods Instantiate() Create a new UGMaterialFactory based on this instance values. Declaration public override UGMaterialFactory Instantiate() Returns Type Description UGMaterialFactory The new UGMaterialFactory instance. Overrides UGMaterialFactoryObject.Instantiate()"
  },
  "api/Unity.Geospatial.Streaming.DetailObserverData.GeometricErrorFunction.html": {
    "href": "api/Unity.Geospatial.Streaming.DetailObserverData.GeometricErrorFunction.html",
    "title": "Delegate DetailObserverData.GeometricErrorFunction | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Delegate DetailObserverData.GeometricErrorFunction langword_csharp_delegate defining a lambda for calculating a geometric error. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public delegate float GeometricErrorFunction(in DetailObserverData detailObserverData, in DoubleBounds clipBounds); Parameters Type Name Description DetailObserverData detailObserverData UGSceneObserver information allowing to calculate the geometric error against it. Unity.Geospatial.HighPrecision.DoubleBounds clipBounds Calculate the geometric error against this shape. Returns Type Description Single Value used to compare with the observer minimum allowed error. If the value is higher, the node represented by the given clipBounds will be expanded allowing a higher resolution to be loaded."
  },
  "api/Unity.Geospatial.Streaming.DetailObserverData.html": {
    "href": "api/Unity.Geospatial.Streaming.DetailObserverData.html",
    "title": "Struct DetailObserverData | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct DetailObserverData UGSceneObserver information allowing to calculate the geometric error specification against it. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public readonly struct DetailObserverData Constructors DetailObserverData(in double4x4, in DoublePlane, DetailObserverData.GeometricErrorFunction, Single) Constructor with a ClipPlane . Declaration public DetailObserverData(in double4x4 clipFromUniverse, in DoublePlane clipPlane, DetailObserverData.GeometricErrorFunction geometricErrorFunction, float errorMultiplier) Parameters Type Name Description double4x4 clipFromUniverse Position of the observer. Unity.Geospatial.HighPrecision.DoublePlane clipPlane Do not evaluate the geometric error beyond this plane. DetailObserverData.GeometricErrorFunction geometricErrorFunction Lambda used to calculate the geometric error. Single errorMultiplier Multiply the GeometricError result by this value. Higher the value, less chances the nodes will get expanded. Lower the value, higher will be the resolution of the loaded geometries. DetailObserverData(in double4x4, DetailObserverData.GeometricErrorFunction, Single) Constructor without a ClipPlane . Declaration public DetailObserverData(in double4x4 clipFromUniverse, DetailObserverData.GeometricErrorFunction geometricErrorFunction, float errorMultiplier) Parameters Type Name Description double4x4 clipFromUniverse Position of the observer. DetailObserverData.GeometricErrorFunction geometricErrorFunction Lambda used to calculate the geometric error. Single errorMultiplier Multiply the GeometricError result by this value. Higher the value, less chances the nodes will get expanded. Lower the value, higher will be the resolution of the loaded geometries. Fields ClipFromUniverse Universe position of the UGSceneObserver allowing to know where the UGSceneObserver look from. Declaration public readonly double4x4 ClipFromUniverse Field Value Type Description double4x4 ClipPlane Do not evaluate the geometric error beyond this plane. Declaration public readonly DoublePlane ClipPlane Field Value Type Description Unity.Geospatial.HighPrecision.DoublePlane ErrorMultiplier Multiply the GeometricError result by this value. Higher the value, less chances the nodes will get expanded. Lower the value, higher will be the resolution of the loaded geometries. Declaration public readonly float ErrorMultiplier Field Value Type Description Single GeometricError Lambda used to calculate the geometric error. Declaration public readonly DetailObserverData.GeometricErrorFunction GeometricError Field Value Type Description DetailObserverData.GeometricErrorFunction UseClipPlane true if the UGSceneObserver does not look beyond te ClipPlane ; false otherwise. Declaration public readonly bool UseClipPlane Field Value Type Description Boolean Methods GetErrorSpecification(in DoubleBounds) Calculate the geometric error for a specific bounding box. Declaration public readonly float GetErrorSpecification(in DoubleBounds bounds) Parameters Type Name Description Unity.Geospatial.HighPrecision.DoubleBounds bounds Calculate the geometric error against this shape. Returns Type Description Single Value used to compare with the observer minimum allowed error. If the value is higher, the node represented by the given bounds will be expanded allowing a higher resolution to be loaded."
  },
  "api/Unity.Geospatial.Streaming.Edge.html": {
    "href": "api/Unity.Geospatial.Streaming.Edge.html",
    "title": "Struct Edge | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct Edge Define a polygon edge with two vertices indices. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public struct Edge Properties Index1 Index of the vertices representing the start of the edge. Declaration public int Index1 { get; set; } Property Value Type Description Int32 Index2 Index of the vertices representing the end of the edge. Declaration public int Index2 { get; set; } Property Value Type Description Int32"
  },
  "api/Unity.Geospatial.Streaming.EdgeCollection.html": {
    "href": "api/Unity.Geospatial.Streaming.EdgeCollection.html",
    "title": "Class EdgeCollection | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class EdgeCollection List of Edge . Inheritance Object EdgeCollection Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public static class EdgeCollection Methods GetUniqueVertices(List<Edge>) Convert the List of Edge to a SortedSet of vertices indices where every two value is a new edge. Declaration public static SortedSet<int> GetUniqueVertices(this List<Edge> edges) Parameters Type Name Description List < Edge > edges The list to convert. Returns Type Description SortedSet < Int32 > The list result."
  },
  "api/Unity.Geospatial.Streaming.Editor.EcefCoordinateSystemInspector.html": {
    "href": "api/Unity.Geospatial.Streaming.Editor.EcefCoordinateSystemInspector.html",
    "title": "Class EcefCoordinateSystemInspector | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class EcefCoordinateSystemInspector Class to tells an Editor class how to display the coordinate values using EuclideanTR . Inheritance Object Unity.Geospatial.HighPrecision.Editor.CoordinateSystemInspector EcefCoordinateSystemInspector Inherited Members Unity.Geospatial.HighPrecision.Editor.CoordinateSystemInspector.GetScaleType(Unity.Geospatial.HighPrecision.HPNode) Unity.Geospatial.HighPrecision.Editor.CoordinateSystemInspector.GetTRS(Unity.Geospatial.HighPrecision.HPNode, Unity.Mathematics.double3, Unity.Mathematics.quaternion, Unity.Mathematics.float3) Unity.Geospatial.HighPrecision.Editor.CoordinateSystemInspector.SetTRS(Unity.Geospatial.HighPrecision.HPNode, Unity.Mathematics.double3, Unity.Mathematics.quaternion) Unity.Geospatial.HighPrecision.Editor.CoordinateSystemInspector.SetTRS(Unity.Geospatial.HighPrecision.HPNode, Unity.Mathematics.double3, Unity.Mathematics.quaternion, Unity.Mathematics.float3) Namespace : Unity.Geospatial.Streaming.Editor Assembly : solution.dll Syntax public class EcefCoordinateSystemInspector : CoordinateSystemInspector Properties Name Unique name to display allowing to differentiate the related Unity.Geospatial.HighPrecision.LocalCoordinateSystem from others. Declaration public override string Name { get; } Property Value Type Description String Overrides Unity.Geospatial.HighPrecision.Editor.CoordinateSystemInspector.Name Methods OnInspectorGUI(HPNode) Custom IMGUI based GUI for the inspector for a given Unity.Geospatial.HighPrecision.HPNode . Declaration public override void OnInspectorGUI(HPNode target) Parameters Type Name Description Unity.Geospatial.HighPrecision.HPNode target Target to draw the inspector for. Overrides Unity.Geospatial.HighPrecision.Editor.CoordinateSystemInspector.OnInspectorGUI(Unity.Geospatial.HighPrecision.HPNode)"
  },
  "api/Unity.Geospatial.Streaming.Editor.EditorGUILayoutWrapper.html": {
    "href": "api/Unity.Geospatial.Streaming.Editor.EditorGUILayoutWrapper.html",
    "title": "Class EditorGUILayoutWrapper | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class EditorGUILayoutWrapper UI library used to display the Streaming Component fields. Inheritance Object EditorGUILayoutWrapper Namespace : Unity.Geospatial.Streaming.Editor Assembly : solution.dll Syntax public class EditorGUILayoutWrapper Methods BeginFoldoutHeaderGroup(Boolean, String) Make a label with a foldout arrow to the left of it. This is useful for folder-like structures, where child objects only appear if you've unfolded the parent folder. This control cannot be nested in another BeginFoldoutHeaderGroup. To use multiple of these foldouts, you must end each method with EndFoldoutHeaderGroup() . Declaration public virtual bool BeginFoldoutHeaderGroup(bool foldout, string content) Parameters Type Name Description Boolean foldout The shown foldout state. String content The label to show. Returns Type Description Boolean The foldout state selected by the user. true if you should render sub-objects.; false otherwise. BeginHorizontal(GUILayoutOption[]) Begin a horizontal group and get its rect back. Declaration public virtual Rect BeginHorizontal(params GUILayoutOption[] options) Parameters Type Name Description GUILayoutOption [] options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br> See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight, GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight. Returns Type Description Rect Get the rectangle of the new item position. BeginHorizontal(GUIStyle, GUILayoutOption[]) Begin a horizontal group and get its rect back. Declaration public virtual Rect BeginHorizontal(GUIStyle style, params GUILayoutOption[] options) Parameters Type Name Description GUIStyle style Optional GUIStyle. GUILayoutOption [] options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br> See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight, GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight. Returns Type Description Rect Get the rectangle of the new item position. BeginVertical(GUILayoutOption[]) Begin a vertical group and get its rect back. Declaration public virtual Rect BeginVertical(params GUILayoutOption[] options) Parameters Type Name Description GUILayoutOption [] options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br> See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight, GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight. Returns Type Description Rect Get the rectangle of the new item position. BeginVertical(GUIStyle, GUILayoutOption[]) Begin a vertical group and get its rect back. Declaration public virtual Rect BeginVertical(GUIStyle style, params GUILayoutOption[] options) Parameters Type Name Description GUIStyle style Optional GUIStyle. GUILayoutOption [] options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br> See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight, GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight. Returns Type Description Rect Get the rectangle of the new item position. BoolField(GUIContent, Boolean, GUIStyle, GUILayoutOption[]) Make a toggle checkbox field. Declaration public virtual bool BoolField(GUIContent label, bool value, GUIStyle style = null, params GUILayoutOption[] options) Parameters Type Name Description GUIContent label Optional label in front of the toggle. Boolean value The shown state of the toggle. GUIStyle style Optional GUIStyle. GUILayoutOption [] options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight, GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight. Returns Type Description Boolean The selected state of the toggle. Button(String, GUILayoutOption[]) Make a single press button. Declaration public virtual bool Button(string text, params GUILayoutOption[] options) Parameters Type Name Description String text Text to display on the button. GUILayoutOption [] options An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the style.<br> See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight, GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight. Returns Type Description Boolean true when the users clicks the button. DoLayoutList(ReorderableList) Draw the given list in the current layout. Declaration public virtual void DoLayoutList(ReorderableList list) Parameters Type Name Description UnityEditorInternal.ReorderableList list List requested to be draw. DoubleField(ref Double) Make a text field for entering a double precision value. Declaration public virtual void DoubleField(ref double value) Parameters Type Name Description Double value The value to edit. DoubleField(ref Double, Rect) Make a text field for entering a double precision value. Declaration public virtual void DoubleField(ref double value, Rect position) Parameters Type Name Description Double value The value to edit. Rect position Rectangle on the screen to use for the field. EndFoldoutHeaderGroup() Closes a group started with BeginFoldoutHeaderGroup(Boolean, String) . Declaration public virtual void EndFoldoutHeaderGroup() EndHorizontal() Close a group started with BeginHorizontal. Declaration public virtual void EndHorizontal() EndVertical() Close a group started with BeginVertical. Declaration public virtual void EndVertical() EnumPopup(GUIContent, Enum, GUILayoutOption[]) Make an enum popup selection field. Declaration public virtual Enum EnumPopup(GUIContent label, Enum selected, params GUILayoutOption[] options) Parameters Type Name Description GUIContent label Optional label in front of the field. Enum selected The enum option the field shows. GUILayoutOption [] options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br> See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight, GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight. Returns Type Description Enum The enum option that has been selected by the user. FloatField(ref Single) Make a text field for entering a single precision value. Declaration public virtual void FloatField(ref float value) Parameters Type Name Description Single value The value to edit. GetLabelContent(String, out Single, Int32) Calculate the size a label should take in horizontal space. Declaration public virtual GUIContent GetLabelContent(string label, out float width, int minWidth = 0) Parameters Type Name Description String label Text to calculate the width. Single width Returns the width the label should take. Int32 minWidth Force the label to take at least this amount of width space. Returns Type Description GUIContent Returns a new content with the given label as its text. HelpBox(String, MessageType, Boolean) Make a help box with a message to the user. Declaration public virtual void HelpBox(string message, MessageType type, bool wide = true) Parameters Type Name Description String message The message text. MessageType type The type of message. Boolean wide true the box will cover the whole width of the window; false otherwise it will cover the controls part only. IntegerField(ref Int32) Make a text field for entering a integer value. Declaration public virtual void IntegerField(ref int value) Parameters Type Name Description Int32 value The value to edit. IntSlider(GUIContent, Int32, Int32, Int32, GUILayoutOption[]) Make a slider the user can drag to change a value between a min and a max. Declaration public virtual int IntSlider(GUIContent label, int value, int leftValue, int rightValue, params GUILayoutOption[] options) Parameters Type Name Description GUIContent label Optional label in front of the slider. Int32 value The value the slider shows. This determines the position of the draggable thumb. Int32 leftValue The value at the left end of the slider. Int32 rightValue The value at the right end of the slider. GUILayoutOption [] options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br> See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight, GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight. Returns Type Description Int32 The value that has been set by the user. Label(String, Int32) Make an auto-layout label. Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. Declaration public virtual void Label(string label, int minWidth = 0) Parameters Type Name Description String label Text to display on the label. Int32 minWidth Force the label to take at least this amount of width space. Label(Rect, GUIContent, GUIStyle) Makes a label field. (Useful for showing read-only info.) Declaration public virtual void Label(Rect position, GUIContent label, GUIStyle style = null) Parameters Type Name Description Rect position Rectangle on the screen to use for the label field. GUIContent label Label in front of the label field. GUIStyle style Style information (color, etc) for displaying the label. MaskField(ref Int32, String[], Rect) Makes a field for masks. Declaration public virtual void MaskField(ref int mask, string[] displayedOptions, Rect position) Parameters Type Name Description Int32 mask The current mask to display. String [] displayedOptions A string array containing the labels for each flag. Rect position Rectangle on the screen to use for the field. ObjectField(SerializedProperty, Type, GUIContent, GUILayoutOption[]) Make a field to receive any object type. Declaration public virtual void ObjectField(SerializedProperty property, Type objType = null, GUIContent label = null, params GUILayoutOption[] options) Parameters Type Name Description SerializedProperty property The object reference property the field shows. Type objType The type of the objects that can be assigned. GUIContent label Optional label in front of the field. Pass GUIContent.none to hide the label. GUILayoutOption [] options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br> See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight, GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight. ObjectField(Object, Type, Boolean, GUILayoutOption[]) Make a field to receive any object type. Declaration public virtual Object ObjectField(Object obj, Type objType = null, bool allowSceneObjects = true, params GUILayoutOption[] options) Parameters Type Name Description Object obj The object the field shows. Type objType The type of the objects that can be assigned. Boolean allowSceneObjects Allow assigning Scene objects. See Description for more info. GUILayoutOption [] options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style. See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight, GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight. Returns Type Description Object The object that has been set by the user. ObjectField(Rect, SerializedProperty, Type, GUIContent) Makes an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker. Declaration public virtual void ObjectField(Rect position, SerializedProperty property, Type objType = null, GUIContent label = null) Parameters Type Name Description Rect position Rectangle on the screen to use for the field. SerializedProperty property The object reference property the field shows. Type objType The type of the objects that can be assigned. GUIContent label Optional label to display in front of the field. Pass GUIContent.none to hide the label. ObjectField(Rect, Object, Type, Boolean) Make a field to receive any object type. Declaration public virtual Object ObjectField(Rect position, Object obj, Type objType = null, bool allowSceneObjects = true) Parameters Type Name Description Rect position Rectangle on the screen to use for the field. Object obj The object the field shows. Type objType The type of the objects that can be assigned. Boolean allowSceneObjects Allow assigning Scene objects. See Description for more info. Returns Type Description Object The object that has been set by the user. Popup(Rect, ref Int32, String[]) Makes a generic popup selection field. Declaration public virtual void Popup(Rect position, ref int selectedIndex, string[] displayedOptions) Parameters Type Name Description Rect position Rectangle on the screen to use for the field. Int32 selectedIndex The index of the option the field shows. String [] displayedOptions An array with the options shown in the popup. Slider(GUIContent, Single, Single, Single, GUILayoutOption[]) Make a slider the user can drag to change a value between a min and a max. Declaration public virtual float Slider(GUIContent label, float value, float leftValue, float rightValue, params GUILayoutOption[] options) Parameters Type Name Description GUIContent label Optional label in front of the slider. Single value The value the slider shows. This determines the position of the draggable thumb. Single leftValue The value at the left end of the slider. Single rightValue The value at the right end of the slider. GUILayoutOption [] options An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the style.<br> See Also: GUILayout.Width, GUILayout.Height, GUILayout.MinWidth, GUILayout.MaxWidth, GUILayout.MinHeight, GUILayout.MaxHeight, GUILayout.ExpandWidth, GUILayout.ExpandHeight. Returns Type Description Single The value that has been set by the user. Space(Single) Make a small space between the previous control and the following. Declaration public virtual void Space(float width) Parameters Type Name Description Single width Space taken. TextField(ref String) Make a text field for entering a string value. Declaration public virtual void TextField(ref string value) Parameters Type Name Description String value The value to edit."
  },
  "api/Unity.Geospatial.Streaming.Editor.GeodeticExtentObjectInspector.html": {
    "href": "api/Unity.Geospatial.Streaming.Editor.GeodeticExtentObjectInspector.html",
    "title": "Class GeodeticExtentObjectInspector | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class GeodeticExtentObjectInspector Class to display the GeodeticExtentObject fields inside the Unity inspector. Inheritance Object Object ScriptableObject Editor GeodeticExtentObjectInspector Inherited Members Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, Editor) Editor.CreateCachedEditor(Object, Type, Editor) Editor.CreateCachedEditor(Object[], Type, Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, String[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(String, Object[], Int32, Int32) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.Initialize(Object[]) UnityEditor.Editor.Cleanup() UnityEditor.Editor.MoveNextTarget() Editor.ResetTarget() Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming.Editor Assembly : solution.dll Syntax [CustomEditor(typeof(GeodeticExtentObject))] public class GeodeticExtentObjectInspector : Editor, IPreviewable, IToolModeOwner Methods OnDisable() This function is called when the behaviour becomes disabled. This is also called when the object is destroyed and can be used for any cleanup code. When scripts are reloaded after compilation has finished, OnDisable() will be called, followed by an OnEnable() after the script has been loaded. Declaration public void OnDisable() OnEnable() This function is called when the object is loaded. Declaration public void OnEnable() OnInspectorGUI() Custom IMGUI based GUI for the inspector. Declaration public override void OnInspectorGUI() Overrides Editor.OnInspectorGUI()"
  },
  "api/Unity.Geospatial.Streaming.Editor.html": {
    "href": "api/Unity.Geospatial.Streaming.Editor.html",
    "title": "Namespace Unity.Geospatial.Streaming.Editor | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Namespace Unity.Geospatial.Streaming.Editor Classes EcefCoordinateSystemInspector Class to tells an Editor class how to display the coordinate values using EuclideanTR . EditorGUILayoutWrapper UI library used to display the Streaming Component fields. GeodeticExtentObjectInspector Class to display the GeodeticExtentObject fields inside the Unity inspector. SceneHandleWrapper UI library used to display the Component in the scene view. UGCameraBehaviourInspector UGCameraBehaviour commands. UGExtentModifierBehaviourInspector Class to display the UGExtentModifierBehaviour fields inside the Unity inspector. UGMetadataInspector Custom inspector for the UGMetadataBehaviour . UGSystemBehaviourInspector Custom inspector for the UGSystemBehaviour . Wgs84CoordinateSystemInspector Class to tells an Editor class how to display the coordinate values using Wgs84 ."
  },
  "api/Unity.Geospatial.Streaming.Editor.SceneHandleWrapper.html": {
    "href": "api/Unity.Geospatial.Streaming.Editor.SceneHandleWrapper.html",
    "title": "Class SceneHandleWrapper | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class SceneHandleWrapper UI library used to display the Component in the scene view. Inheritance Object SceneHandleWrapper Namespace : Unity.Geospatial.Streaming.Editor Assembly : solution.dll Syntax public class SceneHandleWrapper Methods DrawLine(float3, float3, Single) Draws a line from p1 to p2. Declaration public virtual void DrawLine(float3 p1, float3 p2, float thickness = 0F) Parameters Type Name Description float3 p1 The position of the first line's end point in world space. float3 p2 The position of the second line's end point in world space. Single thickness Line thickness in UI points (zero thickness draws single-pixel line). FreeMoveHandle(Vector3, Single, Color) Make an unconstrained movement handle. This handle can move freely in all directions. Hold down Ctrl (Cmd on macOS) to snap to the grid (see PositioningGameObjects). Hold Ctrl-Shift (Cmd-Shift on macOS) to snap the object to any Collider surface under the mouse pointer. Declaration public virtual float3 FreeMoveHandle(Vector3 position, float size, Color color) Parameters Type Name Description Vector3 position The position of the handle in the space of Handles.matrix. Single size The size of the handle in the space of Handles.matrix. Use HandleUtility.GetHandleSize if you want a constant screen-space size. Color color Draw the handle with this color. Returns Type Description float3 Vector3 The new value modified by the user's interaction with the handle. If the user has not moved the handle, it will return the same value as you passed into the function."
  },
  "api/Unity.Geospatial.Streaming.Editor.UGCameraBehaviourInspector.html": {
    "href": "api/Unity.Geospatial.Streaming.Editor.UGCameraBehaviourInspector.html",
    "title": "Class UGCameraBehaviourInspector | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGCameraBehaviourInspector UGCameraBehaviour commands. Inheritance Object UGCameraBehaviourInspector Namespace : Unity.Geospatial.Streaming.Editor Assembly : solution.dll Syntax public static class UGCameraBehaviourInspector Methods CreateNewUGCamera(GameObject) Create a new UGCameraBehaviour instance under the given parent. Declaration public static GameObject CreateNewUGCamera(GameObject parent) Parameters Type Name Description GameObject parent Set this GameObject as the parent of the newly created GameObject. Returns Type Description GameObject The newly created object."
  },
  "api/Unity.Geospatial.Streaming.Editor.UGExtentModifierBehaviourInspector.html": {
    "href": "api/Unity.Geospatial.Streaming.Editor.UGExtentModifierBehaviourInspector.html",
    "title": "Class UGExtentModifierBehaviourInspector | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGExtentModifierBehaviourInspector Class to display the UGExtentModifierBehaviour fields inside the Unity inspector. Inheritance Object Object ScriptableObject Editor UGExtentModifierBehaviourInspector Inherited Members Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, Editor) Editor.CreateCachedEditor(Object, Type, Editor) Editor.CreateCachedEditor(Object[], Type, Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, String[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(String, Object[], Int32, Int32) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.Initialize(Object[]) UnityEditor.Editor.Cleanup() UnityEditor.Editor.MoveNextTarget() Editor.ResetTarget() Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming.Editor Assembly : solution.dll Syntax [CustomEditor(typeof(UGExtentModifierBehaviour))] public class UGExtentModifierBehaviourInspector : Editor, IPreviewable, IToolModeOwner Methods OnEnable() This function is called when the object is loaded. Declaration public void OnEnable() OnInspectorGUI() Custom IMGUI based GUI for the inspector. Declaration public override void OnInspectorGUI() Overrides Editor.OnInspectorGUI()"
  },
  "api/Unity.Geospatial.Streaming.Editor.UGMetadataInspector.html": {
    "href": "api/Unity.Geospatial.Streaming.Editor.UGMetadataInspector.html",
    "title": "Class UGMetadataInspector | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGMetadataInspector Custom inspector for the UGMetadataBehaviour . Inheritance Object Object ScriptableObject Editor UGMetadataInspector Inherited Members Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, Editor) Editor.CreateCachedEditor(Object, Type, Editor) Editor.CreateCachedEditor(Object[], Type, Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, String[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(String, Object[], Int32, Int32) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.Initialize(Object[]) UnityEditor.Editor.Cleanup() UnityEditor.Editor.MoveNextTarget() Editor.ResetTarget() Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming.Editor Assembly : solution.dll Syntax [CustomEditor(typeof(UGMetadataBehaviour))] public class UGMetadataInspector : Editor, IPreviewable, IToolModeOwner Methods OnInspectorGUI() Called when a UGMetadataBehaviour is selected and must be displayed in an inspector view. Declaration public override void OnInspectorGUI() Overrides Editor.OnInspectorGUI()"
  },
  "api/Unity.Geospatial.Streaming.Editor.UGSystemBehaviourInspector.html": {
    "href": "api/Unity.Geospatial.Streaming.Editor.UGSystemBehaviourInspector.html",
    "title": "Class UGSystemBehaviourInspector | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGSystemBehaviourInspector Custom inspector for the UGSystemBehaviour . Inheritance Object Object ScriptableObject Editor UGSystemBehaviourInspector Inherited Members Editor.CreateEditorWithContext(Object[], Object, Type) Editor.CreateEditorWithContext(Object[], Object) Editor.CreateCachedEditorWithContext(Object, Object, Type, Editor) Editor.CreateCachedEditorWithContext(Object[], Object, Type, Editor) Editor.CreateCachedEditor(Object, Type, Editor) Editor.CreateCachedEditor(Object[], Type, Editor) Editor.CreateEditor(Object) Editor.CreateEditor(Object, Type) Editor.CreateEditor(Object[]) Editor.CreateEditor(Object[], Type) Editor.DrawPropertiesExcluding(SerializedObject, String[]) Editor.DrawDefaultInspector() Editor.Repaint() Editor.CreateInspectorGUI() Editor.RequiresConstantRepaint() Editor.DrawHeader() Editor.OnHeaderGUI() Editor.ShouldHideOpenButton() Editor.DrawFoldoutInspector(Object, Editor) Editor.HasPreviewGUI() Editor.GetPreviewTitle() Editor.RenderStaticPreview(String, Object[], Int32, Int32) Editor.OnPreviewGUI(Rect, GUIStyle) Editor.OnInteractivePreviewGUI(Rect, GUIStyle) Editor.OnPreviewSettings() Editor.GetInfoString() Editor.DrawPreview(Rect) Editor.ReloadPreviewInstances() Editor.UseDefaultMargins() Editor.Initialize(Object[]) UnityEditor.Editor.Cleanup() UnityEditor.Editor.MoveNextTarget() Editor.ResetTarget() Editor.target Editor.targets Editor.serializedObject Editor.finishedDefaultHeaderGUI ScriptableObject.SetDirty() ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming.Editor Assembly : solution.dll Syntax [CustomEditor(typeof(UGSystemBehaviour))] public class UGSystemBehaviourInspector : Editor, IPreviewable, IToolModeOwner Methods CreateNewUGSystem() Create a UGSystemBehaviour and a HPRoot Components under a new GameObject instance. Declaration public static GameObject CreateNewUGSystem() Returns Type Description GameObject The newly created GameObject . OnInspectorGUI() Custom inspector IMGUI. Editor.OnInspectorGUI Declaration public override void OnInspectorGUI() Overrides Editor.OnInspectorGUI()"
  },
  "api/Unity.Geospatial.Streaming.Editor.Wgs84CoordinateSystemInspector.html": {
    "href": "api/Unity.Geospatial.Streaming.Editor.Wgs84CoordinateSystemInspector.html",
    "title": "Class Wgs84CoordinateSystemInspector | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class Wgs84CoordinateSystemInspector Class to tells an Editor class how to display the coordinate values using Wgs84 . Inheritance Object Unity.Geospatial.HighPrecision.Editor.CoordinateSystemInspector Wgs84CoordinateSystemInspector Inherited Members Unity.Geospatial.HighPrecision.Editor.CoordinateSystemInspector.GetScaleType(Unity.Geospatial.HighPrecision.HPNode) Unity.Geospatial.HighPrecision.Editor.CoordinateSystemInspector.GetTRS(Unity.Geospatial.HighPrecision.HPNode, Unity.Mathematics.double3, Unity.Mathematics.quaternion, Unity.Mathematics.float3) Unity.Geospatial.HighPrecision.Editor.CoordinateSystemInspector.SetTRS(Unity.Geospatial.HighPrecision.HPNode, Unity.Mathematics.double3, Unity.Mathematics.quaternion) Unity.Geospatial.HighPrecision.Editor.CoordinateSystemInspector.SetTRS(Unity.Geospatial.HighPrecision.HPNode, Unity.Mathematics.double3, Unity.Mathematics.quaternion, Unity.Mathematics.float3) Namespace : Unity.Geospatial.Streaming.Editor Assembly : solution.dll Syntax public class Wgs84CoordinateSystemInspector : CoordinateSystemInspector Properties Name Unique name to display allowing to differentiate the related Unity.Geospatial.HighPrecision.LocalCoordinateSystem from others. Declaration public override string Name { get; } Property Value Type Description String Overrides Unity.Geospatial.HighPrecision.Editor.CoordinateSystemInspector.Name Methods OnInspectorGUI(HPNode) Custom IMGUI based GUI for the inspector for a given Unity.Geospatial.HighPrecision.HPNode . Declaration public override void OnInspectorGUI(HPNode target) Parameters Type Name Description Unity.Geospatial.HighPrecision.HPNode target Target to draw the inspector for. Overrides Unity.Geospatial.HighPrecision.Editor.CoordinateSystemInspector.OnInspectorGUI(Unity.Geospatial.HighPrecision.HPNode)"
  },
  "api/Unity.Geospatial.Streaming.EuclideanFlyCamera.html": {
    "href": "api/Unity.Geospatial.Streaming.EuclideanFlyCamera.html",
    "title": "Class EuclideanFlyCamera | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class EuclideanFlyCamera Camera controlled by the user's keyboard and mouse where Y is always up. This is in contrast with the GlobalFlyCamera which uses the earth's curvature to determine which way is up. This is meant as a minimal example of how to implement a camera controller. The camera's controls are as follows:\\n Inheritance Object Object Component Behaviour MonoBehaviour EuclideanFlyCamera Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) MonoBehaviour.StartCoroutine(String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) UnityEngine.Component.GetComponentInParent(System.Type, System.Boolean) Component.GetComponentInParent(Type) UnityEngine.Component.GetComponentInParent<T>(System.Boolean) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) Component.SendMessageUpwards(String, Object) Component.SendMessageUpwards(String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) Component.BroadcastMessage(String, Object) Component.BroadcastMessage(String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Component.rigidbody Component.rigidbody2D Component.camera Component.light Component.animation Component.constantForce Component.renderer Component.audio Component.networkView Component.collider Component.collider2D Component.hingeJoint Component.particleSystem Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class EuclideanFlyCamera : MonoBehaviour Properties HighSpeedMultiplier Declaration public float HighSpeedMultiplier { get; set; } Property Value Type Description Single MouseSensitivity Declaration public float MouseSensitivity { get; set; } Property Value Type Description Single ScrollSensitivity Declaration public float ScrollSensitivity { get; set; } Property Value Type Description Single Speed Declaration public float Speed { get; set; } Property Value Type Description Single"
  },
  "api/Unity.Geospatial.Streaming.EuclideanTR.html": {
    "href": "api/Unity.Geospatial.Streaming.EuclideanTR.html",
    "title": "Struct EuclideanTR | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct EuclideanTR Euclidean transformation (rigid motion) stored as a translation / rotation of a single vector. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public struct EuclideanTR Fields Position Translation information of the vector. Declaration public double3 Position Field Value Type Description double3 Rotation Orientation information of the vector. Declaration public quaternion Rotation Field Value Type Description quaternion"
  },
  "api/Unity.Geospatial.Streaming.GeodeticCoordinates.html": {
    "href": "api/Unity.Geospatial.Streaming.GeodeticCoordinates.html",
    "title": "Struct GeodeticCoordinates | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct GeodeticCoordinates Geodetic position stored as latitude / longitude / elevation. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax [Serializable] public struct GeodeticCoordinates : IEquatable<GeodeticCoordinates> Constructors GeodeticCoordinates(Double, Double, Double) Default constructor. Declaration public GeodeticCoordinates(double latitude, double longitude, double elevation) Parameters Type Name Description Double latitude The angular distance of the vector (north / south) expressed in degrees and minutes. Double longitude The angular distance of the vector (east / west) expressed in degrees and minutes. Double elevation Distance in meter to geoid. Fields value The coordinates values store as a double3 where the x is the Latitude , the y is the Longitude and the z is the Elevation . Declaration public readonly double3 value Field Value Type Description double3 Properties Elevation Distance in meter to geoid. Declaration public readonly double Elevation { get; } Property Value Type Description Double Latitude The angular distance of the vector (north / south) expressed in degrees and minutes. Declaration public readonly double Latitude { get; } Property Value Type Description Double Longitude The angular distance of the vector (east / west) expressed in degrees and minutes. Declaration public readonly double Longitude { get; } Property Value Type Description Double Methods Equals(Object) Validate obj is a GeodeticCoordinates instance and have the same values as this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Compare the values with this instance. Returns Type Description Boolean true if both instance have the same values; false otherwise. Overrides ValueType.Equals(Object) Equals(GeodeticCoordinates) Validate an other GeodeticCoordinates has the same values as this instance. Declaration public bool Equals(GeodeticCoordinates other) Parameters Type Name Description GeodeticCoordinates other Compare the values with this instance. Returns Type Description Boolean true if both instances have the same values; false otherwise. GetHashCode() Compute a hash code for the object. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides ValueType.GetHashCode() Remarks You should not assume that equal hash codes imply object equality. You should never persist or use a hash code outside the application domain in which it was created, because the same object may hash differently across application domains, processes, and platforms. ToString() Returns a formatted string for the coordinates. Declaration public override string ToString() Returns Type Description String The formatted string representing this instance. Overrides ValueType.ToString() Operators Equality(GeodeticCoordinates, GeodeticCoordinates) Validate both GeodeticCoordinates have the same values. Declaration public static bool operator ==(GeodeticCoordinates lhs, GeodeticCoordinates rhs) Parameters Type Name Description GeodeticCoordinates lhs First instance to compare with. GeodeticCoordinates rhs Compare lhs with this instance. Returns Type Description Boolean true if both instance have the same values; false otherwise. Inequality(GeodeticCoordinates, GeodeticCoordinates) Validate both GeodeticCoordinates have the different values. Declaration public static bool operator !=(GeodeticCoordinates lhs, GeodeticCoordinates rhs) Parameters Type Name Description GeodeticCoordinates lhs First instance to compare with. GeodeticCoordinates rhs Compare lhs with this instance. Returns Type Description Boolean true if at least one value is different on both instances; false if both instance have the same values."
  },
  "api/Unity.Geospatial.Streaming.GeodeticExtent.html": {
    "href": "api/Unity.Geospatial.Streaming.GeodeticExtent.html",
    "title": "Class GeodeticExtent | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class GeodeticExtent Define a 2D shape with a list of geodetic coordinates (latitude / longitude). Inheritance Object GeodeticExtent Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class GeodeticExtent Constructors GeodeticExtent(List<double2>) Default constructor. Declaration public GeodeticExtent(List<double2> extent) Parameters Type Name Description List < double2 > extent List of points that the extent is comprised of. Properties Center Returns the center of the extent, which is defined as the average coordinate. Declaration public double2 Center { get; } Property Value Type Description double2 IsValid Indicates whether the extent is valid or not. Extents are expected to be convex shapes. Declaration public bool IsValid { get; } Property Value Type Description Boolean Points Returns the list of points that the extent is comprised of. These are guaranteed to be clockwise. Declaration public List<double2> Points { get; } Property Value Type Description List < double2 >"
  },
  "api/Unity.Geospatial.Streaming.GeodeticExtentObject.html": {
    "href": "api/Unity.Geospatial.Streaming.GeodeticExtentObject.html",
    "title": "Class GeodeticExtentObject | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class GeodeticExtentObject ScriptableObject of a GeodeticExtent allowing the user to define a region polygon using geodetic coordinates (latitude / longitude). to be loaded. Inheritance Object Object ScriptableObject GeodeticExtentObject Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax [CreateAssetMenu(fileName = \"GeodeticExtent\", menuName = \"Geospatial/Data Types/Geodetic Extent\", order = 100)] public class GeodeticExtentObject : ScriptableObject Fields Points Returns the list of points that the extent is comprised of. These are guaranteed to be clockwise. Declaration public List<double2> Points Field Value Type Description List < double2 > Methods Instantiate() Create a new GeodeticExtent instance representing this ScriptableObject. Declaration public GeodeticExtent Instantiate() Returns Type Description GeodeticExtent The newly created instance. Exceptions Type Condition InvalidOperationException If the Points did not pass the Unity.Geospatial.Streaming.GeodeticExtent.ValidateExtent(System.Collections.Generic.IReadOnlyList{Unity.Mathematics.double2}) ."
  },
  "api/Unity.Geospatial.Streaming.GeodeticTR.html": {
    "href": "api/Unity.Geospatial.Streaming.GeodeticTR.html",
    "title": "Struct GeodeticTR | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct GeodeticTR Geodetic transformation (coordinate transformation) stored as latitude / longitude / elevation / rotation of a single vector. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public struct GeodeticTR Fields EulerAngles Orientation of the vector where zero (0, 0, 0) is pointing to the same direction as the Position normal. Declaration public float3 EulerAngles Field Value Type Description float3 Position Projected position relative to a center expressed in degrees and minutes.. Declaration public GeodeticCoordinates Position Field Value Type Description GeodeticCoordinates"
  },
  "api/Unity.Geospatial.Streaming.GeospatialAssets.html": {
    "href": "api/Unity.Geospatial.Streaming.GeospatialAssets.html",
    "title": "Class GeospatialAssets | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class GeospatialAssets List of GUIDs allowing to load assets without hardcoded paths by using AssetDatabase.GUIDToAssetPath Inheritance Object GeospatialAssets Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public static class GeospatialAssets Fields BuiltinMaterialFactory Built-in material factory to be set at MaterialFactory . Declaration public const string BuiltinMaterialFactory = \"d995d7c41773bd8458b3aa5d4c27c300\" Field Value Type Description String DeferredMaterialFactory Deffered material factory to be set at MaterialFactory . Declaration public const string DeferredMaterialFactory = \"83d0458cf8d11424f9ee5aa4850c11d7\" Field Value Type Description String HDRPMaterialFactory High Definition Render Pipeline material factory to be set at MaterialFactory . Declaration public const string HDRPMaterialFactory = \"6e3cedafdf5610f49a8941c05be86b07\" Field Value Type Description String SphericalSkybox Round atmospheric skybox used by UGSkyboxBehaviour . Declaration public const string SphericalSkybox = \"3ad26f7af37d0f74bb9b2a63f714e443\" Field Value Type Description String URPMaterialFactory Universal Render Pipeline material factory to be set at MaterialFactory . Declaration public const string URPMaterialFactory = \"7f8b4dc2d6e1edd4daeb0ed88318ee79\" Field Value Type Description String"
  },
  "api/Unity.Geospatial.Streaming.GlobalFlyCamera.html": {
    "href": "api/Unity.Geospatial.Streaming.GlobalFlyCamera.html",
    "title": "Class GlobalFlyCamera | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class GlobalFlyCamera The Global Fly Camera components is a simple camera movement controller that was built to test the Unity Geospatial Framework. It provides basic controls that allows the user to fly around the globe with ease and with few restrictions. The primary reason for a custom camera controller is to manage the \"up\" vector of the camera adequately. This controller does not use the scene's up-axis to orient itself but, rather, uses the vector linking the center of the planet to the current position of the camera. The camera's controls are as follows:\\n Inheritance Object Object Component Behaviour MonoBehaviour GlobalFlyCamera Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) MonoBehaviour.StartCoroutine(String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) UnityEngine.Component.GetComponentInParent(System.Type, System.Boolean) Component.GetComponentInParent(Type) UnityEngine.Component.GetComponentInParent<T>(System.Boolean) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) Component.SendMessageUpwards(String, Object) Component.SendMessageUpwards(String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) Component.BroadcastMessage(String, Object) Component.BroadcastMessage(String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Component.rigidbody Component.rigidbody2D Component.camera Component.light Component.animation Component.constantForce Component.renderer Component.audio Component.networkView Component.collider Component.collider2D Component.hingeJoint Component.particleSystem Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax [RequireComponent(typeof(Camera))] [RequireComponent(typeof(HPTransform))] public class GlobalFlyCamera : MonoBehaviour Properties HighSpeedMultiplier Declaration public float HighSpeedMultiplier { get; set; } Property Value Type Description Single MaximumPitch Declaration public float MaximumPitch { get; set; } Property Value Type Description Single MouseSensitivity Declaration public float MouseSensitivity { get; set; } Property Value Type Description Single PlanetRadius Declaration public float PlanetRadius { get; set; } Property Value Type Description Single ScrollSensitivity Declaration public float ScrollSensitivity { get; set; } Property Value Type Description Single Speed Declaration public float Speed { get; set; } Property Value Type Description Single UpdateClipPlanes Declaration public bool UpdateClipPlanes { get; set; } Property Value Type Description Boolean"
  },
  "api/Unity.Geospatial.Streaming.GOBaseRenderer.html": {
    "href": "api/Unity.Geospatial.Streaming.GOBaseRenderer.html",
    "title": "Class GOBaseRenderer | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class GOBaseRenderer Base class responsible for converting InstanceID into a GameObject . Inheritance Object GOBaseRenderer GOCompositeRenderer GOMeshRenderer GONodeRenderer Implements IUGRenderer IUGObject Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public abstract class GOBaseRenderer : IUGRenderer, IDisposable, IUGObject Constructors GOBaseRenderer() Default constructor. Will create an inactive GameObject and attach a UGMetadataBehaviour Component to it. Declaration protected GOBaseRenderer() Fields m_GameObject Get the GameObject that holds the Mesh and required Components when in play mode. Declaration protected readonly GameObject m_GameObject Field Value Type Description GameObject m_Transform Cached Transform Component of the GameObject . Declaration protected readonly Transform m_Transform Field Value Type Description Transform Properties Children Get the list of child renderers Declaration public List<IUGRenderer> Children { get; } Property Value Type Description List < IUGRenderer > Enabled Sets whether the renderer is enabled or not. This should translate into the GameObject or Entity being enabled or not. Declaration public bool Enabled { get; set; } Property Value Type Description Boolean EnableHighPrecision Enables high precision on this renderer. If set to false, position will be maintained with a single precision floating point. If set to true, position will be maintained with a double precision floating point. Declaration public bool EnableHighPrecision { set; } Property Value Type Description Boolean GameObject Get the GameObject Children are attached to. Declaration public GameObject GameObject { get; } Property Value Type Description GameObject Materials Set the renderer's material list Declaration public abstract UGMaterial[] Materials { set; } Property Value Type Description UGMaterial [] Mesh Set the renderer's mesh Declaration public abstract Mesh Mesh { set; } Property Value Type Description Mesh Metadata Set the renderer's metadata Declaration public UGMetadata Metadata { set; } Property Value Type Description UGMetadata Name Sets the name of the renderer for debugging purposes. Declaration public string Name { set; } Property Value Type Description String Parent Sets the parent of the GameObject within the scene hierarchy. Declaration public Transform Parent { set; } Property Value Type Description Transform Transform Set the transform of the renderer. If EnableHighPrecision is not set, this will be reduced to single precision floating point. Declaration public double4x4 Transform { set; } Property Value Type Description double4x4 UnityLayer Sets the Unity Layer as defined in the project settings. This integer should be from 0 to 31. Declaration public abstract int UnityLayer { set; } Property Value Type Description Int32 Methods AddChild(IUGRenderer) Add a child renderer Declaration public void AddChild(IUGRenderer child) Parameters Type Name Description IUGRenderer child ClearChildren() Clear all child renderers. This will not delete the children but rather unparent them to facilitate pooling systems. Declaration public void ClearChildren() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() RemoveChild(IUGRenderer) Remove a child renderer Declaration public void RemoveChild(IUGRenderer child) Parameters Type Name Description IUGRenderer child Explicit Interface Implementations IUGObject.Disposed true if the object is disposed and cannot be used; false otherwise. Declaration bool IUGObject.Disposed { get; set; } Returns Type Description Boolean IUGObject.Index Index value of the instance allowing faster retrieval within UGObjectPool<T> . Declaration int IUGObject.Index { get; set; } Returns Type Description Int32 Implements IUGRenderer IUGObject"
  },
  "api/Unity.Geospatial.Streaming.GOCompositeRenderer.html": {
    "href": "api/Unity.Geospatial.Streaming.GOCompositeRenderer.html",
    "title": "Class GOCompositeRenderer | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class GOCompositeRenderer Renderer allowing multiple layers of materials for a single Mesh . For each UGMaterial part of the Materials , it will instantiate a new Mesh , apply the corresponding Material and output the Z Buffer only on the last instance. This allows to overlay multiple Materials . This can be used when a single mesh is composed of multiple textures where each texture represent a sub-tile of the mesh . Inheritance Object GOBaseRenderer GOCompositeRenderer Implements IUGRenderer IUGObject Inherited Members GOBaseRenderer.m_GameObject GOBaseRenderer.m_Transform GOBaseRenderer.GameObject GOBaseRenderer.Dispose() GOBaseRenderer.Enabled GOBaseRenderer.IUGObject.Disposed GOBaseRenderer.IUGObject.Index GOBaseRenderer.Name GOBaseRenderer.Parent GOBaseRenderer.Transform GOBaseRenderer.Metadata GOBaseRenderer.Children GOBaseRenderer.EnableHighPrecision GOBaseRenderer.AddChild(IUGRenderer) GOBaseRenderer.RemoveChild(IUGRenderer) GOBaseRenderer.ClearChildren() Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class GOCompositeRenderer : GOBaseRenderer, IUGRenderer, IDisposable, IUGObject Constructors GOCompositeRenderer() Default constructor. Responsible to create MeshFilter and MeshRenderer Components . Declaration public GOCompositeRenderer() Properties Materials Set the renderer's material list Declaration public override UGMaterial[] Materials { set; } Property Value Type Description UGMaterial [] Overrides GOBaseRenderer.Materials Mesh Set the renderer's mesh Declaration public override Mesh Mesh { set; } Property Value Type Description Mesh Overrides GOBaseRenderer.Mesh UnityLayer Sets the Unity Layer as defined in the project settings. This integer should be from 0 to 31. Declaration public override int UnityLayer { set; } Property Value Type Description Int32 Overrides GOBaseRenderer.UnityLayer Implements IUGRenderer IUGObject"
  },
  "api/Unity.Geospatial.Streaming.GOMeshRenderer.html": {
    "href": "api/Unity.Geospatial.Streaming.GOMeshRenderer.html",
    "title": "Class GOMeshRenderer | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class GOMeshRenderer Class responsible for converting InstanceID into GameObject with just a simple static MeshRenderer . Inheritance Object GOBaseRenderer GOMeshRenderer Implements IUGRenderer IUGObject Inherited Members GOBaseRenderer.m_GameObject GOBaseRenderer.m_Transform GOBaseRenderer.GameObject GOBaseRenderer.Dispose() GOBaseRenderer.Enabled GOBaseRenderer.IUGObject.Disposed GOBaseRenderer.IUGObject.Index GOBaseRenderer.Name GOBaseRenderer.Parent GOBaseRenderer.Transform GOBaseRenderer.Metadata GOBaseRenderer.Children GOBaseRenderer.EnableHighPrecision GOBaseRenderer.AddChild(IUGRenderer) GOBaseRenderer.RemoveChild(IUGRenderer) GOBaseRenderer.ClearChildren() Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class GOMeshRenderer : GOBaseRenderer, IUGRenderer, IDisposable, IUGObject Constructors GOMeshRenderer() Default constructor. Responsible to create MeshFilter and MeshRenderer Components . Declaration public GOMeshRenderer() Properties Materials Set the renderer's material list Declaration public override UGMaterial[] Materials { set; } Property Value Type Description UGMaterial [] Overrides GOBaseRenderer.Materials Mesh Set the renderer's mesh Declaration public override Mesh Mesh { set; } Property Value Type Description Mesh Overrides GOBaseRenderer.Mesh UnityLayer Sets the Unity Layer as defined in the project settings. This integer should be from 0 to 31. Declaration public override int UnityLayer { set; } Property Value Type Description Int32 Overrides GOBaseRenderer.UnityLayer Implements IUGRenderer IUGObject"
  },
  "api/Unity.Geospatial.Streaming.GONodeRenderer.html": {
    "href": "api/Unity.Geospatial.Streaming.GONodeRenderer.html",
    "title": "Class GONodeRenderer | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class GONodeRenderer Empty renderer where the Mesh and Materials instantiation is skipped. This can be useful when creating a hierarchy of nodes that has no geometry to be rendered. Inheritance Object GOBaseRenderer GONodeRenderer Implements IUGRenderer IUGObject Inherited Members GOBaseRenderer.m_GameObject GOBaseRenderer.m_Transform GOBaseRenderer.GameObject GOBaseRenderer.Dispose() GOBaseRenderer.Enabled GOBaseRenderer.IUGObject.Disposed GOBaseRenderer.IUGObject.Index GOBaseRenderer.Name GOBaseRenderer.Parent GOBaseRenderer.Transform GOBaseRenderer.Metadata GOBaseRenderer.Children GOBaseRenderer.EnableHighPrecision GOBaseRenderer.AddChild(IUGRenderer) GOBaseRenderer.RemoveChild(IUGRenderer) GOBaseRenderer.ClearChildren() Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class GONodeRenderer : GOBaseRenderer, IUGRenderer, IDisposable, IUGObject Properties Materials Set the renderer's material list Declaration public override UGMaterial[] Materials { set; } Property Value Type Description UGMaterial [] Overrides GOBaseRenderer.Materials Mesh Set the renderer's mesh Declaration public override Mesh Mesh { set; } Property Value Type Description Mesh Overrides GOBaseRenderer.Mesh UnityLayer Sets the Unity Layer as defined in the project settings. This integer should be from 0 to 31. Declaration public override int UnityLayer { set; } Property Value Type Description Int32 Overrides GOBaseRenderer.UnityLayer Implements IUGRenderer IUGObject"
  },
  "api/Unity.Geospatial.Streaming.HPTransformExtensions.html": {
    "href": "api/Unity.Geospatial.Streaming.HPTransformExtensions.html",
    "title": "Class HPTransformExtensions | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class HPTransformExtensions Extend the HPTransform methods with geodetic related methods. Inheritance Object HPTransformExtensions Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public static class HPTransformExtensions Methods GetGeodeticCoordinates(HPTransform) Convert the transform position / rotation to a GeodeticTR format. Declaration public static GeodeticTR GetGeodeticCoordinates(this HPTransform transform) Parameters Type Name Description Unity.Geospatial.HighPrecision.HPTransform transform Get the transform values from this component. Returns Type Description GeodeticTR The geodetic result. SetGeodeticCoordinates(HPTransform, GeodeticCoordinates, float3) Set current HPTransform's local position and rotation based on geodetic position coordinates, and euler angles in degrees with range [-180, 180] Declaration public static void SetGeodeticCoordinates(this HPTransform transform, GeodeticCoordinates position, float3 eulerAngles) Parameters Type Name Description Unity.Geospatial.HighPrecision.HPTransform transform Set the transform values to this component. GeodeticCoordinates position Set the translation to this value. float3 eulerAngles Set the orientation to this value."
  },
  "api/Unity.Geospatial.Streaming.html": {
    "href": "api/Unity.Geospatial.Streaming.html",
    "title": "Namespace Unity.Geospatial.Streaming | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Namespace Unity.Geospatial.Streaming Classes DecoderMultiplexer Multiplexer used to converge multiple outputs into a single input with round-robin arbitration of which input to use at which time. DeferredMaterialFactory UGMaterialFactory implementation where materials get instantiated later by the UGSystem allowing dynamic creation based on the current state of the instance. DeferredMaterialFactoryObject UGMaterialFactoryObject implementation where materials get instantiated later by the UGSystem allowing dynamic creation based on the current state of the instance. EdgeCollection List of Edge . EuclideanFlyCamera Camera controlled by the user's keyboard and mouse where Y is always up. This is in contrast with the GlobalFlyCamera which uses the earth's curvature to determine which way is up. This is meant as a minimal example of how to implement a camera controller. The camera's controls are as follows:\\n GeodeticExtent Define a 2D shape with a list of geodetic coordinates (latitude / longitude). GeodeticExtentObject ScriptableObject of a GeodeticExtent allowing the user to define a region polygon using geodetic coordinates (latitude / longitude). to be loaded. GeospatialAssets List of GUIDs allowing to load assets without hardcoded paths by using AssetDatabase.GUIDToAssetPath GlobalFlyCamera The Global Fly Camera components is a simple camera movement controller that was built to test the Unity Geospatial Framework. It provides basic controls that allows the user to fly around the globe with ease and with few restrictions. The primary reason for a custom camera controller is to manage the \"up\" vector of the camera adequately. This controller does not use the scene's up-axis to orient itself but, rather, uses the vector linking the center of the planet to the current position of the camera. The camera's controls are as follows:\\n GOBaseRenderer Base class responsible for converting InstanceID into a GameObject . GOCompositeRenderer Renderer allowing multiple layers of materials for a single Mesh . For each UGMaterial part of the Materials , it will instantiate a new Mesh , apply the corresponding Material and output the Z Buffer only on the last instance. This allows to overlay multiple Materials . This can be used when a single mesh is composed of multiple textures where each texture represent a sub-tile of the mesh . GOMeshRenderer Class responsible for converting InstanceID into GameObject with just a simple static MeshRenderer . GONodeRenderer Empty renderer where the Mesh and Materials instantiation is skipped. This can be useful when creating a hierarchy of nodes that has no geometry to be rendered. HPTransformExtensions Extend the HPTransform methods with geodetic related methods. InstanceData Store the required data to be loaded for a specified InstanceID . LocalVerticalCoordinateSystem The Local Vertical Coordinate System aligns the universe space with the world space in such a way that a specified GameObject is always at the origin of world space. It also rotates the universe space in such a way that Vector3.up in world space corresponds to the earth's normal, relative to the WGS84 ellipsoid. MeshDataUtil Methods to help convert MeshData to a Unity Mesh . MetadataKeys Keys to be used when storing values in the UGMetadata as KeyValuePair . ObserverMultiplexer Multiplexer used to execute with DetailObserverData UGProcessingNode.NodeInput . ObserverMultiplexer.Input Class for a single DetailObserverData . OneToManyNode<T> Create a many output as requested pointing to the same input value. RevertingCommandStack Stack of Actions to be executed by a NodeContentManager and store the equivalent Actions allowing to revert the previously executed Actions . SimpleMaterialFactory Class to create a single UGMaterial instances with its attached MaterialProperty . SimpleMaterialFactoryObject Factory asset to be instantiated into a scene as a UGMaterialFactory for a single material assignation per meshes . UGBehaviourPresenter Main class responsible to convert the streamed geometry into actual GameObjects . Most configurations will only require a single presenter but applications with multiple cameras or applications where the source data is not normalized in space (think multiple planets or non-geolocated dataset) may require multiple presenters. UGCameraBehaviour The UGCamera is a type of controller that can be used within the Unity Geospatial Framework that allows the framework to know what is currently visible through a camera, and to stream the corresponding geometry in while taking into consideration the camera's position, orientation field of view and resolution. Because it relies on the attached Camera parameters, there is nothing to configure for this class, other than ensuring that it has been added to the UGSystemBehaviour 's scene observers. UGCommandBuffer Queue of commands to be executed by a UGCommandBuffer.IListener . This allow to defer and batch the loading. UGCommandBufferProcessor Listener responsible to load / unload data requested by a UGCommandBuffer . UGCommonTerrainMaterial Multi-Material allowing apply multiple Materials / Textures to the same Mesh . UGDataSource Base class that defines a layer of data available to be loaded. This can be a single file, a collection of files, a stream, a connection to a server data set or any other ways to access data. UGDataSourceDecoder Base UGProcessingNode class allowing to load a dataset. UGDataSourceObject Base class that defines an ScriptableObject available to be loaded. This can be a single file, a collection of files, a stream, a connection to a server data set or any other ways to access data. UGDeferredMaterial UGDeferredMaterial allows material customization at runtime per instance data. This can be done by retrieving the material properties per instance data, then assigning these properties directly to the renderer's underlying Unity Materials. UGExtentModifier The extent modifier allow to remove a zone to be displayed for a specified UGDataSourceID . To do so, you must select a GeodeticExtent . This will be the shape that will be used to cut the InstanceData loaded from the UGDataSourceID . UGExtentModifierBehaviour The extent modifier allow to remove a zone to be displayed for a specified UGDataSourceObject . To do so, you must select a GeodeticExtentObject . This will be the shape that will be used to cut the UGDataSourceObject . After, you select UGDataSourceObject in the DifferenceDataSources and IntersectionDataSources that will be cut the selected Extent . UGDataSourceObject part of the DifferenceDataSources list will have everything inside the Extent excluded. And the UGDataSourceObject in the IntersectionDataSources list will only keep their geometry that is inside the Extent shape. UGInstantiator Allow to chain InstanceCommand results. UGMaterial Base class used by the UGMaterialFactory allowing to create Unity Materials to be assigned to instances created by the IUGRenderer . UGMaterialFactory Base class to create UGMaterial instances with its attached MaterialProperty . UGMaterialFactoryObject Base factory asset to be instantiated into a scene as a UGMaterialFactory . UGMetadata This class is designed to contain a geospatial object's metadata. By default, this metadata is comprised of a string dictionary which can contain arbitrary values. However, should a particular use-case require metadata of a different form, such as a hierarchy of elements, this class can be derived and the derived class can be assigned to instances by the decoder. UGMetadataBehaviour The UGMetadataBehaviour is a class designed to wrap the UGMetadata object and expose it to the GameObject workflow. UGModifier Base UGProcessingNode class used to alter loaded datasets. UGModifierBehaviour Abstract class allowing to Instantiate() a UGModifier . UGObjectPool<T> Allow to create new objects by limiting the garbage collection. Each time an object is disposed, it's only flagged has disabled allowing to reuse the object next time a new instance is requested. UGOmniObserverBehaviour The Omni Observer is an omnidirectional observer which ensures that the same level of detail is uniformly streamed in all around the observer, with a level of detail which is inversely proportional to the distance objects are located from the observer. Using this scene observer will increase the amount of video memory required to load the given geometry but will eliminate noticeable loading when rotating the camera. The primary use-case for this observer is VR applications, where the camera turns frequently. UGPresenter Responsible to convert the streamed geometry into actual GameObjects . Most configurations will only require a single presenter but applications with multiple cameras or applications where the source data is not normalized in space (think multiple planets or non-geolocated dataset) may require multiple presenters. UGProcessingNode Base class to execute a task by the UGSystem within a processing graph. UGProcessingNode.NodeInput Base input connector allowing to connect upstream values to an UGProcessingNode.NodeOutput as the source value. UGProcessingNode.NodeInput<T> Generic input connector allowing to connect upstream values to an UGProcessingNode.NodeOutput<T> . UGProcessingNode.NodeOutput Base output connector allowing to connect downstream values to an UGProcessingNode.NodeInput . UGProcessingNode.NodeOutput<T> Generic output connector allowing to connect downstream values to an UGProcessingNode.NodeInput<T> . UGSceneObserver Base Scene Observer class used to calculate the values. UGSceneObserverBehaviour Base class to Instantiate(UGSystemBehaviour) a UGSceneObserver . Scene observer tells the UGSystem which geometry must be loaded at which resolution by calculating the GetErrorSpecification(in DoubleBounds) based on the space it takes in the field of view of the UGSceneObserver . UGShaderPropertiesObject ScriptableObject for UGShaderProperty to be applied on materials . UGShaderProperty Property directive allowing the corresponding method call on a material . UGSimpleMaterial UGMaterial instance creator with a single material . UGSimpleSceneObserver The Simple Scene Observer is a Unity workflow agnostic scene observer which is completed by a Unity workflow dependant implementation. For example, the completes this class' implementation by converting the Unity Camera and Unity Transform properties and members into the abstracted struct. UGSkyboxBehaviour The UGSkybox sets and controls a spherical skybox shader such that it conforms with the geoid being displayed. UGSystem Serves as the center piece to the Unity Geospatial Framework. Responsible to build GameObject type objects (in contrast with DOTS type objects) During runtime, this class will instantiate a number of other GameObject which will serve to render the environment as it is streamed in from various sources. UGSystemBehaviour The UGSystemBehaviour is a relatively thin MonoBehaviour wrapper on the underlying UGSystem class, which serves as the center piece to the Unity Geospatial Framework. It is a facade type interface which is responsible for communicating with the underlying UGSystem as well as building GameObject type objects (in contrast with DOTS type objects) During runtime, this class will instantiate a number of other GameObject which will serve to render the environment as it is streamed in from various sources. UUIDGenerator The UUID Generator is used to generate session unique identifiers for various geospatial internals. It is thread safe, ensuring that it can be accessed both from the main thread as well as from any other thread without worrying about thread safety. VertexInterpolator Class allowing to interpolate blocks of vertices from a source to a goal with a blending ratio. Wgs84 Methods allowing to convert from / to GeodeticCoordinates when based on the Earth-fixed terrestrial reference system and geodetic datum: WGS84. Structs CameraData Store the necessary data to generate a DetailObserverData instance from a Camera component. DetailObserverData UGSceneObserver information allowing to calculate the geometric error specification against it. Edge Define a polygon edge with two vertices indices. EuclideanTR Euclidean transformation (rigid motion) stored as a translation / rotation of a single vector. GeodeticCoordinates Geodetic position stored as latitude / longitude / elevation. GeodeticTR Geodetic transformation (coordinate transformation) stored as latitude / longitude / elevation / rotation of a single vector. InstanceCommand Directives executed by the UGCommandBufferProcessor when allocating a new node instance. Allow to load in memory the geometry and textures before displaying them. InstanceID Unique identifier of an instance (Transform for a given geometry with a specified material). MaterialID Unique identifier of a Material . This allow indirection to the Material and keep the link even after the Material as been disposed of. MaterialProperty Apply a set of values to the material this property is attached to. This can be used to either change the color of the material, apply a texture, set the transparency and many more. Some Type / ValueType can only be applied once per material. MaterialType Determine which UGMaterial the UGMaterialFactory should instantiate. MeshData Use this langword_csharp_struct when reading data that needs to be loaded as a Mesh . This langword_csharp_struct is used to pass a mesh information to the UGCommandBuffer to be converted to a Unity Mesh . Unlike the UnityEngine.Mesh class, this struct can be populated off of the main thread. MeshEditor Set of tools allowing to modify vertices on a Mesh . MeshID Unique identifier of a Mesh . This allow indirection to the Mesh and keep the link even after the Mesh as been disposed of. SerializableMaterialType This struct should only be used for serialization purposes within Unity, either in MonoBehaviours, such that it can appear in the inspector, or for JSON serialization. For any purpose that does not require serialization, please use MaterialType . Cast as quickly as you can to the MaterialType struct which is immutable. SimpleMaterialFactory.DefaultMaterial Specify which material to use for the given Type . SimpleMaterialFactoryObject.DefaultMaterialObject Specify which material to use for a given MaterialType . SystemProcessingEventArgs Arguments passed each time an event is triggered. TextureData Use this langword_csharp_struct when reading data that needs to be loaded as a Texture2D . This langword_csharp_struct is used to pass an image information to the UGCommandBuffer to be converted to a Unity Texture2D . Unlike the UnityEngine.Texture2D class, this struct can be populated off of the main thread. TextureID Unique identifier of a Texture . This allow indirection to the Texture and keep the link even after the Texture as been disposed of. TriangleCollectionIndex Mesh triangles collection indirection allowing giving collections by index instead of the complete array. UGCommonTerrainMaterial.Factory UGCommonTerrainMaterial creator with two layers ( BaseShader , OverlayShader ). UGDataSourceID Unique identifier of a UGDataSource . This allow indirection to the UGDataSource and keep the link even after the UGDataSource as been disposed of. UGSystem.Configuration UGSystem configuration used when creating a new UGSystem instance. Allows to create UGSystem on the fly and also makes the serialization easier. UGSystemBehaviour.PresenterConfiguration Allow to serialize a single UGBehaviourPresenter instance. UGTextureSettings Global options to apply when loading textures . Interfaces ITaskManager Main interface defining how to execute the Tasks . This allow to implement either a custom task manager or decide whether all the Tasks should be executed on the main thread or be multi-threaded. IUGObject Interface used by the UGObjectPool<T> allowing indexing of the created objects. IUGRenderer Interface responsible for making InstanceID rendered by displaying a Mesh with its corresponding Material . UGCommandBuffer.IListener Expected interface when executing ExecuteSingle(UGCommandBuffer.IListener) . UGSimpleSceneObserver.IImplementation Allow to convert an UGSceneObserver to a DetailObserverData instance. Enums InstanceCommand.CommandType Possible commands to be executed for a given InstanceID . MaterialAlphaMode Specify how decode Materials with transparency directives. MaterialLighting Specify whether or not the material will be affected by the scene lighting or not. MaterialPropertyType Specify how a MaterialProperty affects the material . MaterialPropertyValue Specify which elements of the MaterialProperty to apply on the material . RefinementMode Define how a node will be displayed when it's children gets loaded. UGLighting Specify the material type to use when loading a UGDataSource . UGProcessingNode.DataAvailability State of the UGProcessingNode . UGSystem.StreamingModes The streaming mode is an advanced feature that allows the UGSystem to trade off impact on the simulation's framerate in exchange for faster streaming. Delegates DetailObserverData.GeometricErrorFunction langword_csharp_delegate defining a lambda for calculating a geometric error."
  },
  "api/Unity.Geospatial.Streaming.InstanceCommand.CommandType.html": {
    "href": "api/Unity.Geospatial.Streaming.InstanceCommand.CommandType.html",
    "title": "Enum InstanceCommand.CommandType | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Enum InstanceCommand.CommandType Possible commands to be executed for a given InstanceID . Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public enum CommandType Fields Name Description Allocate Allocate memory space for a new instance. Dispose Unload an instance, it won't be available afterward. UpdateVisibility Change the visibility state of the instance (visible / hidden) BeginAtomic Specify a new block of commands will be requested. EndAtomic Specify the last block of commands have been completed."
  },
  "api/Unity.Geospatial.Streaming.InstanceCommand.html": {
    "href": "api/Unity.Geospatial.Streaming.InstanceCommand.html",
    "title": "Struct InstanceCommand | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct InstanceCommand Directives executed by the UGCommandBufferProcessor when allocating a new node instance. Allow to load in memory the geometry and textures before displaying them. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public struct InstanceCommand Constructors InstanceCommand(InstanceCommand.CommandType, InstanceID, InstanceData, Boolean) Default constructor. Declaration public InstanceCommand(InstanceCommand.CommandType command, InstanceID id, InstanceData data, bool visibility) Parameters Type Name Description InstanceCommand.CommandType command Command to be executed for a given InstanceID . InstanceID id Instance to execute the command on. InstanceData data Data to be loaded when the instance is visible. Boolean visibility true to set to display the instance; false to hide it. Properties Command Command to be executed for a given InstanceID . Declaration public InstanceCommand.CommandType Command { get; set; } Property Value Type Description InstanceCommand.CommandType Data Data to be loaded when the instance is visible. Declaration public InstanceData Data { get; set; } Property Value Type Description InstanceData Id Instance to execute the command on. Declaration public InstanceID Id { get; set; } Property Value Type Description InstanceID Visibility true to set to display the instance; false to hide it. Declaration public bool Visibility { get; set; } Property Value Type Description Boolean Methods Allocate(InstanceID, InstanceData) Create an instance by linking a Mesh , a Material and a Transform together Declaration public static InstanceCommand Allocate(InstanceID instanceId, InstanceData instanceData) Parameters Type Name Description InstanceID instanceId Id of the instance allowing to refer to the command / loaded instance. InstanceData instanceData Information of what to link together. Returns Type Description InstanceCommand A new InstanceCommand filled the command directives. BeginAtomic() Specify a new block of commands will be requested. Declaration public static InstanceCommand BeginAtomic() Returns Type Description InstanceCommand A new InstanceCommand filled the command directives. Dispose(InstanceID) Unload an instance by unlinking its Mesh , Material and Transform . Declaration public static InstanceCommand Dispose(InstanceID instanceId) Parameters Type Name Description InstanceID instanceId Id of the instance to dispose of. Returns Type Description InstanceCommand A new InstanceCommand filled the command directives. EndAtomic() Specify the last block of commands have been completed. Declaration public static InstanceCommand EndAtomic() Returns Type Description InstanceCommand A new InstanceCommand filled the command directives. UpdateVisibility(InstanceID, Boolean) Change the visibility state for the given instanceId . Declaration public static InstanceCommand UpdateVisibility(InstanceID instanceId, bool visibility) Parameters Type Name Description InstanceID instanceId Instance to change its visibility state. Boolean visibility true to set to display the instance; false to hide it. Returns Type Description InstanceCommand A new InstanceCommand filled the command directives."
  },
  "api/Unity.Geospatial.Streaming.InstanceData.html": {
    "href": "api/Unity.Geospatial.Streaming.InstanceData.html",
    "title": "Class InstanceData | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class InstanceData Store the required data to be loaded for a specified InstanceID . Inheritance Object InstanceData Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class InstanceData Constructors InstanceData(UGDataSourceID, double4x4, MeshID, MaterialID[]) Default constructor. Declaration public InstanceData(UGDataSourceID dataSource, double4x4 transform, MeshID mesh, MaterialID[] materials) Parameters Type Name Description UGDataSourceID dataSource The instance's source ID. This should match the id of UGDataSource object that this instance originated from. double4x4 transform The transform of the child. If this is a child instance, this will be degraded to a single precision matrix. MeshID mesh The ID of the mesh as provided by the UGCommandBuffer. Once the mesh has been instantiated, this ID will be used to reunite the mesh with the corresponding instance. MaterialID [] materials The materials, once they have been instantiated. Null otherwise. Properties Children Child instances. Note that these will be instantiated with a single precision transform relative to their high precision parent. Declaration public List<InstanceData> Children { get; } Property Value Type Description List < InstanceData > IsRenderable This will change to true once the instance has been reunited with its mesh and its materials. Declaration public bool IsRenderable { get; } Property Value Type Description Boolean MaterialIDs The ID of the materials as provided by the UGCommandBuffer. Once the materials have been instantiated, these IDs will be used to reunite the materials with the corresponding instance. Declaration public MaterialID[] MaterialIDs { get; } Property Value Type Description MaterialID [] Materials The materials, once they have been instantiated. Null otherwise. Declaration public UGMaterial[] Materials { get; } Property Value Type Description UGMaterial [] Mesh The mesh, once it has been instantiated. Null otherwise. Declaration public Mesh Mesh { get; set; } Property Value Type Description Mesh MeshID The ID of the mesh as provided by the UGCommandBuffer. Once the mesh has been instantiated, this ID will be used to reunite the mesh with the corresponding instance. Declaration public MeshID MeshID { get; } Property Value Type Description MeshID Metadata The metadata associated to the same InstanceID . Declaration public UGMetadata Metadata { get; set; } Property Value Type Description UGMetadata Name The name of the instance allowing to differentiate its content from other instances. Declaration public string Name { get; set; } Property Value Type Description String Source The instance's source ID. This should match the id of UGDataSource object that this instance originated from. Declaration public UGDataSourceID Source { get; } Property Value Type Description UGDataSourceID Transform The transform of the child. If this is a child instance, this will be degraded to a single precision matrix. Declaration public double4x4 Transform { get; } Property Value Type Description double4x4 Methods AddChild(InstanceData) Add a child to the given instance. Declaration public void AddChild(InstanceData child) Parameters Type Name Description InstanceData child RemoveChild(InstanceData) Remove a child from the given instance. Declaration public void RemoveChild(InstanceData child) Parameters Type Name Description InstanceData child"
  },
  "api/Unity.Geospatial.Streaming.InstanceID.html": {
    "href": "api/Unity.Geospatial.Streaming.InstanceID.html",
    "title": "Struct InstanceID | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct InstanceID Unique identifier of an instance (Transform for a given geometry with a specified material). Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public readonly struct InstanceID Constructors InstanceID(Int64) Default constructor. Declaration public InstanceID(long uuid) Parameters Type Name Description Int64 uuid Universal unique identifier of the instance. Properties Null Get an InstanceID representing a null value. Declaration public static readonly InstanceID Null { get; } Property Value Type Description InstanceID Methods Equals(Object) Get if this instance is the same as the given obj . Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Compare with this instance. Returns Type Description Boolean true if both instances represent the same; false otherwise. Overrides ValueType.Equals(Object) Equals(InstanceID) Get if two InstanceID represent the same. Declaration public readonly bool Equals(InstanceID other) Parameters Type Name Description InstanceID other Compare with this instance. Returns Type Description Boolean true if both instances represent the same; false otherwise. GetHashCode() Compute a hash code for the object. Declaration public override readonly int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides ValueType.GetHashCode() Remarks You should not assume that equal hash codes imply object equality. You should never persist or use a hash code outside the application domain in which it was created, because the same object may hash differently across application domains, processes, and platforms. ToString() Get the string representation of this InstanceID . Declaration public override readonly string ToString() Returns Type Description String The string result. Overrides ValueType.ToString() Operators Equality(InstanceID, InstanceID) Get if two InstanceID represent the same. Declaration public static bool operator ==(InstanceID first, InstanceID second) Parameters Type Name Description InstanceID first Compare with this first instance. InstanceID second Compare with this other instance. Returns Type Description Boolean true if both instances represent the same; false otherwise. Explicit(Int64 to InstanceID) Cast a langword_csharp_long to a InstanceID . Declaration public static explicit operator InstanceID(long uuid) Parameters Type Name Description Int64 uuid Long value to be converted. Returns Type Description InstanceID The InstanceID representation of the given instance. Explicit(InstanceID to Int64) Cast an InstanceID to a langword_csharp_long . Declaration public static explicit operator long (InstanceID instanceId) Parameters Type Name Description InstanceID instanceId Instance to be converted. Returns Type Description Int64 The langword_csharp_long representation of the given instance. Inequality(InstanceID, InstanceID) Get if two InstanceID does not represent the same. Declaration public static bool operator !=(InstanceID first, InstanceID second) Parameters Type Name Description InstanceID first Compare with this first instance. InstanceID second Compare with this other instance. Returns Type Description Boolean true if both instances are not the same; false if both instances are the same."
  },
  "api/Unity.Geospatial.Streaming.ITaskManager.html": {
    "href": "api/Unity.Geospatial.Streaming.ITaskManager.html",
    "title": "Interface ITaskManager | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface ITaskManager Main interface defining how to execute the Tasks . This allow to implement either a custom task manager or decide whether all the Tasks should be executed on the main thread or be multi-threaded. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public interface ITaskManager Methods ScheduleTask(Action) Schedule a task to run outside of the main thread. Some implementation may prefer to run the task on the main thread anyways in order to support single thread platforms or in order to optimise performance. Declaration void ScheduleTask(Action task) Parameters Type Name Description Action task The action to be scheduled on by the task manager"
  },
  "api/Unity.Geospatial.Streaming.IUGObject.html": {
    "href": "api/Unity.Geospatial.Streaming.IUGObject.html",
    "title": "Interface IUGObject | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface IUGObject Interface used by the UGObjectPool<T> allowing indexing of the created objects. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public interface IUGObject Properties Disposed true if the object is disposed and cannot be used; false otherwise. Declaration bool Disposed { get; set; } Property Value Type Description Boolean Index Index value of the instance allowing faster retrieval within UGObjectPool<T> . Declaration int Index { get; set; } Property Value Type Description Int32"
  },
  "api/Unity.Geospatial.Streaming.IUGRenderer.html": {
    "href": "api/Unity.Geospatial.Streaming.IUGRenderer.html",
    "title": "Interface IUGRenderer | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface IUGRenderer Interface responsible for making InstanceID rendered by displaying a Mesh with its corresponding Material . Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public interface IUGRenderer : IDisposable Properties Children Get the list of child renderers Declaration List<IUGRenderer> Children { get; } Property Value Type Description List < IUGRenderer > Enabled Sets whether the renderer is enabled or not. This should translate into the GameObject or Entity being enabled or not. Declaration bool Enabled { get; set; } Property Value Type Description Boolean EnableHighPrecision Enables high precision on this renderer. If set to false, position will be maintained with a single precision floating point. If set to true, position will be maintained with a double precision floating point. Declaration bool EnableHighPrecision { set; } Property Value Type Description Boolean Materials Set the renderer's material list Declaration UGMaterial[] Materials { set; } Property Value Type Description UGMaterial [] Mesh Set the renderer's mesh Declaration Mesh Mesh { set; } Property Value Type Description Mesh Metadata Set the renderer's metadata Declaration UGMetadata Metadata { set; } Property Value Type Description UGMetadata Name Sets the name of the renderer for debugging purposes. Declaration string Name { set; } Property Value Type Description String Parent Sets the parent of the GameObject within the scene hierarchy. Declaration Transform Parent { set; } Property Value Type Description Transform Transform Set the transform of the renderer. If EnableHighPrecision is not set, this will be reduced to single precision floating point. Declaration double4x4 Transform { set; } Property Value Type Description double4x4 UnityLayer Sets the Unity Layer as defined in the project settings. This integer should be from 0 to 31. Declaration int UnityLayer { set; } Property Value Type Description Int32 Methods AddChild(IUGRenderer) Add a child renderer Declaration void AddChild(IUGRenderer child) Parameters Type Name Description IUGRenderer child ClearChildren() Clear all child renderers. This will not delete the children but rather unparent them to facilitate pooling systems. Declaration void ClearChildren() RemoveChild(IUGRenderer) Remove a child renderer Declaration void RemoveChild(IUGRenderer child) Parameters Type Name Description IUGRenderer child"
  },
  "api/Unity.Geospatial.Streaming.LocalVerticalCoordinateSystem.html": {
    "href": "api/Unity.Geospatial.Streaming.LocalVerticalCoordinateSystem.html",
    "title": "Class LocalVerticalCoordinateSystem | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class LocalVerticalCoordinateSystem The Local Vertical Coordinate System aligns the universe space with the world space in such a way that a specified GameObject is always at the origin of world space. It also rotates the universe space in such a way that Vector3.up in world space corresponds to the earth's normal, relative to the WGS84 ellipsoid. Inheritance Object Object Component Behaviour MonoBehaviour LocalVerticalCoordinateSystem Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) MonoBehaviour.StartCoroutine(String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) UnityEngine.Component.GetComponentInParent(System.Type, System.Boolean) Component.GetComponentInParent(Type) UnityEngine.Component.GetComponentInParent<T>(System.Boolean) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) Component.SendMessageUpwards(String, Object) Component.SendMessageUpwards(String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) Component.BroadcastMessage(String, Object) Component.BroadcastMessage(String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Component.rigidbody Component.rigidbody2D Component.camera Component.light Component.animation Component.constantForce Component.renderer Component.audio Component.networkView Component.collider Component.collider2D Component.hingeJoint Component.particleSystem Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax [RequireComponent(typeof(HPRoot))] public class LocalVerticalCoordinateSystem : MonoBehaviour Fields origin The HPTransform that will be located at the origin of the unity scene. This might be the camera or it might be a point of interest, such as a vehicle or a static object. Declaration public HPTransform origin Field Value Type Description Unity.Geospatial.HighPrecision.HPTransform worldHeightAsAltitude Setting this to true will make it so that the world origin is always at zero elevation. This means that the world space Y axis will directly correspond to elevation relative to the WGS84 ellipsoid. This is particularly usefull for out-of-the-box compatibility with t HDRP's procedural sky, for example. Declaration public bool worldHeightAsAltitude Field Value Type Description Boolean"
  },
  "api/Unity.Geospatial.Streaming.MaterialAlphaMode.html": {
    "href": "api/Unity.Geospatial.Streaming.MaterialAlphaMode.html",
    "title": "Enum MaterialAlphaMode | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Enum MaterialAlphaMode Specify how decode Materials with transparency directives. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public enum MaterialAlphaMode Fields Name Description Opaque Skip the transparency evaluation and consider the object to be opaque. Transparent Use the transparency when evaluating the opacity. AlphaClip Use alpha clipping when evaluating the opacity."
  },
  "api/Unity.Geospatial.Streaming.MaterialID.html": {
    "href": "api/Unity.Geospatial.Streaming.MaterialID.html",
    "title": "Struct MaterialID | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct MaterialID Unique identifier of a Material . This allow indirection to the Material and keep the link even after the Material as been disposed of. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public readonly struct MaterialID Constructors MaterialID(Int64) Default constructor. Declaration public MaterialID(long uuid) Parameters Type Name Description Int64 uuid Universal unique identifier of the material. Methods Equals(Object) Get if this instance is the same as the given obj . Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Compare with this instance. Returns Type Description Boolean true if both instances represent the same; false otherwise. Overrides ValueType.Equals(Object) Equals(MaterialID) Get if two MaterialID represent the same. Declaration public readonly bool Equals(MaterialID other) Parameters Type Name Description MaterialID other Compare with this instance. Returns Type Description Boolean true if both instances represent the same; false otherwise. GetHashCode() Compute a hash code for the object. Declaration public override readonly int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides ValueType.GetHashCode() Remarks You should not assume that equal hash codes imply object equality. You should never persist or use a hash code outside the application domain in which it was created, because the same object may hash differently across application domains, processes, and platforms. ToString() Get the string representation of this MaterialID . Declaration public override readonly string ToString() Returns Type Description String The string result. Overrides ValueType.ToString() Operators Equality(MaterialID, MaterialID) Get if two MaterialID represent the same. Declaration public static bool operator ==(MaterialID first, MaterialID second) Parameters Type Name Description MaterialID first Compare with this first instance. MaterialID second Compare with this other instance. Returns Type Description Boolean true if both instances represent the same; false otherwise. Explicit(Int64 to MaterialID) Cast a langword_csharp_long to a MaterialID . Declaration public static explicit operator MaterialID(long uuid) Parameters Type Name Description Int64 uuid Long value to be converted. Returns Type Description MaterialID The MaterialID representation of the given instance. Explicit(MaterialID to Int64) Cast an MaterialID to a langword_csharp_long . Declaration public static explicit operator long (MaterialID id) Parameters Type Name Description MaterialID id Instance to be converted. Returns Type Description Int64 The langword_csharp_long representation of the given material. Inequality(MaterialID, MaterialID) Get if two MaterialID does not represent the same. Declaration public static bool operator !=(MaterialID first, MaterialID second) Parameters Type Name Description MaterialID first Compare with this first instance. MaterialID second Compare with this other instance. Returns Type Description Boolean true if both instances are not the same; false if both instances are the same."
  },
  "api/Unity.Geospatial.Streaming.MaterialLighting.html": {
    "href": "api/Unity.Geospatial.Streaming.MaterialLighting.html",
    "title": "Enum MaterialLighting | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Enum MaterialLighting Specify whether or not the material will be affected by the scene lighting or not. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public enum MaterialLighting Fields Name Description Lit The material will receive light. Unlit The material will not receive light and will keep a constant look."
  },
  "api/Unity.Geospatial.Streaming.MaterialProperty.html": {
    "href": "api/Unity.Geospatial.Streaming.MaterialProperty.html",
    "title": "Struct MaterialProperty | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct MaterialProperty Apply a set of values to the material this property is attached to. This can be used to either change the color of the material, apply a texture, set the transparency and many more. Some Type / ValueType can only be applied once per material. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public struct MaterialProperty Constructors MaterialProperty(MaterialPropertyType, Single) Constructor for a float property. Declaration public MaterialProperty(MaterialPropertyType type, float floatValue) Parameters Type Name Description MaterialPropertyType type Specify how a MaterialProperty affects the material . Single floatValue Set the FloatValue . MaterialProperty(MaterialPropertyType, MaterialPropertyValue, Vector4, TextureID, Rect) Constructor for a texture property. Declaration public MaterialProperty(MaterialPropertyType type, MaterialPropertyValue valueType, Vector4 textureSt, TextureID textureId, Rect multiTextureMask = default(Rect)) Parameters Type Name Description MaterialPropertyType type Specify how a MaterialProperty affects the material . MaterialPropertyValue valueType Specify which elements of the MaterialProperty to apply on the material . Vector4 textureSt Scale / Transform the texture where x/y represent the scale and z/w represent the position. TextureID textureId Apply this texture to the material. Rect multiTextureMask Apply the given textureId to this area. MaterialProperty(MaterialPropertyType, Color) Constructor for a color property. Declaration public MaterialProperty(MaterialPropertyType type, Color colorValue) Parameters Type Name Description MaterialPropertyType type Specify how a MaterialProperty affects the material . Color colorValue Set the ColorValue . Properties ColorValue Set a color value based on the Type . Declaration public Color ColorValue { get; set; } Property Value Type Description Color FloatValue Set a float value based on the Type . Declaration public float FloatValue { get; set; } Property Value Type Description Single MultiTextureMask Apply the TextureId to this area. Declaration public Rect MultiTextureMask { get; set; } Property Value Type Description Rect Texture Apply a Texture value based on the Type . Declaration public Texture2D Texture { get; set; } Property Value Type Description Texture2D TextureId Apply a Texture value based on the Type . Declaration public TextureID TextureId { get; set; } Property Value Type Description TextureID Type Specify how a MaterialProperty affects the material . Declaration public MaterialPropertyType Type { get; set; } Property Value Type Description MaterialPropertyType ValueType Specify which elements of the MaterialProperty to apply on the material . Declaration public MaterialPropertyValue ValueType { get; set; } Property Value Type Description MaterialPropertyValue Vector4Value Set a Vector4 value based on the Type . Declaration public Vector4 Vector4Value { get; set; } Property Value Type Description Vector4 Methods AlbedoColor(Color) Create a new MaterialProperty with a color property used for the albedo channel. Declaration public static MaterialProperty AlbedoColor(Color color) Parameters Type Name Description Color color Set the ColorValue . Returns Type Description MaterialProperty The newly created MaterialProperty instance. AlbedoTerrain(TextureID, Rect, Vector2, Vector2) Create a new MaterialProperty with a texture property used as a multi-textured terrain. Declaration public static MaterialProperty AlbedoTerrain(TextureID texture, Rect mask, Vector2 translation, Vector2 scale) Parameters Type Name Description TextureID texture Apply this texture to the material. Rect mask Apply the given texture to this area. Vector2 translation Position in uv space of the texture. Vector2 scale Size of the texture in percentage where 1.0 represent 100%. Returns Type Description MaterialProperty The newly created MaterialProperty instance. AlbedoTexture(TextureID) Create a new MaterialProperty with a texture property used for the albedo channel. Declaration public static MaterialProperty AlbedoTexture(TextureID texture) Parameters Type Name Description TextureID texture Apply this texture to the material. Returns Type Description MaterialProperty The newly created MaterialProperty instance. AlbedoTexture(TextureID, Color) Create a new MaterialProperty with a texture property used for the albedo channel. Declaration public static MaterialProperty AlbedoTexture(TextureID texture, Color textureSt) Parameters Type Name Description TextureID texture Apply this texture to the material. Color textureSt Multiply the given texture by this value. Returns Type Description MaterialProperty The newly created MaterialProperty instance. AlphaCutoff(Single) Set alpha cutoff value for alpha-test when the alpha-test mode is enabled This value is ignored if alpha-test mode is disabled Declaration public static MaterialProperty AlphaCutoff(float alphaCutoff) Parameters Type Name Description Single alphaCutoff If the alpha value is greater than or equal to this value, then it is rendered as fully opaque, otherwise, it is rendered as fully transparent. Returns Type Description MaterialProperty The newly created MaterialProperty instance. Smoothness(Single) Create a new MaterialProperty applied to the smoothness of the material. Declaration public static MaterialProperty Smoothness(float smoothness) Parameters Type Name Description Single smoothness Set the FloatValue . Returns Type Description MaterialProperty The newly created MaterialProperty instance."
  },
  "api/Unity.Geospatial.Streaming.MaterialPropertyType.html": {
    "href": "api/Unity.Geospatial.Streaming.MaterialPropertyType.html",
    "title": "Enum MaterialPropertyType | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Enum MaterialPropertyType Specify how a MaterialProperty affects the material . Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public enum MaterialPropertyType Fields Name Description AlbedoTexture Apply a texture to the albedo channel. AlbedoColor Set the albedo color. Smoothness Specify the smoothness of the surface. AlphaCutoff Set the transparency depending on which MaterialType is set."
  },
  "api/Unity.Geospatial.Streaming.MaterialPropertyValue.html": {
    "href": "api/Unity.Geospatial.Streaming.MaterialPropertyValue.html",
    "title": "Enum MaterialPropertyValue | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Enum MaterialPropertyValue Specify which elements of the MaterialProperty to apply on the material . Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public enum MaterialPropertyValue Fields Name Description Float The FloatValue should be applied. Vector4 The Vector4Value should be applied. Color The ColorValue should be applied. Texture The Texture should be applied. TerrainTexture Apply a multi-textured terrains."
  },
  "api/Unity.Geospatial.Streaming.MaterialType.html": {
    "href": "api/Unity.Geospatial.Streaming.MaterialType.html",
    "title": "Struct MaterialType | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct MaterialType Determine which UGMaterial the UGMaterialFactory should instantiate. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public readonly struct MaterialType : IEquatable<MaterialType> Constructors MaterialType(MaterialLighting, MaterialAlphaMode) Default constructor. Declaration public MaterialType(MaterialLighting lighting, MaterialAlphaMode alphaMode) Parameters Type Name Description MaterialLighting lighting Specify whether or not the material will be affected by the scene lighting or not. MaterialAlphaMode alphaMode Specify how decode Materials with transparency directives. Fields AlphaMode Determine if the material is opaque, alpha tested, or transparent Declaration public readonly MaterialAlphaMode AlphaMode Field Value Type Description MaterialAlphaMode Lighting Determine if the material is lit or unlit Declaration public readonly MaterialLighting Lighting Field Value Type Description MaterialLighting Methods Equals(Object) Get if this instance is the same as the given obj . Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Compare with this instance. Returns Type Description Boolean true if both instances represent the same; false otherwise. Overrides ValueType.Equals(Object) Equals(MaterialType) Get if two MaterialType represent the same. Declaration public readonly bool Equals(MaterialType obj) Parameters Type Name Description MaterialType obj Compare with this instance. Returns Type Description Boolean true if both instances represent the same; false otherwise. GetHashCode() Compute a hash code for the object. Declaration public override readonly int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides ValueType.GetHashCode() Remarks You should not assume that equal hash codes imply object equality. You should never persist or use a hash code outside the application domain in which it was created, because the same object may hash differently across application domains, processes, and platforms."
  },
  "api/Unity.Geospatial.Streaming.MeshData.html": {
    "href": "api/Unity.Geospatial.Streaming.MeshData.html",
    "title": "Struct MeshData | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct MeshData Use this langword_csharp_struct when reading data that needs to be loaded as a Mesh . This langword_csharp_struct is used to pass a mesh information to the UGCommandBuffer to be converted to a Unity Mesh . Unlike the UnityEngine.Mesh class, this struct can be populated off of the main thread. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public struct MeshData Fields IndexCount Gets the number of index buffer in the MeshData . Declaration public int IndexCount Field Value Type Description Int32 IndexData Gets raw data from the index buffer of the MeshData . Declaration public byte[] IndexData Field Value Type Description Byte [] IndexFormat Gets the format of the index buffer data in the MeshData . Declaration public IndexFormat IndexFormat Field Value Type Description IndexFormat VertexAttributes Information about each VertexAttribute of the Mesh vertices. Declaration public VertexAttributeDescriptor[] VertexAttributes Field Value Type Description VertexAttributeDescriptor [] VertexCount Gets the number of vertices in the MeshData . Declaration public int VertexCount Field Value Type Description Int32 VertexData Gets raw data for a given vertex buffer stream format in the MeshData . Declaration public byte[] VertexData Field Value Type Description Byte []"
  },
  "api/Unity.Geospatial.Streaming.MeshDataUtil.html": {
    "href": "api/Unity.Geospatial.Streaming.MeshDataUtil.html",
    "title": "Class MeshDataUtil | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class MeshDataUtil Methods to help convert MeshData to a Unity Mesh . Inheritance Object MeshDataUtil Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public static class MeshDataUtil Methods ToUnityMesh(String, MeshData) Convert the given meshData to a Unity Mesh . Declaration public static Mesh ToUnityMesh(string name, MeshData meshData) Parameters Type Name Description String name Set the name of the object. MeshData meshData Data to be converted. Returns Type Description Mesh The newly created Unity Mesh ."
  },
  "api/Unity.Geospatial.Streaming.MeshEditor.html": {
    "href": "api/Unity.Geospatial.Streaming.MeshEditor.html",
    "title": "Struct MeshEditor | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct MeshEditor Set of tools allowing to modify vertices on a Mesh . Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public struct MeshEditor : IDisposable Constructors MeshEditor(ref Mesh.MeshData, VertexAttributeDescriptor[]) Default constructor. Declaration public MeshEditor(ref Mesh.MeshData meshData, VertexAttributeDescriptor[] vertexDescriptor) Parameters Type Name Description Mesh.MeshData meshData VertexAttributeDescriptor [] vertexDescriptor Information about the VertexAttributes of the Mesh vertices . Mesh vertices vertex data comprised of different Vertex Attributes. For example, a vertex can include a Position, Normal, TexCoord0, and Color. Meshes usually use a known format for data layout, for example, a position is most often a 3-component float vector ( Vector3 ), but you can also specify non-standard data formats and their layout for a Mesh . You can use VertexAttributeDescriptor to specify custom mesh data layout in Mesh.SetVertexBufferParams . Vertex data is laid out in separate \"streams\" (each stream goes into a separate vertex buffer in the underlying graphics API). While Unity supports up to 4 vertex streams, most meshes use just one. Separate streams are most useful when some vertex attributes don't need to be processed, for example skinned meshes often use two vertex streams (one containing all the skinned data: positions, normals, tangents; while the other stream contains all the non-skinned data: colors and texture coordinates). Within each stream, attributes of a vertex are laid out one after another, in this order: VertexAttribute.Position VertexAttribute.Normal VertexAttribute.Tangent VertexAttribute.Color VertexAttribute.TexCoord0 VertexAttribute.TexCoord1 VertexAttribute.TexCoord2 VertexAttribute.TexCoord3 VertexAttribute.TexCoord4 VertexAttribute.TexCoord5 VertexAttribute.TexCoord6 VertexAttribute.TexCoord7 VertexAttribute.BlendWeight VertexAttribute.BlendIndices Not all format and dimension combinations are valid. Specifically, the data size of a vertex attribute must be a multiple of 4 bytes. For example, a VertexAttributeFormat.Float16 format with dimension 3 is not valid. See Also: SystemInfo.SupportsVertexAttributeFormat . Methods AssignToMeshData(TriangleCollectionIndex, ref Mesh.MeshData) Transfer the given selection to the given meshData . Declaration public void AssignToMeshData(TriangleCollectionIndex selection, ref Mesh.MeshData meshData) Parameters Type Name Description TriangleCollectionIndex selection Index of the triangle collection to apply. Mesh.MeshData meshData Change the vertices of this instance. CombineAndDispose(TriangleCollectionIndex, TriangleCollectionIndex) Merge two triangle collections into a single one and dispose of them after. Declaration public TriangleCollectionIndex CombineAndDispose(TriangleCollectionIndex a, TriangleCollectionIndex b) Parameters Type Name Description TriangleCollectionIndex a The first collection to merge with. TriangleCollectionIndex b The second collection to merge with. Returns Type Description TriangleCollectionIndex The new collection index of the merge result. Cut(TriangleCollectionIndex, Plane, out TriangleCollectionIndex, out TriangleCollectionIndex, List<Edge>) Split a triangle collection into two by a plane. Declaration public void Cut(TriangleCollectionIndex target, Plane plane, out TriangleCollectionIndex positive, out TriangleCollectionIndex negative, List<Edge> extraEdgeCollection = null) Parameters Type Name Description TriangleCollectionIndex target The collection to cut. Plane plane Cut the collection by this plane. TriangleCollectionIndex positive The new collection index which is on the positive side of the plane. TriangleCollectionIndex negative The new collection index which is on the negative side of the plane. List < Edge > extraEdgeCollection Output the newly created edges into this collection. Discard(TriangleCollectionIndex) Dispose of the given target by emptying its buffer. Declaration public void Discard(TriangleCollectionIndex target) Parameters Type Name Description TriangleCollectionIndex target Index of the collection to discard. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() EdgeExtrude(List<Edge>, Boolean, in Vector3, out TriangleCollectionIndex) Pushes a new edge out from each selected edge in edgesToExtrude, connected by a new face for each edge. Declaration public void EdgeExtrude(List<Edge> edgesToExtrude, bool reverseWindingOrder, in Vector3 direction, out TriangleCollectionIndex extrudeResult) Parameters Type Name Description List < Edge > edgesToExtrude Edges that are extruded Boolean reverseWindingOrder Winding order of the new faces created from extrusion Vector3 direction Edges are extruded in this given direction TriangleCollectionIndex extrudeResult List index for the triangle collection created from extrusion GetFirstCollection() Get the first valid collection of triangles that is not empty. Declaration public TriangleCollectionIndex GetFirstCollection() Returns Type Description TriangleCollectionIndex The first valid triangle collection. If none are valid, Null will be returned."
  },
  "api/Unity.Geospatial.Streaming.MeshID.html": {
    "href": "api/Unity.Geospatial.Streaming.MeshID.html",
    "title": "Struct MeshID | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct MeshID Unique identifier of a Mesh . This allow indirection to the Mesh and keep the link even after the Mesh as been disposed of. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public readonly struct MeshID Constructors MeshID(Int64) Default constructor. Declaration public MeshID(long uuid) Parameters Type Name Description Int64 uuid Universal unique identifier of the mesh. Properties Null Get a MeshID representing a null value. Declaration public static readonly MeshID Null { get; } Property Value Type Description MeshID Methods Equals(Object) Get if this instance is the same as the given obj . Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Compare with this instance. Returns Type Description Boolean true if both instances represent the same; false otherwise. Overrides ValueType.Equals(Object) Equals(MeshID) Get if two MeshID represent the same. Declaration public readonly bool Equals(MeshID other) Parameters Type Name Description MeshID other Compare with this instance. Returns Type Description Boolean true if both instances represent the same; false otherwise. GetHashCode() Compute a hash code for the object. Declaration public override readonly int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides ValueType.GetHashCode() Remarks You should not assume that equal hash codes imply object equality. You should never persist or use a hash code outside the application domain in which it was created, because the same object may hash differently across application domains, processes, and platforms. ToString() Get the string representation of this MeshID . Declaration public override readonly string ToString() Returns Type Description String The string result. Overrides ValueType.ToString() Operators Equality(MeshID, MeshID) Get if two MeshID represent the same. Declaration public static bool operator ==(MeshID first, MeshID second) Parameters Type Name Description MeshID first Compare with this first instance. MeshID second Compare with this other instance. Returns Type Description Boolean true if both instances represent the same; false otherwise. Explicit(Int64 to MeshID) Cast a langword_csharp_long to a MeshID . Declaration public static explicit operator MeshID(long uuid) Parameters Type Name Description Int64 uuid Long value to be converted. Returns Type Description MeshID The MeshID representation of the given instance. Explicit(MeshID to Int64) Cast an MeshID to a langword_csharp_long . Declaration public static explicit operator long (MeshID id) Parameters Type Name Description MeshID id Instance to be converted. Returns Type Description Int64 The langword_csharp_long representation of the given mesh. Inequality(MeshID, MeshID) Get if two MeshID does not represent the same. Declaration public static bool operator !=(MeshID first, MeshID second) Parameters Type Name Description MeshID first Compare with this first instance. MeshID second Compare with this other instance. Returns Type Description Boolean true if both instances are not the same; false if both instances are the same."
  },
  "api/Unity.Geospatial.Streaming.MetadataKeys.html": {
    "href": "api/Unity.Geospatial.Streaming.MetadataKeys.html",
    "title": "Class MetadataKeys | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class MetadataKeys Keys to be used when storing values in the UGMetadata as KeyValuePair . Inheritance Object MetadataKeys Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public static class MetadataKeys Fields Bounds Key used when storing a DoubleBounds value in a UGMetadata instance. Declaration public const string Bounds = \"com.unity.geospatial.bounds\" Field Value Type Description String GeometricError Key used when storing a GeometricError value in a UGMetadata instance. Declaration public const string GeometricError = \"com.unity.geospatial.geometricerror\" Field Value Type Description String NodeId Key used when storing a NodeId in a UGMetadata instance. Declaration public const string NodeId = \"com.unity.geospatial.nodeid\" Field Value Type Description String"
  },
  "api/Unity.Geospatial.Streaming.ObserverMultiplexer.html": {
    "href": "api/Unity.Geospatial.Streaming.ObserverMultiplexer.html",
    "title": "Class ObserverMultiplexer | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class ObserverMultiplexer Multiplexer used to execute with DetailObserverData UGProcessingNode.NodeInput . Inheritance Object UGProcessingNode ObserverMultiplexer Inherited Members UGProcessingNode.IsIdle UGProcessingNode.DataAvailabilityStatus UGProcessingNode.GetDataAvailabilityStatus(UGProcessingNode.NodeOutput) UGProcessingNode.TaskManager UGProcessingNode.InputConnections UGProcessingNode.OutputConnections UGProcessingNode.SetTaskManager(ITaskManager) UGProcessingNode.Connect<T>(UGProcessingNode.NodeOutput<T>, UGProcessingNode.NodeInput<T>) Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class ObserverMultiplexer : UGProcessingNode, IDisposable Constructors ObserverMultiplexer(Int32) Default constructor. Declaration public ObserverMultiplexer(int inputCount) Parameters Type Name Description Int32 inputCount Amount of DetailObserverData to be gathered for the Output . Properties IsProcessing true if the node is currently being executed and cannot be called until completion; false otherwise. Declaration protected override bool IsProcessing { get; } Property Value Type Description Boolean Overrides UGProcessingNode.IsProcessing Output Get the result of this instance once Unity.Geospatial.Streaming.ObserverMultiplexer.ProcessData(System.Int32,Unity.Geospatial.Streaming.DetailObserverData@) has been executed. Declaration public UGProcessingNode.NodeOutput<DetailObserverData[]> Output { get; } Property Value Type Description UGProcessingNode.NodeOutput < DetailObserverData []> ScheduleMainThread true if the process needs to be executed on the main thread; false otherwise. Declaration public override bool ScheduleMainThread { get; } Property Value Type Description Boolean Overrides UGProcessingNode.ScheduleMainThread Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides UGProcessingNode.Dispose() GetInput(Int32) Get the DetailObserverData UGProcessingNode.NodeInput<T> for the given index . Declaration public ObserverMultiplexer.Input GetInput(int index) Parameters Type Name Description Int32 index Index of the instance to retrieve. Returns Type Description ObserverMultiplexer.Input The node input instance at the given index . MainThreadProcess() At the end of each new frame, this method will be called as processes to be executed on the main thread. Declaration public override void MainThreadProcess() Overrides UGProcessingNode.MainThreadProcess() MainThreadUpKeep() At each new frame, this method will be executed before the main thread processes allowing pre-execution. Declaration public override void MainThreadUpKeep() Overrides UGProcessingNode.MainThreadUpKeep()"
  },
  "api/Unity.Geospatial.Streaming.ObserverMultiplexer.Input.html": {
    "href": "api/Unity.Geospatial.Streaming.ObserverMultiplexer.Input.html",
    "title": "Class ObserverMultiplexer.Input | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class ObserverMultiplexer.Input Class for a single DetailObserverData . Inheritance Object UGProcessingNode.NodeInput UGProcessingNode.NodeInput < DetailObserverData > ObserverMultiplexer.Input Inherited Members UGProcessingNode.NodeInput<DetailObserverData>.ConnectedOutput UGProcessingNode.NodeInput<DetailObserverData>.UpstreamDataAvailability Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class Input : UGProcessingNode.NodeInput<DetailObserverData> Constructors Input(ObserverMultiplexer, Int32) Default constructor. Declaration public Input(ObserverMultiplexer mux, int index) Parameters Type Name Description ObserverMultiplexer mux Owner of this input. Int32 index index in the list of DetailObserverData inputs. Properties IsReadyForData Get if the dependency was executed, meaning, ready to get its ConnectedOutput value. Declaration public override bool IsReadyForData { get; } Property Value Type Description Boolean Overrides Unity.Geospatial.Streaming.UGProcessingNode.NodeInput<Unity.Geospatial.Streaming.DetailObserverData>.IsReadyForData Methods ProcessData(ref DetailObserverData) Execute the UGProcessingNode owner of this input based on the given data value. Declaration public override void ProcessData(ref DetailObserverData data) Parameters Type Name Description DetailObserverData data Overrides Unity.Geospatial.Streaming.UGProcessingNode.NodeInput<Unity.Geospatial.Streaming.DetailObserverData>.ProcessData(Unity.Geospatial.Streaming.DetailObserverData)"
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.AssetSchema.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.AssetSchema.html",
    "title": "Class AssetSchema | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class AssetSchema Information for an ogc3d tiles dataset. Inheritance Object AssetSchema Implements IAssetSchema Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public class AssetSchema : IAssetSchema Properties TilesetVersion Application-specific version of this tileset, e.g., for when an existing tileset is updated. Declaration public string TilesetVersion { get; set; } Property Value Type Description String Version The 3D Tiles version. The version defines the JSON schema for the tileset JSON and the base set of tile formats. Declaration public string Version { get; set; } Property Value Type Description String Implements IAssetSchema"
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.B3dmTableSchema.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.B3dmTableSchema.html",
    "title": "Class B3dmTableSchema | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class B3dmTableSchema Default Batched 3D Model Feature Table schema. Inheritance Object B3dmTableSchema Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public class B3dmTableSchema Properties Batch_Length The number of distinguishable models, also called features, in the batch. If the Binary glTF does not have a batchId attribute, this field must be 0. Declaration public int Batch_Length { get; set; } Property Value Type Description Int32 Rtc_Center A 3-component array of numbers defining the center position when positions are defined relative-to-center. Declaration public double[] Rtc_Center { get; set; } Property Value Type Description Double []"
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.BoundingVolumeSchema.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.BoundingVolumeSchema.html",
    "title": "Class BoundingVolumeSchema | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class BoundingVolumeSchema Bounding volume of an ILeaf part of an ogc3d tiles dataset. Inheritance Object BoundingVolumeSchema Implements IBoundingVolumeSchema Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public class BoundingVolumeSchema : IBoundingVolumeSchema Properties Box An array of 12 numbers that define an oriented bounding box. The first three elements define the x, y, and z values for the center of the box. The next three elements (with indices 3, 4, and 5) define the x axis direction and half-length. The next three elements (indices 6, 7, and 8) define the y axis direction and half-length. The last three elements (indices 9, 10, and 11) define the z axis direction and half-length. Declaration public double[] Box { get; set; } Property Value Type Description Double [] Region An array of six numbers that define a bounding geographic region in EPSG:4979 coordinates with the order [west, south, east, north, minimum height, maximum height]. Longitudes and latitudes are in radians, and heights are in meters above (or below) the WGS84 ellipsoid. Declaration public double[] Region { get; set; } Property Value Type Description Double [] Sphere An array of four numbers that define a bounding sphere. The first three elements define the x, y, and z values for the center of the sphere. The last element (with index 3) defines the radius in meters. Declaration public double[] Sphere { get; set; } Property Value Type Description Double [] Methods ToDoubleBounds(double4x4) Convert the IBoundingVolumeSchema to a DoubleBounds based on its values. Declaration public DoubleBounds ToDoubleBounds(double4x4 transform) Parameters Type Name Description double4x4 transform Offset the result by this position. Returns Type Description Unity.Geospatial.HighPrecision.DoubleBounds The DoubleBounds result. Implements IBoundingVolumeSchema"
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.ContentSchema.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.ContentSchema.html",
    "title": "Class ContentSchema | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class ContentSchema Uri getter allowing to retrieve where to get the data to load for this instance. Inheritance Object ContentSchema Implements IContentSchema Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public class ContentSchema : IContentSchema Properties Uri A uri that points to tile content. When the uri is relative, it is relative to the referring tileset JSON file. Declaration public string Uri { get; set; } Property Value Type Description String Url A uri that points to tile content. When the uri is relative, it is relative to the referring tileset JSON file. This is resolved when the dataset is using \"url\" key instead of the standard \"uri\" key. Declaration public string Url { get; set; } Property Value Type Description String Methods GetUri() A uri that points to tile content. When the uri is relative, it is relative to the referring tileset JSON file. Declaration public string GetUri() Returns Type Description String The relative Uri of the data to load. Implements IContentSchema"
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.ExtensionsSchema.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.ExtensionsSchema.html",
    "title": "Class ExtensionsSchema | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class ExtensionsSchema Default empty extensions list. Inheritance Object ExtensionsSchema Implements IExtensionsSchema Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public sealed class ExtensionsSchema : IExtensionsSchema Implements IExtensionsSchema"
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.html",
    "title": "Namespace Unity.Geospatial.Streaming.Ogc3dTiles | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Namespace Unity.Geospatial.Streaming.Ogc3dTiles Classes AssetSchema Information for an ogc3d tiles dataset. B3dmTableSchema Default Batched 3D Model Feature Table schema. BoundingVolumeSchema Bounding volume of an ILeaf part of an ogc3d tiles dataset. ContentSchema Uri getter allowing to retrieve where to get the data to load for this instance. ExtensionsSchema Default empty extensions list. Ogc3dTilesDataSource Data source information required by the OgcTilesetContentLoader<TTileset, TTile> to decoder its content. Ogc3dTilesDataSourceObject ScriptableObject allowing to load ogc3d tiles files. OgcB3dmUriLoader<TTableSchema, TBatchSchema> Default B3DM UriLoader . OgcB3dmUriLoader<TTableSchema, TBatchSchema>.Reader B3DM file reader allowing to extract each part of its content. OgcTilesetContentLoader<TTileset, TTile> Main OGC 3D Tiles dataset loader. This class is customizable and therefore cannot be used alone. For each FileType present in a json ITilesetSchema , a corresponding UriLoader must be RegisterUriLoader(UriLoader) . PropertiesSchema A dictionary object of metadata about per-feature properties. TileSchema Default tile class. Represent a single tile part of a ogc 3d tiles dataset. This contains all the information needed to load the data representing a single tile for a specific zoom level. TileSchema<TBoundingVolume, TContent, TTile> Base tile class with typed parameters. Represent a single tile part of a ogc 3d tiles dataset. This contains all the information needed to load the data representing a single tile for a specific zoom level. TilesetSchema Default top level schema to be used when deserializing an ogc3d tiles dataset with typed parameters allowing a more generic implementation and easier IExtension implementation. TilesetSchema<TAsset, TBoundingVolume, TContent, TExtensions, TExtras, TProperties, TTile> Abstract class for top level schema to be used when deserializing an ogc3d tiles dataset with typed parameters allowing a more generic implementation and easier IExtension implementation. Interfaces IAssetSchema Interface to store information for an ogc3d tiles dataset. IBoundingVolumeSchema Interface to get the bounding volume an ILeaf. IContentSchema Interface to specify where to retrieve the data to load for an instance. IExtension Json extension schema. IExtensionsSchema Extensions part of a dataset. IPropertiesSchema A dictionary object of metadata about per-feature properties. ITileSchema<T> Interface when deserializing ILeaf to this type. ITileSchema<TBoundingVolume, TContent, TTile> Interface when deserializing ILeaf to this type. ITilesetSchema Top level schema interface to be used when deserializing an ogc3d tiles dataset. ITilesetSchema<TAsset, TBoundingVolume, TContent, TExtensions, TExtras, TProperties, TTile> Top level schema interface to be used when deserializing an ogc3d tiles dataset with typed parameters allowing a more generic implementation and easier IExtension implementation."
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.IAssetSchema.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.IAssetSchema.html",
    "title": "Interface IAssetSchema | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface IAssetSchema Interface to store information for an ogc3d tiles dataset. Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public interface IAssetSchema Properties Version The 3D Tiles version. The version defines the JSON schema for the tileset JSON and the base set of tile formats. Declaration string Version { get; } Property Value Type Description String"
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.IBoundingVolumeSchema.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.IBoundingVolumeSchema.html",
    "title": "Interface IBoundingVolumeSchema | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface IBoundingVolumeSchema Interface to get the bounding volume an ILeaf. Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public interface IBoundingVolumeSchema Methods ToDoubleBounds(double4x4) Convert the IBoundingVolumeSchema to a DoubleBounds based on its values. Declaration DoubleBounds ToDoubleBounds(double4x4 transform) Parameters Type Name Description double4x4 transform Offset the result by this position. Returns Type Description Unity.Geospatial.HighPrecision.DoubleBounds The DoubleBounds result."
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.IContentSchema.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.IContentSchema.html",
    "title": "Interface IContentSchema | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface IContentSchema Interface to specify where to retrieve the data to load for an instance. Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public interface IContentSchema Methods GetUri() A uri that points to tile content. When the uri is relative, it is relative to the referring tileset JSON file. Declaration string GetUri() Returns Type Description String The relative Uri of the data to load."
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.IExtension.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.IExtension.html",
    "title": "Interface IExtension | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface IExtension Json extension schema. Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public interface IExtension"
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.IExtensionsSchema.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.IExtensionsSchema.html",
    "title": "Interface IExtensionsSchema | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface IExtensionsSchema Extensions part of a dataset. Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public interface IExtensionsSchema"
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.IPropertiesSchema.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.IPropertiesSchema.html",
    "title": "Interface IPropertiesSchema | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface IPropertiesSchema A dictionary object of metadata about per-feature properties. Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public interface IPropertiesSchema"
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.ITileSchema-1.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.ITileSchema-1.html",
    "title": "Interface ITileSchema<T> | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface ITileSchema<T> Interface when deserializing ILeaf to this type. Inherited Members ILeaf.GetBoundingVolume(double4x4) ILeaf.GetChildren() ILeaf.GetGeometricError() ILeaf.GetRefinement(RefinementMode) ILeaf.GetTransform() ILeaf.GetUriCollection(Uri) Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public interface ITileSchema<out T> : ILeaf where T : ITileSchema<T> Type Parameters Name Description T The ILeaf type to deserialize to. Properties Content Metadata about the tile's content and a link to the content. When this is omitted the tile is just used for culling. Declaration IContentSchema Content { get; } Property Value Type Description IContentSchema Methods TransformToDouble4X4() Convert the tile transform value to a double4x4 matrix. Declaration double4x4 TransformToDouble4X4() Returns Type Description double4x4 The matrix created from the transform value."
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.ITileSchema-3.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.ITileSchema-3.html",
    "title": "Interface ITileSchema<TBoundingVolume, TContent, TTile> | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface ITileSchema<TBoundingVolume, TContent, TTile> Interface when deserializing ILeaf to this type. Inherited Members ITileSchema<TTile>.TransformToDouble4X4() ILeaf.GetBoundingVolume(double4x4) ILeaf.GetChildren() ILeaf.GetGeometricError() ILeaf.GetRefinement(RefinementMode) ILeaf.GetTransform() ILeaf.GetUriCollection(Uri) Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public interface ITileSchema<out TBoundingVolume, out TContent, out TTile> : ITileSchema<TTile>, ILeaf where TBoundingVolume : IBoundingVolumeSchema where TContent : IContentSchema where TTile : ITileSchema<TBoundingVolume, TContent, TTile> Type Parameters Name Description TBoundingVolume Bounding volume for each ILeaf part of the dataset. TContent ILeaf Uri getter allowing to retrieve where to get the data to load for this instance. TTile The ILeaf type to deserialize to. Properties Content Declaration TContent Content { get; } Property Value Type Description TContent"
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.ITilesetSchema.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.ITilesetSchema.html",
    "title": "Interface ITilesetSchema | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface ITilesetSchema Top level schema interface to be used when deserializing an ogc3d tiles dataset. Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public interface ITilesetSchema Properties Asset Metadata about the entire tileset. Declaration IAssetSchema Asset { get; } Property Value Type Description IAssetSchema Extensions Extensions part of this tileset. Declaration IExtensionsSchema Extensions { get; } Property Value Type Description IExtensionsSchema ExtensionsRequired Names of 3D Tiles extensions required to properly load this tileset. Declaration string[] ExtensionsRequired { get; } Property Value Type Description String [] ExtensionsUsed Names of 3D Tiles extensions used somewhere in this tileset. Declaration string[] ExtensionsUsed { get; } Property Value Type Description String [] GeometricError The error, in meters, introduced if this tileset is not rendered. At runtime, the geometric error is used to compute screen space error (SSE), i.e., the error measured in pixels. Declaration float GeometricError { get; } Property Value Type Description Single Properties A dictionary object of metadata about per-feature properties. Declaration IPropertiesSchema Properties { get; } Property Value Type Description IPropertiesSchema Methods GetRoot<TTile>() The root tile. Declaration TTile GetRoot<TTile>() where TTile : ITileSchema<TTile> Returns Type Description TTile The first to load. Type Parameters Name Description TTile Implementation of class."
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.ITilesetSchema-7.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.ITilesetSchema-7.html",
    "title": "Interface ITilesetSchema<TAsset, TBoundingVolume, TContent, TExtensions, TExtras, TProperties, TTile> | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface ITilesetSchema<TAsset, TBoundingVolume, TContent, TExtensions, TExtras, TProperties, TTile> Top level schema interface to be used when deserializing an ogc3d tiles dataset with typed parameters allowing a more generic implementation and easier IExtension implementation. Inherited Members ITilesetSchema.ExtensionsUsed ITilesetSchema.ExtensionsRequired ITilesetSchema.GeometricError ITilesetSchema.GetRoot<T>() Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public interface ITilesetSchema<out TAsset, TBoundingVolume, TContent, out TExtensions, out TExtras, out TProperties, out TTile> : ITilesetSchema where TAsset : IAssetSchema where TBoundingVolume : IBoundingVolumeSchema where TContent : IContentSchema where TExtensions : IExtensionsSchema where TProperties : IPropertiesSchema where TTile : ITileSchema<TBoundingVolume, TContent, TTile> Type Parameters Name Description TAsset Information of the dataset. TBoundingVolume Bounding volume for each ILeaf part of the dataset. TContent Uri getter allowing to retrieve where to get the data to load for this instance. TExtensions Extensions part of a dataset. TExtras Dictionary of extra information. TProperties A dictionary object of metadata about per-feature properties. TTile Deserialize instances to this type. Properties Asset Metadata about the entire tileset. Declaration TAsset Asset { get; } Property Value Type Description TAsset Extensions Extensions part of this tileset. Declaration TExtensions Extensions { get; } Property Value Type Description TExtensions Extras Dictionary of extra information. Declaration TExtras Extras { get; } Property Value Type Description TExtras Properties A dictionary object of metadata about per-feature properties. Declaration TProperties Properties { get; } Property Value Type Description TProperties Root The root tile. Declaration TTile Root { get; } Property Value Type Description TTile The first to load."
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.Ogc3dTilesDataSource.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.Ogc3dTilesDataSource.html",
    "title": "Class Ogc3dTilesDataSource | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class Ogc3dTilesDataSource Data source information required by the OgcTilesetContentLoader<TTileset, TTile> to decoder its content. Inheritance Object UGDataSource UniversalDecoderDataSource Ogc3dTilesDataSource Inherited Members UniversalDecoderDataSource.GetDecoderType() UniversalDecoderDataSource.InstantiateDecoder(UUIDGenerator, UGMaterialFactory, UGDataSource[], Int32) UGDataSource.DataSourceID Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public class Ogc3dTilesDataSource : UniversalDecoderDataSource Constructors Ogc3dTilesDataSource(String, UGLighting, UGTextureSettings, Single, UGDataSourceID) Default constructor Declaration public Ogc3dTilesDataSource(string uri, UGLighting lighting, UGTextureSettings textureSettings, float detailMultiplier, UGDataSourceID dataSourceId) Parameters Type Name Description String uri The URI of the 3D Tiles dataset UGLighting lighting Lighting override, to force lit or unlit as required. UGTextureSettings textureSettings Texture settings to override texture filtering. Single detailMultiplier Detail multiplier, which adjusts the level of details of the specific data source. UGDataSourceID dataSourceId The id of the corresponding datasource Properties DetailMultiplier Multiply the GeometricError with this value allowing resolution control per UGDataSource . Declaration public float DetailMultiplier { get; } Property Value Type Description Single Lighting Lighting type to apply to the shading. Declaration public UGLighting Lighting { get; } Property Value Type Description UGLighting TextureSettings Texture options to apply for each imported texture. Declaration public UGTextureSettings TextureSettings { get; } Property Value Type Description UGTextureSettings Uri Address of the tileset.json file to decoder. Declaration public string Uri { get; } Property Value Type Description String Methods InitializerDecoder(NodeContentManager) Initialize decoder by adding relevant nodes to the hierarchy and by initializing the content manager with the appropriately configured loaders. Declaration public override void InitializerDecoder(NodeContentManager contentManager) Parameters Type Name Description NodeContentManager contentManager The content manager to be initialized with this datasource Overrides UniversalDecoderDataSource.InitializerDecoder(NodeContentManager)"
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.Ogc3dTilesDataSourceObject.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.Ogc3dTilesDataSourceObject.html",
    "title": "Class Ogc3dTilesDataSourceObject | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class Ogc3dTilesDataSourceObject ScriptableObject allowing to load ogc3d tiles files. Inheritance Object Object ScriptableObject UGDataSourceObject Ogc3dTilesDataSourceObject Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax [CreateAssetMenu(fileName = \"OGC-3DTiles\", menuName = \"Geospatial/Data Sources/OGC 3DTiles\", order = 100)] public class Ogc3dTilesDataSourceObject : UGDataSourceObject Fields anisotropicFilterLevel This property defines the anisotropic filtering level for textures Declaration [Range(0F, 16F)] public int anisotropicFilterLevel Field Value Type Description Int32 defaultFilterMode This property defines the default filtering mode for textures that have no such specification in the dataset Declaration public FilterMode defaultFilterMode Field Value Type Description FilterMode detailMultiplier This property adjusts the level of detail for the given dataset A lower value will lower the level of detail Min value must be > 0 to avoid division by 0 when this value is used later to calculate error ratio Declaration [Min(1.401298E-45F)] public float detailMultiplier Field Value Type Description Single generateMipMaps Set this property to true to enable mip map generation. Declaration public bool generateMipMaps Field Value Type Description Boolean lighting Allows you to override the shading of the given dataset. By default, many datasets which are derived from satelite imagery use unlit textures and call for unlit shading. This setting allows the user to override this and make use of lit shading even if the dataset calls for unlit shading. Declaration public UGLighting lighting Field Value Type Description UGLighting uri The URI of the OGC 3DTiles dataset. It can be either an absolute or relative path in the following form Note that relative path is relative to streamingAssetsPath . Declaration public string uri Field Value Type Description String Properties DataSourceID Scriptable object associated with this instance. Declaration public override UGDataSourceID DataSourceID { get; } Property Value Type Description UGDataSourceID Overrides UGDataSourceObject.DataSourceID Methods Instantiate(UGSystemBehaviour) Instantiates the underlying UGDataSource object. For most use-cases, this should only be called by the UGSystemBehaviour. Declaration public override UGDataSource Instantiate(UGSystemBehaviour system) Parameters Type Name Description UGSystemBehaviour system Instantiate the UGDataSource as child of this UGSystemBehaviour . Returns Type Description UGDataSource The newly instantiated UGDataSource . Overrides UGDataSourceObject.Instantiate(UGSystemBehaviour)"
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.OgcB3dmUriLoader-2.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.OgcB3dmUriLoader-2.html",
    "title": "Class OgcB3dmUriLoader<TTableSchema, TBatchSchema> | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class OgcB3dmUriLoader<TTableSchema, TBatchSchema> Default B3DM UriLoader . Inheritance Object UriLoader GltfUriLoader OgcB3dmUriLoader<TTableSchema, TBatchSchema> Inherited Members GltfUriLoader.ZMinusForwardMatrix GltfUriLoader.ZPlusForwardMatrix GltfUriLoader.LoadAsync(NodeId, Func<GltfImport, ImportSettings, Task<Boolean>>, Uri, double4x4) GltfUriLoader.Unload(InstanceID) UriLoader.LoaderActions Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public class OgcB3dmUriLoader<TTableSchema, TBatchSchema> : GltfUriLoader where TTableSchema : B3dmTableSchema Type Parameters Name Description TTableSchema Schema to be used when deserializing the json header part of B3DM files. TBatchSchema Deserializing the batch header part of B3DM files to this type. Constructors OgcB3dmUriLoader(ILoaderActions, UGDataSourceID, UGLighting, UGTextureSettings) Constructor with the adjustment matrix set to identity. Declaration public OgcB3dmUriLoader(ILoaderActions loaderActions, UGDataSourceID dataSource, UGLighting lighting, UGTextureSettings textureSettings) Parameters Type Name Description ILoaderActions loaderActions Reference to the command buffer the UriLoader should publish it's output to. UGDataSourceID dataSource Unique identifier allowing to do indirect assignment. UGLighting lighting Lighting type to apply to the shading. UGTextureSettings textureSettings Texture options to apply for each imported texture. OgcB3dmUriLoader(ILoaderActions, UGDataSourceID, UGLighting, UGTextureSettings, double4x4) Default constructor. Declaration public OgcB3dmUriLoader(ILoaderActions loaderActions, UGDataSourceID dataSource, UGLighting lighting, UGTextureSettings textureSettings, double4x4 adjustmentMatrix) Parameters Type Name Description ILoaderActions loaderActions Reference to the command buffer the UriLoader should publish it's output to. UGDataSourceID dataSource Unique identifier allowing to do indirect assignment. UGLighting lighting Lighting type to apply to the shading. UGTextureSettings textureSettings Texture options to apply for each imported texture. double4x4 adjustmentMatrix Each time a node is loaded, multiply its transform by this matrix allowing axis alignments when the format is not left-handed, Y-Up. Properties SupportedFileTypes Returns the files types that are supported by this content loader. Declaration public override IEnumerable<FileType> SupportedFileTypes { get; } Property Value Type Description IEnumerable < FileType > Overrides GltfUriLoader.SupportedFileTypes Methods LoadAsync(NodeId, Byte[], String, double4x4) Load the content specified as a langword_csharp_byte array. Returns a task which, when completed, will return the InstanceId of the generated instance. Declaration public override async Task<InstanceID> LoadAsync(NodeId nodeId, byte[] bytes, string uri, double4x4 transform) Parameters Type Name Description NodeId nodeId BoundingVolumeHierarchy<T> NodeId requested to be loaded. Byte [] bytes Load the file from this Byte array instead from a path. String uri The uri to be loaded. double4x4 transform The transform to be applied to the underlying geometry Returns Type Description Task < InstanceID > The instance ID of the resulting geometry. Overrides GltfUriLoader.LoadAsync(NodeId, Byte[], String, double4x4) LoadAsync(NodeId, Byte[], Uri, double4x4) Load the content specified as a langword_csharp_byte array. Returns a task which, when completed, will return the InstanceId of the generated instance. Declaration public override async Task<InstanceID> LoadAsync(NodeId nodeId, byte[] bytes, Uri uri, double4x4 transform) Parameters Type Name Description NodeId nodeId BoundingVolumeHierarchy<T> NodeId requested to be loaded. Byte [] bytes Load the file from this Byte array instead from a path. Uri uri The uri to be loaded. double4x4 transform The transform to be applied to the underlying geometry Returns Type Description Task < InstanceID > The instance ID of the resulting geometry. Overrides GltfUriLoader.LoadAsync(NodeId, Byte[], Uri, double4x4) LoadAsync(NodeId, UriNodeContent, double4x4) Load the content specified by the uri. Returns a task which, when completed, will return the InstanceId of the generated instance. Declaration public override async Task<InstanceID> LoadAsync(NodeId nodeId, UriNodeContent content, double4x4 transform) Parameters Type Name Description NodeId nodeId BoundingVolumeHierarchy<T> NodeId requested to be loaded. UriNodeContent content Content holding the URI and transform information. double4x4 transform The transform to be applied to the underlying geometry Returns Type Description Task < InstanceID > The instance ID of the resulting geometry. Overrides GltfUriLoader.LoadAsync(NodeId, UriNodeContent, double4x4)"
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.OgcB3dmUriLoader-2.Reader.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.OgcB3dmUriLoader-2.Reader.html",
    "title": "Class OgcB3dmUriLoader<TTableSchema, TBatchSchema>.Reader | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class OgcB3dmUriLoader<TTableSchema, TBatchSchema>.Reader B3DM file reader allowing to extract each part of its content. Inheritance Object OgcB3dmUriLoader<TTableSchema, TBatchSchema>.Reader Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public class Reader Constructors Reader(in Byte[], String) Default constructor. Declaration public Reader(in byte[] data, string name) Parameters Type Name Description Byte [] data Binary content of a b3dm file to parse. String name Name of the file helping logs if the content is invalid. Properties Length Get the length of the entire tile, including the header, in bytes. Declaration public int Length { get; } Property Value Type Description Int32 Methods GetBatchTableBinary() Get the batch table binary part of the b3dm file. Declaration public byte[] GetBatchTableBinary() Returns Type Description Byte [] The batch table binary as a langword_csharp_byte langword_csharp_array . GetBatchTableJson() Get the batch table json part of the b3dm file. Declaration public TBatchSchema GetBatchTableJson() Returns Type Description TBatchSchema The deserialized batch table json. GetBinaryGltf() Get the glTF part of the b3dm file. Declaration public byte[] GetBinaryGltf() Returns Type Description Byte [] The glTF file as a langword_csharp_byte langword_csharp_array . GetFeatureTableBinary() Get the feature table binary part of the b3dm file. Declaration public byte[] GetFeatureTableBinary() Returns Type Description Byte [] The feature table binary as a langword_csharp_byte langword_csharp_array . GetFeatureTableJson() Get the feature table json part of the b3dm file. Declaration public TTableSchema GetFeatureTableJson() Returns Type Description TTableSchema The deserialized feature table json. GetVersion() Get the version of the Batched 3D Model format. Declaration public int GetVersion() Returns Type Description Int32 The version number."
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.OgcTilesetContentLoader-2.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.OgcTilesetContentLoader-2.html",
    "title": "Class OgcTilesetContentLoader<TTileset, TTile> | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class OgcTilesetContentLoader<TTileset, TTile> Main OGC 3D Tiles dataset loader. This class is customizable and therefore cannot be used alone. For each FileType present in a json ITilesetSchema , a corresponding UriLoader must be RegisterUriLoader(UriLoader) . Inheritance Object HierarchyContentLoader <TTile, SingleUri > OgcTilesetContentLoader<TTileset, TTile> Implements INodeContentLoader Inherited Members HierarchyContentLoader<TTile, SingleUri>.ContentType HierarchyContentLoader<TTile, SingleUri>.AddTopLevelNode(NodeContentManager, ContentType, UGDataSourceID, double4x4, Single, Uri, RefinementMode) HierarchyContentLoader<TTile, SingleUri>.FileType HierarchyContentLoader<TTile, SingleUri>.GetTransform(NodeContent, double4x4, double4x4) HierarchyContentLoader<TTile, SingleUri>.LoadNodeAsync(NodeId, NodeContent) HierarchyContentLoader<TTile, SingleUri>.LoadRootAsync(NodeContent) HierarchyContentLoader<TTile, SingleUri>.RegisterUriLoader(UriLoader) HierarchyContentLoader<TTile, SingleUri>.ScheduleTask(Action) HierarchyContentLoader<TTile, SingleUri>.UnloadNode(NodeId) Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public class OgcTilesetContentLoader<TTileset, TTile> : HierarchyContentLoader<TTile, SingleUri>, INodeContentLoader where TTileset : ITilesetSchema where TTile : ITileSchema<TTile> Type Parameters Name Description TTileset ITilesetSchema schema class allowing to deserialize the tileset json. TTile ITileSchema<T> schema class allowing to deserialize the tile son part. Remarks TTileset and TTile allow to use your own schema in case you want to support custom extensions. Constructors OgcTilesetContentLoader(INodeContentManager, ContentType, Boolean) Constructor with SwapZYMatrix set as the adjustment matrix. Declaration public OgcTilesetContentLoader(INodeContentManager contentManager, ContentType contentType, bool createHierarchyOnDemand = false) Parameters Type Name Description INodeContentManager contentManager NodeContentManager to use when loading a tile. ContentType contentType Type identifier allowing to figure which INodeContentLoader to execute when loading this content. Boolean createHierarchyOnDemand true to create the BoundingVolumeHierarchy<T> nodes only when the parent node get loaded; false to create all the nodes when LoadNodeAsync(NodeId, NodeContent) is executed for a Unity.Geospatial.Streaming.UniversalDecoder.HierarchyContentLoader`2.RootContent instance. OgcTilesetContentLoader(INodeContentManager, ContentType, double4x4, Boolean) Default constructor. Declaration public OgcTilesetContentLoader(INodeContentManager contentManager, ContentType contentType, double4x4 adjustmentMatrix, bool createHierarchyOnDemand = false) Parameters Type Name Description INodeContentManager contentManager NodeContentManager to use when loading a tile. ContentType contentType Type identifier allowing to figure which INodeContentLoader to execute when loading this content. double4x4 adjustmentMatrix Each time a node is loaded, multiply its transform by this matrix allowing axis alignments when the format is not left-handed, Y-Up. Boolean createHierarchyOnDemand true to create the BoundingVolumeHierarchy<T> nodes only when the parent node get loaded; false to create all the nodes when LoadNodeAsync(NodeId, NodeContent) is executed for a Unity.Geospatial.Streaming.UniversalDecoder.HierarchyContentLoader`2.RootContent instance. Fields SwapZYMatrix Since Ogc is Z Up, multiplying transforms by this matrix will switch it to Y Up. Declaration public static readonly double4x4 SwapZYMatrix Field Value Type Description double4x4 Properties FileType FileType associated with this loader allowing to call within LoadNodeAsync(NodeId, NodeContent) when the URI is of the same type. Declaration public override FileType FileType { get; } Property Value Type Description FileType Overrides Unity.Geospatial.Streaming.UniversalDecoder.HierarchyContentLoader<TTile, Unity.Geospatial.Streaming.UniversalDecoder.SingleUri>.FileType Methods LoadRootAsync(NodeContent) Deserialize the given NodeContent to a TTileset instance. Declaration public override async Task<TTile> LoadRootAsync(NodeContent nodeContent) Parameters Type Name Description NodeContent nodeContent The node content that should be loaded by the content loader. Returns Type Description Task <TTile> The newly created instance corresponding to the loaded content. Overrides Unity.Geospatial.Streaming.UniversalDecoder.HierarchyContentLoader<TTile, Unity.Geospatial.Streaming.UniversalDecoder.SingleUri>.LoadRootAsync(Unity.Geospatial.Streaming.UniversalDecoder.NodeContent) Implements INodeContentLoader"
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.PropertiesSchema.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.PropertiesSchema.html",
    "title": "Class PropertiesSchema | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class PropertiesSchema A dictionary object of metadata about per-feature properties. Inheritance Object PropertiesSchema Implements IPropertiesSchema Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public class PropertiesSchema : IPropertiesSchema Implements IPropertiesSchema"
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.TileSchema.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.TileSchema.html",
    "title": "Class TileSchema | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class TileSchema Default tile class. Represent a single tile part of a ogc 3d tiles dataset. This contains all the information needed to load the data representing a single tile for a specific zoom level. Inheritance Object TileSchema < BoundingVolumeSchema , ContentSchema , TileSchema > TileSchema Implements ITileSchema < BoundingVolumeSchema , ContentSchema , TileSchema > ITileSchema < TileSchema > ILeaf Inherited Members TileSchema<BoundingVolumeSchema, ContentSchema, TileSchema>.BoundingVolume TileSchema<BoundingVolumeSchema, ContentSchema, TileSchema>.Children TileSchema<BoundingVolumeSchema, ContentSchema, TileSchema>.Content TileSchema<BoundingVolumeSchema, ContentSchema, TileSchema>.ITileSchema<TileSchema>.Content TileSchema<BoundingVolumeSchema, ContentSchema, TileSchema>.GeometricError TileSchema<BoundingVolumeSchema, ContentSchema, TileSchema>.ILeaf.GetBoundingVolume(double4x4) TileSchema<BoundingVolumeSchema, ContentSchema, TileSchema>.ILeaf.GetChildren() TileSchema<BoundingVolumeSchema, ContentSchema, TileSchema>.ILeaf.GetGeometricError() TileSchema<BoundingVolumeSchema, ContentSchema, TileSchema>.GetRefinement(RefinementMode) TileSchema<BoundingVolumeSchema, ContentSchema, TileSchema>.ILeaf.GetTransform() TileSchema<BoundingVolumeSchema, ContentSchema, TileSchema>.ILeaf.GetUriCollection(Uri) TileSchema<BoundingVolumeSchema, ContentSchema, TileSchema>.Refine TileSchema<BoundingVolumeSchema, ContentSchema, TileSchema>.Transform TileSchema<BoundingVolumeSchema, ContentSchema, TileSchema>.TransformToDouble4X4() Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public class TileSchema : TileSchema<BoundingVolumeSchema, ContentSchema, TileSchema>, ITileSchema<BoundingVolumeSchema, ContentSchema, TileSchema>, ITileSchema<TileSchema>, ILeaf Implements ITileSchema<TBoundingVolume, TContent, TTile> ITileSchema<T> ILeaf"
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.TileSchema-3.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.TileSchema-3.html",
    "title": "Class TileSchema<TBoundingVolume, TContent, TTile> | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class TileSchema<TBoundingVolume, TContent, TTile> Base tile class with typed parameters. Represent a single tile part of a ogc 3d tiles dataset. This contains all the information needed to load the data representing a single tile for a specific zoom level. Inheritance Object TileSchema<TBoundingVolume, TContent, TTile> TileSchema Implements ITileSchema <TBoundingVolume, TContent, TTile> ITileSchema <TTile> ILeaf Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public abstract class TileSchema<TBoundingVolume, TContent, TTile> : ITileSchema<TBoundingVolume, TContent, TTile>, ITileSchema<TTile>, ILeaf where TBoundingVolume : IBoundingVolumeSchema where TContent : IContentSchema where TTile : ITileSchema<TBoundingVolume, TContent, TTile> Type Parameters Name Description TBoundingVolume Type returned by . TContent Type returned by Content . TTile Type returned by . Properties BoundingVolume The bounding volume that encloses the tile. Declaration public TBoundingVolume BoundingVolume { get; set; } Property Value Type Description TBoundingVolume Children An array of objects that define child tiles. Each child tile content is fully enclosed by its parent tile's bounding volume and, generally, has a geometricError less than its parent tile's geometricError. For leaf tiles, the length of this array is zero, and children may not be defined. Declaration public TTile[] Children { get; set; } Property Value Type Description TTile[] Content Declaration public TContent Content { get; set; } Property Value Type Description TContent GeometricError The error, in meters, introduced if this tile is rendered and its children are not. At runtime, the geometric error is used to compute screen space error (SSE), i.e., the error measured in pixels. Declaration public float GeometricError { get; set; } Property Value Type Description Single Refine Specifies if additive or replacement refinement is used when traversing the tileset for rendering. This property is required for the root tile of a tileset; it is optional for all other tiles. The default is to inherit from the parent tile. Declaration public string Refine { get; set; } Property Value Type Description String Transform A double floating-point 4x4 affine transformation matrix, stored in column-major order, that transforms the tile's content --i.e., its features as well as content.boundingVolume, boundingVolume, and viewerRequestVolume-- from the tile's local coordinate system to the parent tile's coordinate system, or, in the case of a root tile, from the tile's local coordinate system to the tileset's coordinate system. transform does not apply to any volume property when the volume is a region, defined in EPSG:4979 coordinates. transform scales the geometricError by the maximum scaling factor from the matrix. Declaration public double[] Transform { get; set; } Property Value Type Description Double [] Methods GetRefinement(RefinementMode) Specifies if additive or replacement refinement is used when traversing the hierarchy for rendering. This property is required for the root item; it is optional for all other children. The default is to inherit from the parent item. Declaration public RefinementMode GetRefinement(RefinementMode inherited) Parameters Type Name Description RefinementMode inherited The parent refine value in case the refine value on this item is not set. Returns Type Description RefinementMode The RefinementMode to use when loading the ILeaf . TransformToDouble4X4() Convert the tile transform value to a double4x4 matrix. Declaration public double4x4 TransformToDouble4X4() Returns Type Description double4x4 The matrix created from the transform value. Explicit Interface Implementations ITileSchema<TTile>.Content Metadata about the tile's content and a link to the content. When this is omitted the tile is just used for culling. Declaration IContentSchema ITileSchema<TTile>.Content { get; } Returns Type Description IContentSchema ILeaf.GetBoundingVolume(double4x4) The bounding volume that encloses the item geometry. Declaration DoubleBounds ILeaf.GetBoundingVolume(double4x4 transform) Parameters Type Name Description double4x4 transform Offset the result by this position. Returns Type Description Unity.Geospatial.HighPrecision.DoubleBounds The bounding volume to use when calculating the screen space error of this ILeaf instance. ILeaf.GetChildren() Enumerate child items of this parent. Each child content is fully enclosed by its parent bounding volume and, generally, has a geometricError less than its parent geometricError. For leaf items, the length of this array is zero, and children may not be defined. Declaration IEnumerable<ILeaf> ILeaf.GetChildren() Returns Type Description IEnumerable < ILeaf > Enumerate the children of this ILeaf instance. ILeaf.GetGeometricError() The error, in meters, introduced if this item is rendered and its children are not. At runtime, the geometric error is used to compute screen space error (SSE), i.e., the error measured in pixels. Declaration float ILeaf.GetGeometricError() Returns Type Description Single The error value to compute the screen space error of the ILeaf instance. ILeaf.GetTransform() Get a double4x4 matrix representing where the item content should be positioned, turned and scaled. Declaration double4x4 ILeaf.GetTransform() Returns Type Description double4x4 The matrix of the item. ILeaf.GetUriCollection(Uri) A uri collection that points to the all the content to load. When the uri are relative, it is relative to the referring top parent. Declaration IUriCollection ILeaf.GetUriCollection(Uri baseUri) Parameters Type Name Description Uri baseUri An absolute URI of the root ILeaf . Returns Type Description IUriCollection Address of the content to be loaded. Implements ITileSchema<TBoundingVolume, TContent, TTile> ITileSchema<T> ILeaf"
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.TilesetSchema.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.TilesetSchema.html",
    "title": "Class TilesetSchema | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class TilesetSchema Default top level schema to be used when deserializing an ogc3d tiles dataset with typed parameters allowing a more generic implementation and easier IExtension implementation. Inheritance Object TilesetSchema < AssetSchema , BoundingVolumeSchema , ContentSchema , ExtensionsSchema , JToken , PropertiesSchema , TileSchema > TilesetSchema Implements ITilesetSchema < AssetSchema , BoundingVolumeSchema , ContentSchema , ExtensionsSchema , JToken , PropertiesSchema , TileSchema > ITilesetSchema Inherited Members TilesetSchema<AssetSchema, BoundingVolumeSchema, ContentSchema, ExtensionsSchema, JToken, PropertiesSchema, TileSchema>.Asset TilesetSchema<AssetSchema, BoundingVolumeSchema, ContentSchema, ExtensionsSchema, JToken, PropertiesSchema, TileSchema>.ITilesetSchema.Asset TilesetSchema<AssetSchema, BoundingVolumeSchema, ContentSchema, ExtensionsSchema, JToken, PropertiesSchema, TileSchema>.GeometricError TilesetSchema<AssetSchema, BoundingVolumeSchema, ContentSchema, ExtensionsSchema, JToken, PropertiesSchema, TileSchema>.ITilesetSchema.GetRoot<TTile>() TilesetSchema<AssetSchema, BoundingVolumeSchema, ContentSchema, ExtensionsSchema, JToken, PropertiesSchema, TileSchema>.ITilesetSchema.Extensions TilesetSchema<AssetSchema, BoundingVolumeSchema, ContentSchema, ExtensionsSchema, JToken, PropertiesSchema, TileSchema>.Extensions TilesetSchema<AssetSchema, BoundingVolumeSchema, ContentSchema, ExtensionsSchema, JToken, PropertiesSchema, TileSchema>.ExtensionsUsed TilesetSchema<AssetSchema, BoundingVolumeSchema, ContentSchema, ExtensionsSchema, JToken, PropertiesSchema, TileSchema>.ExtensionsRequired TilesetSchema<AssetSchema, BoundingVolumeSchema, ContentSchema, ExtensionsSchema, JToken, PropertiesSchema, TileSchema>.Extras TilesetSchema<AssetSchema, BoundingVolumeSchema, ContentSchema, ExtensionsSchema, JToken, PropertiesSchema, TileSchema>.Properties TilesetSchema<AssetSchema, BoundingVolumeSchema, ContentSchema, ExtensionsSchema, JToken, PropertiesSchema, TileSchema>.ITilesetSchema.Properties TilesetSchema<AssetSchema, BoundingVolumeSchema, ContentSchema, ExtensionsSchema, JToken, PropertiesSchema, TileSchema>.Root Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public class TilesetSchema : TilesetSchema<AssetSchema, BoundingVolumeSchema, ContentSchema, ExtensionsSchema, JToken, PropertiesSchema, TileSchema>, ITilesetSchema<AssetSchema, BoundingVolumeSchema, ContentSchema, ExtensionsSchema, JToken, PropertiesSchema, TileSchema>, ITilesetSchema Implements ITilesetSchema<TAsset, TBoundingVolume, TContent, TExtensions, TExtras, TProperties, TTile> ITilesetSchema"
  },
  "api/Unity.Geospatial.Streaming.Ogc3dTiles.TilesetSchema-7.html": {
    "href": "api/Unity.Geospatial.Streaming.Ogc3dTiles.TilesetSchema-7.html",
    "title": "Class TilesetSchema<TAsset, TBoundingVolume, TContent, TExtensions, TExtras, TProperties, TTile> | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class TilesetSchema<TAsset, TBoundingVolume, TContent, TExtensions, TExtras, TProperties, TTile> Abstract class for top level schema to be used when deserializing an ogc3d tiles dataset with typed parameters allowing a more generic implementation and easier IExtension implementation. Inheritance Object TilesetSchema<TAsset, TBoundingVolume, TContent, TExtensions, TExtras, TProperties, TTile> TilesetSchema Implements ITilesetSchema <TAsset, TBoundingVolume, TContent, TExtensions, TExtras, TProperties, TTile> ITilesetSchema Namespace : Unity.Geospatial.Streaming.Ogc3dTiles Assembly : solution.dll Syntax public abstract class TilesetSchema<TAsset, TBoundingVolume, TContent, TExtensions, TExtras, TProperties, TTile> : ITilesetSchema<TAsset, TBoundingVolume, TContent, TExtensions, TExtras, TProperties, TTile>, ITilesetSchema where TAsset : IAssetSchema where TBoundingVolume : IBoundingVolumeSchema where TContent : IContentSchema where TExtensions : IExtensionsSchema where TProperties : IPropertiesSchema where TTile : ITileSchema<TBoundingVolume, TContent, TTile> Type Parameters Name Description TAsset Information of the dataset. TBoundingVolume Bounding volume for each ILeaf part of the dataset. TContent Uri getter allowing to retrieve where to get the data to load for this instance. TExtensions Extensions part of a dataset. TExtras Dictionary of extra information. TProperties A dictionary object of metadata about per-feature properties. TTile Deserialize instances to this type. Properties Asset Metadata about the entire tileset. Declaration public TAsset Asset { get; set; } Property Value Type Description TAsset Extensions Extensions part of this tileset. Declaration public TExtensions Extensions { get; set; } Property Value Type Description TExtensions ExtensionsRequired Names of 3D Tiles extensions required to properly load this tileset. Declaration public string[] ExtensionsRequired { get; set; } Property Value Type Description String [] ExtensionsUsed Names of 3D Tiles extensions used somewhere in this tileset. Declaration public string[] ExtensionsUsed { get; set; } Property Value Type Description String [] Extras Dictionary of extra information. Declaration public TExtras Extras { get; set; } Property Value Type Description TExtras GeometricError The error, in meters, introduced if this tileset is not rendered. At runtime, the geometric error is used to compute screen space error (SSE), i.e., the error measured in pixels. Declaration public float GeometricError { get; set; } Property Value Type Description Single Properties A dictionary object of metadata about per-feature properties. Declaration public TProperties Properties { get; set; } Property Value Type Description TProperties Root The root tile. Declaration public TTile Root { get; set; } Property Value Type Description TTile Explicit Interface Implementations ITilesetSchema.Asset Metadata about the entire tileset. Declaration IAssetSchema ITilesetSchema.Asset { get; } Returns Type Description IAssetSchema ITilesetSchema.Extensions Extensions part of this tileset. Declaration IExtensionsSchema ITilesetSchema.Extensions { get; } Returns Type Description IExtensionsSchema ITilesetSchema.GetRoot<TTile>() The root tile. Declaration T ITilesetSchema.GetRoot<T>() where T : ITileSchema<T> Returns Type Description T The first to load. Type Parameters Name Description T ITilesetSchema.Properties A dictionary object of metadata about per-feature properties. Declaration IPropertiesSchema ITilesetSchema.Properties { get; } Returns Type Description IPropertiesSchema Implements ITilesetSchema<TAsset, TBoundingVolume, TContent, TExtensions, TExtras, TProperties, TTile> ITilesetSchema"
  },
  "api/Unity.Geospatial.Streaming.OneToManyNode-1.html": {
    "href": "api/Unity.Geospatial.Streaming.OneToManyNode-1.html",
    "title": "Class OneToManyNode<T> | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class OneToManyNode<T> Create a many output as requested pointing to the same input value. Inheritance Object UGProcessingNode OneToManyNode<T> Inherited Members UGProcessingNode.IsIdle UGProcessingNode.DataAvailabilityStatus UGProcessingNode.GetDataAvailabilityStatus(UGProcessingNode.NodeOutput) UGProcessingNode.TaskManager UGProcessingNode.InputConnections UGProcessingNode.OutputConnections UGProcessingNode.SetTaskManager(ITaskManager) UGProcessingNode.Connect<T>(UGProcessingNode.NodeOutput<T>, UGProcessingNode.NodeInput<T>) Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class OneToManyNode<T> : UGProcessingNode, IDisposable Type Parameters Name Description T Type of value receiving in the input and sharing through the output. Constructors OneToManyNode(Int32) Default constructor. Declaration public OneToManyNode(int outputCount) Parameters Type Name Description Int32 outputCount Create this amount of outputs that can be retrieve via GetOutput(Int32) Properties Input The input to be converted to multiple outputs. Declaration public UGProcessingNode.NodeInput<T> Input { get; } Property Value Type Description UGProcessingNode.NodeInput <T> IsProcessing true if the node is currently being executed and cannot be called until completion; false otherwise. Declaration protected override bool IsProcessing { get; } Property Value Type Description Boolean Overrides UGProcessingNode.IsProcessing OutputCount Get the number of available outputs that can be retrieved from GetOutput(Int32) . Declaration public int OutputCount { get; } Property Value Type Description Int32 ScheduleMainThread true if the process needs to be executed on the main thread; false otherwise. Declaration public override bool ScheduleMainThread { get; } Property Value Type Description Boolean Overrides UGProcessingNode.ScheduleMainThread Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides UGProcessingNode.Dispose() GetOutput(Int32) Get the UGProcessingNode.NodeOutput<T> for the given index . Declaration public UGProcessingNode.NodeOutput<T> GetOutput(int index) Parameters Type Name Description Int32 index Index of the instance to retrieve. Returns Type Description UGProcessingNode.NodeOutput <T> The node output instance at the given index . MainThreadProcess() At the end of each new frame, this method will be called as processes to be executed on the main thread. Declaration public override void MainThreadProcess() Overrides UGProcessingNode.MainThreadProcess() MainThreadUpKeep() At each new frame, this method will be executed before the main thread processes allowing pre-execution. Declaration public override void MainThreadUpKeep() Overrides UGProcessingNode.MainThreadUpKeep()"
  },
  "api/Unity.Geospatial.Streaming.RefinementMode.html": {
    "href": "api/Unity.Geospatial.Streaming.RefinementMode.html",
    "title": "Enum RefinementMode | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Enum RefinementMode Define how a node will be displayed when it's children gets loaded. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public enum RefinementMode Fields Name Description Add Additive nodes do not become invisible when they are expanded. Replace Replace nodes are made invisible when they are expanded."
  },
  "api/Unity.Geospatial.Streaming.RevertingCommandStack.html": {
    "href": "api/Unity.Geospatial.Streaming.RevertingCommandStack.html",
    "title": "Class RevertingCommandStack | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class RevertingCommandStack Stack of Actions to be executed by a NodeContentManager and store the equivalent Actions allowing to revert the previously executed Actions . Inheritance Object RevertingCommandStack Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class RevertingCommandStack Constructors RevertingCommandStack(ILoaderActions) Default constructor. Declaration public RevertingCommandStack(ILoaderActions loaderActions) Parameters Type Name Description ILoaderActions loaderActions Queue those actions to be executed. Properties OnRevertComplete To be executed after Revert() is called. Declaration public Action OnRevertComplete { get; set; } Property Value Type Description Action Methods AddMaterialProperty(MaterialID, MaterialProperty) Register a new material property for the given materialId and to the revert stack the corresponding dispose action. Declaration public void AddMaterialProperty(MaterialID materialId, MaterialProperty materialProperty) Parameters Type Name Description MaterialID materialId Material the property will be linked with. MaterialProperty materialProperty Property to register. AllocateInstance(InstanceData) Register a new instance with all its related data (mesh, material, textures...) and to the revert stack the corresponding dispose action. Declaration public InstanceID AllocateInstance(InstanceData instanceData) Parameters Type Name Description InstanceData instanceData Data specifying what is related to the new instance. Returns Type Description InstanceID A new InstanceID linked to the newly created instance. AllocateMaterial(MaterialType) Register a material to be instantiated and to the revert stack the corresponding dispose action. Declaration public MaterialID AllocateMaterial(MaterialType materialType) Parameters Type Name Description MaterialType materialType Type of material to create. Returns Type Description MaterialID A new MaterialID instance linked to the newly created material. AllocateMesh(MeshData) Register a mesh to be instantiated and to the revert stack the corresponding dispose action. Declaration public MeshID AllocateMesh(MeshData meshData) Parameters Type Name Description MeshData meshData Data to register and converted to Unity mesh. Returns Type Description MeshID A new MeshID instance linked to the resulting mesh. AllocateMesh(Mesh) Register a mesh to be instantiated and to the revert stack the corresponding dispose action. Declaration public MeshID AllocateMesh(Mesh mesh) Parameters Type Name Description Mesh mesh Unity mesh to register. Returns Type Description MeshID A new MeshID instance linked to the given mesh . AllocateTexture(TextureData) Register a texture to be assigned and to the revert stack the corresponding dispose action. Declaration public TextureID AllocateTexture(TextureData textureData) Parameters Type Name Description TextureData textureData Data to register and converted to Unity texture. Returns Type Description TextureID A new TextureID instance linked to the resulting texture. AllocateTexture(Texture2D) Register a texture to be assigned add to the revert stack the corresponding dispose action. Declaration public TextureID AllocateTexture(Texture2D texture) Parameters Type Name Description Texture2D texture Unity texture to register. Returns Type Description TextureID A new TextureID instance linked to the given texture . Revert() Cancel the executed the Actions by disposing the created objects. Declaration public void Revert()"
  },
  "api/Unity.Geospatial.Streaming.SerializableMaterialType.html": {
    "href": "api/Unity.Geospatial.Streaming.SerializableMaterialType.html",
    "title": "Struct SerializableMaterialType | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct SerializableMaterialType This struct should only be used for serialization purposes within Unity, either in MonoBehaviours, such that it can appear in the inspector, or for JSON serialization. For any purpose that does not require serialization, please use MaterialType . Cast as quickly as you can to the MaterialType struct which is immutable. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax [Serializable] public struct SerializableMaterialType Constructors SerializableMaterialType(MaterialType) Default constructor, using a MaterialType . Declaration public SerializableMaterialType(MaterialType type) Parameters Type Name Description MaterialType type The type which should be copied into the serializable version Fields AlphaMode Determine if the material is opaque, alpha tested, or transparent Declaration public MaterialAlphaMode AlphaMode Field Value Type Description MaterialAlphaMode Lighting Determine if the material is lit or unlit Declaration public MaterialLighting Lighting Field Value Type Description MaterialLighting Operators Explicit(MaterialType to SerializableMaterialType) Cast from MaterialType Declaration public static explicit operator SerializableMaterialType(MaterialType type) Parameters Type Name Description MaterialType type The MaterialType to be casted from Returns Type Description SerializableMaterialType The casted result. Explicit(SerializableMaterialType to MaterialType) Cast to MaterialType Declaration public static explicit operator MaterialType(SerializableMaterialType serializableMaterialType) Parameters Type Name Description SerializableMaterialType serializableMaterialType The SerializableMaterialType to be casted from Returns Type Description MaterialType The casted result."
  },
  "api/Unity.Geospatial.Streaming.SimpleMaterialFactory.DefaultMaterial.html": {
    "href": "api/Unity.Geospatial.Streaming.SimpleMaterialFactory.DefaultMaterial.html",
    "title": "Struct SimpleMaterialFactory.DefaultMaterial | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct SimpleMaterialFactory.DefaultMaterial Specify which material to use for the given Type . Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public struct DefaultMaterial Constructors DefaultMaterial(MaterialType, Material, IReadOnlyList<UGShaderProperty>) Default constructor. Declaration public DefaultMaterial(MaterialType materialType, Material material, IReadOnlyList<UGShaderProperty> propertyList) Parameters Type Name Description MaterialType materialType When this type is requested, SimpleMaterialFactory will instantiate Material . Material material Material to instantiate when Type is required. IReadOnlyList < UGShaderProperty > propertyList Create those UGShaderProperty when instantiating the Material . Fields Material Material to instantiate when Type is required. Declaration public readonly Material Material Field Value Type Description Material PropertyList Create those UGShaderProperty when instantiating the Material . Declaration public readonly IReadOnlyList<UGShaderProperty> PropertyList Field Value Type Description IReadOnlyList < UGShaderProperty > Type When this type is requested, SimpleMaterialFactory will instantiate Material . Declaration public MaterialType Type Field Value Type Description MaterialType"
  },
  "api/Unity.Geospatial.Streaming.SimpleMaterialFactory.html": {
    "href": "api/Unity.Geospatial.Streaming.SimpleMaterialFactory.html",
    "title": "Class SimpleMaterialFactory | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class SimpleMaterialFactory Class to create a single UGMaterial instances with its attached MaterialProperty . Inheritance Object UGMaterialFactory SimpleMaterialFactory Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class SimpleMaterialFactory : UGMaterialFactory Constructors SimpleMaterialFactory(List<SimpleMaterialFactory.DefaultMaterial>) Default constructor. Declaration public SimpleMaterialFactory(List<SimpleMaterialFactory.DefaultMaterial> defaultMaterialList) Parameters Type Name Description List < SimpleMaterialFactory.DefaultMaterial > defaultMaterialList Directives telling which material to instantiate by matching its Type . Methods InstantiateMaterial(MaterialType) Create a new UGMaterial instance based on the given type . Declaration public override UGMaterial InstantiateMaterial(MaterialType type) Parameters Type Name Description MaterialType type Determine which UGMaterial to instantiate. Returns Type Description UGMaterial The new material instance. Overrides UGMaterialFactory.InstantiateMaterial(MaterialType)"
  },
  "api/Unity.Geospatial.Streaming.SimpleMaterialFactoryObject.DefaultMaterialObject.html": {
    "href": "api/Unity.Geospatial.Streaming.SimpleMaterialFactoryObject.DefaultMaterialObject.html",
    "title": "Struct SimpleMaterialFactoryObject.DefaultMaterialObject | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct SimpleMaterialFactoryObject.DefaultMaterialObject Specify which material to use for a given MaterialType . Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax [Serializable] public struct DefaultMaterialObject Fields Material Material to instantiate when MaterialType is required. Declaration public Material Material Field Value Type Description Material MaterialType When this type is requested, SimpleMaterialFactoryObject will instantiate Material . Declaration public SerializableMaterialType MaterialType Field Value Type Description SerializableMaterialType PropertyObject Create those UGShaderProperty when instantiating the Material . Declaration public UGShaderPropertiesObject PropertyObject Field Value Type Description UGShaderPropertiesObject"
  },
  "api/Unity.Geospatial.Streaming.SimpleMaterialFactoryObject.html": {
    "href": "api/Unity.Geospatial.Streaming.SimpleMaterialFactoryObject.html",
    "title": "Class SimpleMaterialFactoryObject | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class SimpleMaterialFactoryObject Factory asset to be instantiated into a scene as a UGMaterialFactory for a single material assignation per meshes . Inheritance Object Object ScriptableObject UGMaterialFactoryObject SimpleMaterialFactoryObject Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax [CreateAssetMenu(fileName = \"Simple Material Factory\", menuName = \"Geospatial/Rendering/Simple Material Factory\", order = 101)] public class SimpleMaterialFactoryObject : UGMaterialFactoryObject Fields DefaultMaterialObjectList The material creation directives for each MaterialType . Declaration public List<SimpleMaterialFactoryObject.DefaultMaterialObject> DefaultMaterialObjectList Field Value Type Description List < SimpleMaterialFactoryObject.DefaultMaterialObject > Methods Instantiate() Create a new UGMaterialFactory based on this instance values. Declaration public override UGMaterialFactory Instantiate() Returns Type Description UGMaterialFactory The new UGMaterialFactory instance. Overrides UGMaterialFactoryObject.Instantiate()"
  },
  "api/Unity.Geospatial.Streaming.SystemProcessingEventArgs.html": {
    "href": "api/Unity.Geospatial.Streaming.SystemProcessingEventArgs.html",
    "title": "Struct SystemProcessingEventArgs | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct SystemProcessingEventArgs Arguments passed each time an event is triggered. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public struct SystemProcessingEventArgs"
  },
  "api/Unity.Geospatial.Streaming.TextureData.html": {
    "href": "api/Unity.Geospatial.Streaming.TextureData.html",
    "title": "Struct TextureData | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct TextureData Use this langword_csharp_struct when reading data that needs to be loaded as a Texture2D . This langword_csharp_struct is used to pass an image information to the UGCommandBuffer to be converted to a Unity Texture2D . Unlike the UnityEngine.Texture2D class, this struct can be populated off of the main thread. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public struct TextureData Fields data Raw data array to initialize texture pixels with. Declaration public byte[] data Field Value Type Description Byte [] height Height of the Texture at full resolution in pixels. Declaration public int height Field Value Type Description Int32 width Width of the Texture at full resolution in pixels. Declaration public int width Field Value Type Description Int32"
  },
  "api/Unity.Geospatial.Streaming.TextureID.html": {
    "href": "api/Unity.Geospatial.Streaming.TextureID.html",
    "title": "Struct TextureID | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct TextureID Unique identifier of a Texture . This allow indirection to the Texture and keep the link even after the Texture as been disposed of. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public readonly struct TextureID Constructors TextureID(Int64) Default constructor. Declaration public TextureID(long uuid) Parameters Type Name Description Int64 uuid Universal unique identifier of the texture. Properties Null Get a TextureID representing a null value. Declaration public static readonly TextureID Null { get; } Property Value Type Description TextureID Methods Equals(Object) Get if this instance is the same as the given obj . Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Compare with this instance. Returns Type Description Boolean true if both instances represent the same; false otherwise. Overrides ValueType.Equals(Object) Equals(TextureID) Get if two TextureID represent the same. Declaration public readonly bool Equals(TextureID other) Parameters Type Name Description TextureID other Compare with this instance. Returns Type Description Boolean true if both instances represent the same; false otherwise. GetHashCode() Compute a hash code for the object. Declaration public override readonly int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides ValueType.GetHashCode() Remarks You should not assume that equal hash codes imply object equality. You should never persist or use a hash code outside the application domain in which it was created, because the same object may hash differently across application domains, processes, and platforms. ToString() Get the string representation of this TextureID . Declaration public override readonly string ToString() Returns Type Description String The string result. Overrides ValueType.ToString() Operators Equality(TextureID, TextureID) Get if two TextureID represent the same. Declaration public static bool operator ==(TextureID first, TextureID second) Parameters Type Name Description TextureID first Compare with this first instance. TextureID second Compare with this other instance. Returns Type Description Boolean true if both instances represent the same; false otherwise. Explicit(Int64 to TextureID) Cast a langword_csharp_long to a TextureID . Declaration public static explicit operator TextureID(long uuid) Parameters Type Name Description Int64 uuid Long value to be converted. Returns Type Description TextureID The TextureID representation of the given instance. Explicit(TextureID to Int64) Cast an TextureID to a langword_csharp_long . Declaration public static explicit operator long (TextureID id) Parameters Type Name Description TextureID id Instance to be converted. Returns Type Description Int64 The langword_csharp_long representation of the given texture. Inequality(TextureID, TextureID) Get if two TextureID does not represent the same. Declaration public static bool operator !=(TextureID first, TextureID second) Parameters Type Name Description TextureID first Compare with this first instance. TextureID second Compare with this other instance. Returns Type Description Boolean true if both instances are not the same; false if both instances are the same."
  },
  "api/Unity.Geospatial.Streaming.TmsTerrain.ConfigSchema.html": {
    "href": "api/Unity.Geospatial.Streaming.TmsTerrain.ConfigSchema.html",
    "title": "Class ConfigSchema | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class ConfigSchema Top schema item of the TmsTerrain json file. Inheritance Object ConfigSchema Namespace : Unity.Geospatial.Streaming.TmsTerrain Assembly : solution.dll Syntax public class ConfigSchema Properties Content Define the URI formatting. Declaration public ContentSchema Content { get; set; } Property Value Type Description ContentSchema Extent Coordinates limits. Declaration public ExtentSchema Extent { get; set; } Property Value Type Description ExtentSchema SetLimits Layout information on how to divide the tiles. Declaration public LimitsSchema SetLimits { get; set; } Property Value Type Description LimitsSchema Version The version of the encoded config. Declaration public string Version { get; set; } Property Value Type Description String Methods GetRoot() When loading a dataset, start with item first as the root parent. This item is also used to get the base URI in case sub-items have relative URI. Declaration public Tile GetRoot() Returns Type Description Tile The top parent starting the hierarchy. Remarks This doesn't need to have associated geometry, it can be a holder for a list of top parent items if the dataset has multiple roots."
  },
  "api/Unity.Geospatial.Streaming.TmsTerrain.ContentSchema.html": {
    "href": "api/Unity.Geospatial.Streaming.TmsTerrain.ContentSchema.html",
    "title": "Class ContentSchema | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class ContentSchema Define how to format the URI part of this dataset. Inheritance Object ContentSchema Namespace : Unity.Geospatial.Streaming.TmsTerrain Assembly : solution.dll Syntax public class ContentSchema Constructors ContentSchema(String, String, String, String) Default constructor. Declaration public ContentSchema(string terrainUri, string terrainFormat, string imageryUri, string imageryFormat) Parameters Type Name Description String terrainUri Base URI each time a terrain geometry file is requested. String terrainFormat File extension of the geometry files without the dot. String imageryUri Base URI each time a terrain texture file is requested. String imageryFormat File extension of the texture files without the dot. Properties ImageryFormat File extension of the texture files without the dot. Declaration public string ImageryFormat { get; set; } Property Value Type Description String ImageryUri Base URI each time a terrain texture file is requested. Declaration public string ImageryUri { get; set; } Property Value Type Description String TerrainFormat File extension of the geometry files without the dot. Declaration public string TerrainFormat { get; set; } Property Value Type Description String TerrainUri Base URI each time a terrain geometry file is requested. Declaration public string TerrainUri { get; set; } Property Value Type Description String"
  },
  "api/Unity.Geospatial.Streaming.TmsTerrain.ExtentSchema.html": {
    "href": "api/Unity.Geospatial.Streaming.TmsTerrain.ExtentSchema.html",
    "title": "Class ExtentSchema | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class ExtentSchema Define the coordinate limits of a tile based on the WGS84 system. Inheritance Object ExtentSchema Namespace : Unity.Geospatial.Streaming.TmsTerrain Assembly : solution.dll Syntax public class ExtentSchema Constructors ExtentSchema(Double, Double, Double, Double) Default constructor. Declaration public ExtentSchema(double minLat, double maxLat, double minLon, double maxLon) Parameters Type Name Description Double minLat Maximum north coordinate based on WGS84 system. Double maxLat Maximum south coordinate based on WGS84 system. Double minLon Maximum west coordinate based on WGS84 system. Double maxLon Maximum east coordinate based on WGS84 system. Properties MaxLat Maximum south coordinate based on WGS84 system. Declaration public double MaxLat { get; set; } Property Value Type Description Double MaxLon Maximum east coordinate based on WGS84 system. Declaration public double MaxLon { get; set; } Property Value Type Description Double MinLat Maximum north coordinate based on WGS84 system. Declaration public double MinLat { get; set; } Property Value Type Description Double MinLon Maximum west coordinate based on WGS84 system. Declaration public double MinLon { get; set; } Property Value Type Description Double Methods ToBoundingVolume(double4x4, Double, Double) Convert this extent instance to a DoubleBounds instance. Declaration public DoubleBounds ToBoundingVolume(double4x4 transform, double minElevation, double maxElevation) Parameters Type Name Description double4x4 transform Position of the root node allowing to offset the extent. This is still not supported. Double minElevation Lower elevation of the DoubleBounds Y part result. Double maxElevation Higher elevation of the DoubleBounds Y part result. Returns Type Description Unity.Geospatial.HighPrecision.DoubleBounds"
  },
  "api/Unity.Geospatial.Streaming.TmsTerrain.html": {
    "href": "api/Unity.Geospatial.Streaming.TmsTerrain.html",
    "title": "Namespace Unity.Geospatial.Streaming.TmsTerrain | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Namespace Unity.Geospatial.Streaming.TmsTerrain Classes ConfigSchema Top schema item of the TmsTerrain json file. ContentSchema Define how to format the URI part of this dataset. ExtentSchema Define the coordinate limits of a tile based on the WGS84 system. LimitsSchema Layout information on how to divide the tiles. Tile Represent a single tile part of a TMS (Terrain Management System) Terrain dataset. This contains all the information needed to load terrain and imagery data representing a single tile for a specific zoom level. TmsTerrainContentLoader Main class used when loading TMS (Terrain Management System) Terrain file file format. TmsTerrainDataSource Data source information required by the TmsTerrainContentLoader to decoder its content. TmsTerrainDataSourceObject ScriptableObject allowing to load TMS (Terrain Management System) Terrain files. TmsTerrainStreamer Decoder class used to convert serialized TMS (Terrain Management System) Terrain file to a Mesh instance and its respective Texture . TmsTerrainStreamer.TerrainTile Represent a single tile part of a TMS terrain dataset. This contains all the information needed to load the data representing a single tile for a specific zoom level. TmsTerrainUriLoader Default UTR UriLoader . Structs UriCollection IUriCollection to use when loading TMS (Terrain Management System) Terrain datasets. Enums TmsTerrainStreamer.TileType The type for a given terrain data."
  },
  "api/Unity.Geospatial.Streaming.TmsTerrain.LimitsSchema.html": {
    "href": "api/Unity.Geospatial.Streaming.TmsTerrain.LimitsSchema.html",
    "title": "Class LimitsSchema | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class LimitsSchema Layout information on how to divide the tiles. Inheritance Object LimitsSchema Namespace : Unity.Geospatial.Streaming.TmsTerrain Assembly : solution.dll Syntax public class LimitsSchema Properties Layout UTR layout used to divide the globe. Declaration public uint Layout { get; set; } Property Value Type Description UInt32 MaxCol The higher column value part of the dataset when dividing for the MinLevel . Declaration public uint MaxCol { get; set; } Property Value Type Description UInt32 MaxLevel Divide the tileset up to this Unity.Geospatial.Streaming.UniversalDecoder.Node`1.Level . Higher zoom level are not part of this dataset. Declaration public uint MaxLevel { get; set; } Property Value Type Description UInt32 MaxRow The higher row value part of the dataset when dividing for the MinLevel . Declaration public uint MaxRow { get; set; } Property Value Type Description UInt32 MinCol The lower column value part of the dataset when dividing for the MinLevel . Declaration public uint MinCol { get; set; } Property Value Type Description UInt32 MinLevel Minimum Unity.Geospatial.Streaming.UniversalDecoder.Node`1.Level in the hierarchy. Lower the number, closer to the root the Unity.Geospatial.Streaming.UniversalDecoder.Node`1 will be; Higher the number, deeper in the hierarchy it is. Declaration public int MinLevel { get; set; } Property Value Type Description Int32 MinRow The lower row value part of the dataset when dividing for the MinLevel . Declaration public uint MinRow { get; set; } Property Value Type Description UInt32"
  },
  "api/Unity.Geospatial.Streaming.TmsTerrain.Tile.html": {
    "href": "api/Unity.Geospatial.Streaming.TmsTerrain.Tile.html",
    "title": "Class Tile | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class Tile Represent a single tile part of a TMS (Terrain Management System) Terrain dataset. This contains all the information needed to load terrain and imagery data representing a single tile for a specific zoom level. Inheritance Object Tile Implements ILeaf Namespace : Unity.Geospatial.Streaming.TmsTerrain Assembly : solution.dll Syntax public class Tile : ILeaf Constructors Tile(Int32, UInt32, UInt32, Single, ContentSchema, ExtentSchema, LimitsSchema, Double, Double) Default constructor. Declaration public Tile(int level, uint column, uint row, float geometricError, ContentSchema content, ExtentSchema extent, LimitsSchema limits, double minElevation = -5000, double maxElevation = 5000) Parameters Type Name Description Int32 level The zoom level (precision) of this tile. Closer to zero the value is, less detailed it is. UInt32 column The latitude column index this tile represent. The index must be between Unity.Geospatial.Streaming.TmsTerrain.Tile.Limits . MinCol and Unity.Geospatial.Streaming.TmsTerrain.Tile.Limits . MinCol . UInt32 row The longitude row index this tile represent. The index must be between Unity.Geospatial.Streaming.TmsTerrain.Tile.Limits . MinRow and Unity.Geospatial.Streaming.TmsTerrain.Tile.Limits . MinRow . Single geometricError The error, in meters, introduced if this item is rendered and its children are not. At runtime, the geometric error is used to compute screen space error (SSE), i.e., the error measured in pixels. ContentSchema content Define how to format the URI part of this dataset. ExtentSchema extent Define the coordinate limits of a tile based on the WGS84 system. LimitsSchema limits Layout information on how to divide the tile. Double minElevation Lower possible elevation. Double maxElevation Highest possible elevation. Tile(Int32, UInt32, UInt32, ContentSchema, LimitsSchema, TmsTerrainStreamer.TerrainTile) Constructor with an already decoded utr file. Declaration public Tile(int level, uint column, uint row, ContentSchema content, LimitsSchema limits, TmsTerrainStreamer.TerrainTile terrain) Parameters Type Name Description Int32 level The zoom level (precision) of this tile. Closer to zero the value is, less detailed it is. UInt32 column The latitude column index this tile represent. The index must be between Unity.Geospatial.Streaming.TmsTerrain.Tile.Limits . MinCol and Unity.Geospatial.Streaming.TmsTerrain.Tile.Limits . MinCol . UInt32 row The longitude row index this tile represent. The index must be between Unity.Geospatial.Streaming.TmsTerrain.Tile.Limits . MinRow and Unity.Geospatial.Streaming.TmsTerrain.Tile.Limits . MinRow . ContentSchema content Define how to format the URI part of this dataset. LimitsSchema limits Layout information on how to divide the tile. TmsTerrainStreamer.TerrainTile terrain Decoded TMS (Terrain Management System) Terrain file. Methods GetBoundingVolume(double4x4) The bounding volume that encloses the item geometry. Declaration public DoubleBounds GetBoundingVolume(double4x4 transform) Parameters Type Name Description double4x4 transform Offset the result by this position. Returns Type Description Unity.Geospatial.HighPrecision.DoubleBounds The bounding volume to use when calculating the screen space error of this ILeaf instance. GetChildren() Enumerate child items of this parent. Each child content is fully enclosed by its parent bounding volume and, generally, has a geometricError less than its parent geometricError. For leaf items, the length of this array is zero, and children may not be defined. Declaration public IEnumerable<ILeaf> GetChildren() Returns Type Description IEnumerable < ILeaf > Enumerate the children of this ILeaf instance. GetGeometricError() The error, in meters, introduced if this item is rendered and its children are not. At runtime, the geometric error is used to compute screen space error (SSE), i.e., the error measured in pixels. Declaration public float GetGeometricError() Returns Type Description Single The error value to compute the screen space error of the ILeaf instance. GetRefinement(RefinementMode) Specifies if additive or replacement refinement is used when traversing the hierarchy for rendering. This property is required for the root item; it is optional for all other children. The default is to inherit from the parent item. Declaration public RefinementMode GetRefinement(RefinementMode inherited) Parameters Type Name Description RefinementMode inherited The parent refine value in case the refine value on this item is not set. Returns Type Description RefinementMode The RefinementMode to use when loading the ILeaf . GetTransform() Get a double4x4 matrix representing where the item content should be positioned, turned and scaled. Declaration public double4x4 GetTransform() Returns Type Description double4x4 The matrix of the item. GetUriCollection(Uri) A uri collection that points to the all the content to load. When the uri are relative, it is relative to the referring top parent. Declaration public IUriCollection GetUriCollection(Uri baseUri) Parameters Type Name Description Uri baseUri An absolute URI of the root ILeaf . Returns Type Description IUriCollection Address of the content to be loaded. Update(TmsTerrainStreamer.TerrainTile) Update the properties based on the given terrain values. Declaration public void Update(TmsTerrainStreamer.TerrainTile terrain) Parameters Type Name Description TmsTerrainStreamer.TerrainTile terrain Update the Tile values based on the values of this instance. Implements ILeaf"
  },
  "api/Unity.Geospatial.Streaming.TmsTerrain.TmsTerrainContentLoader.html": {
    "href": "api/Unity.Geospatial.Streaming.TmsTerrain.TmsTerrainContentLoader.html",
    "title": "Class TmsTerrainContentLoader | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class TmsTerrainContentLoader Main class used when loading TMS (Terrain Management System) Terrain file file format. Inheritance Object HierarchyContentLoader < Tile , UriCollection > TmsTerrainContentLoader Implements INodeContentLoader Inherited Members HierarchyContentLoader<Tile, UriCollection>.ContentType HierarchyContentLoader<Tile, UriCollection>.AddTopLevelNode(NodeContentManager, ContentType, UGDataSourceID, double4x4, Single, Uri, RefinementMode) HierarchyContentLoader<Tile, UriCollection>.FileType HierarchyContentLoader<Tile, UriCollection>.GetTransform(NodeContent, double4x4, double4x4) HierarchyContentLoader<Tile, UriCollection>.LoadNodeAsync(NodeId, NodeContent) HierarchyContentLoader<Tile, UriCollection>.LoadRootAsync(NodeContent) HierarchyContentLoader<Tile, UriCollection>.RegisterUriLoader(UriLoader) HierarchyContentLoader<Tile, UriCollection>.ScheduleTask(Action) HierarchyContentLoader<Tile, UriCollection>.UnloadNode(NodeId) Namespace : Unity.Geospatial.Streaming.TmsTerrain Assembly : solution.dll Syntax public class TmsTerrainContentLoader : HierarchyContentLoader<Tile, UriCollection>, INodeContentLoader Constructors TmsTerrainContentLoader(INodeContentManager, ContentType, Boolean) Constructor with double4x4.identity set as the adjustment matrix. Declaration public TmsTerrainContentLoader(INodeContentManager contentManager, ContentType contentType, bool createHierarchyOnDemand = true) Parameters Type Name Description INodeContentManager contentManager NodeContentManager to use when loading a tile. ContentType contentType Type identifier allowing to figure which INodeContentLoader to execute when loading this content. Boolean createHierarchyOnDemand true to create the BoundingVolumeHierarchy<T> nodes only when the parent node get loaded; false to create all the nodes when LoadNodeAsync(NodeId, NodeContent) is executed for a Unity.Geospatial.Streaming.UniversalDecoder.HierarchyContentLoader`2.RootContent instance. TmsTerrainContentLoader(INodeContentManager, ContentType, double4x4, Boolean) Default constructor. Declaration public TmsTerrainContentLoader(INodeContentManager contentManager, ContentType contentType, double4x4 adjustmentMatrix, bool createHierarchyOnDemand = true) Parameters Type Name Description INodeContentManager contentManager NodeContentManager to use when loading a tile. ContentType contentType Type identifier allowing to figure which INodeContentLoader to execute when loading this content. double4x4 adjustmentMatrix Each time a node is loaded, multiply its transform by this matrix allowing axis alignments when the format is not left-handed, Y-Up. Boolean createHierarchyOnDemand true to create the BoundingVolumeHierarchy<T> nodes only when the parent node get loaded; false to create all the nodes when LoadNodeAsync(NodeId, NodeContent) is executed for a Unity.Geospatial.Streaming.UniversalDecoder.HierarchyContentLoader`2.RootContent instance. Properties FileType FileType associated with this loader allowing to call within LoadNodeAsync(NodeId, NodeContent) when the URI is of the same type. Declaration public override FileType FileType { get; } Property Value Type Description FileType Overrides Unity.Geospatial.Streaming.UniversalDecoder.HierarchyContentLoader<Unity.Geospatial.Streaming.TmsTerrain.Tile, Unity.Geospatial.Streaming.TmsTerrain.UriCollection>.FileType Methods LoadRootAsync(NodeContent) Deserialize the given NodeContent to a Tile instance. Declaration public override async Task<Tile> LoadRootAsync(NodeContent nodeContent) Parameters Type Name Description NodeContent nodeContent The node content that should be loaded by the content loader. Returns Type Description Task < Tile > The newly created instance corresponding to the loaded content. Overrides Unity.Geospatial.Streaming.UniversalDecoder.HierarchyContentLoader<Unity.Geospatial.Streaming.TmsTerrain.Tile, Unity.Geospatial.Streaming.TmsTerrain.UriCollection>.LoadRootAsync(Unity.Geospatial.Streaming.UniversalDecoder.NodeContent) Implements INodeContentLoader"
  },
  "api/Unity.Geospatial.Streaming.TmsTerrain.TmsTerrainDataSource.html": {
    "href": "api/Unity.Geospatial.Streaming.TmsTerrain.TmsTerrainDataSource.html",
    "title": "Class TmsTerrainDataSource | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class TmsTerrainDataSource Data source information required by the TmsTerrainContentLoader to decoder its content. Inheritance Object UGDataSource UniversalDecoderDataSource TmsTerrainDataSource Inherited Members UniversalDecoderDataSource.GetDecoderType() UniversalDecoderDataSource.InstantiateDecoder(UUIDGenerator, UGMaterialFactory, UGDataSource[], Int32) UGDataSource.DataSourceID Namespace : Unity.Geospatial.Streaming.TmsTerrain Assembly : solution.dll Syntax public class TmsTerrainDataSource : UniversalDecoderDataSource Constructors TmsTerrainDataSource(String, UGLighting, Single, UGDataSourceID) Default constructor. Declaration public TmsTerrainDataSource(string uri, UGLighting lighting, float detailMultiplier, UGDataSourceID dataSourceId) Parameters Type Name Description String uri Address of the .gltf / .glb file to decoder. UGLighting lighting Lighting type to apply to the shading. Single detailMultiplier Multiply the GeometricError with this value allowing resolution control per UGDataSource . UGDataSourceID dataSourceId Scriptable object associated with this instance. Properties DetailMultiplier Multiply the GeometricError with this value allowing resolution control per UGDataSource . Declaration public float DetailMultiplier { get; } Property Value Type Description Single Lighting Lighting type to apply to the shading. Declaration public UGLighting Lighting { get; } Property Value Type Description UGLighting Uri Address of the terrain.json file to decoder. Declaration public string Uri { get; } Property Value Type Description String Methods InitializerDecoder(NodeContentManager) Initialize decoder by adding relevant nodes to the hierarchy and by initializing the content manager with the appropriately configured loaders. Declaration public override void InitializerDecoder(NodeContentManager contentManager) Parameters Type Name Description NodeContentManager contentManager The content manager to be initialized with this datasource Overrides UniversalDecoderDataSource.InitializerDecoder(NodeContentManager)"
  },
  "api/Unity.Geospatial.Streaming.TmsTerrain.TmsTerrainDataSourceObject.html": {
    "href": "api/Unity.Geospatial.Streaming.TmsTerrain.TmsTerrainDataSourceObject.html",
    "title": "Class TmsTerrainDataSourceObject | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class TmsTerrainDataSourceObject ScriptableObject allowing to load TMS (Terrain Management System) Terrain files. Inheritance Object Object ScriptableObject UGDataSourceObject TmsTerrainDataSourceObject Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming.TmsTerrain Assembly : solution.dll Syntax [CreateAssetMenu(fileName = \"TMS Terrain\", menuName = \"Geospatial/Data Sources/TMS Terrain\", order = 100)] public class TmsTerrainDataSourceObject : UGDataSourceObject Fields detailMultiplier This property adjusts the level of detail for the given dataset A lower value will lower the level of detail Min value must be > 0 to avoid division by 0 when this value is used later to calculate error ratio Declaration [Min(1.401298E-45F)] public float detailMultiplier Field Value Type Description Single lighting Allows you to override the shading of the given dataset. By default, many datasets which are derived from satelite imagery use unlit textures and call for unlit shading. This setting allows the user to override this and make use of lit shading even if the dataset calls for unlit shading. Declaration public UGLighting lighting Field Value Type Description UGLighting uri The URI of the TMS (Terrain Management System) Terrain dataset. It can be either an absolute or relative path in the following form Note that relative path is relative to streamingAssetsPath . Declaration public string uri Field Value Type Description String Properties DataSourceID Scriptable object associated with this instance. Declaration public override UGDataSourceID DataSourceID { get; } Property Value Type Description UGDataSourceID Overrides UGDataSourceObject.DataSourceID Methods Instantiate(UGSystemBehaviour) Instantiates the underlying UGDataSource object. For most use-cases, this should only be called by the UGSystemBehaviour. Declaration public override UGDataSource Instantiate(UGSystemBehaviour system) Parameters Type Name Description UGSystemBehaviour system Instantiate the UGDataSource as child of this UGSystemBehaviour . Returns Type Description UGDataSource The newly instantiated UGDataSource . Overrides UGDataSourceObject.Instantiate(UGSystemBehaviour)"
  },
  "api/Unity.Geospatial.Streaming.TmsTerrain.TmsTerrainStreamer.html": {
    "href": "api/Unity.Geospatial.Streaming.TmsTerrain.TmsTerrainStreamer.html",
    "title": "Class TmsTerrainStreamer | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class TmsTerrainStreamer Decoder class used to convert serialized TMS (Terrain Management System) Terrain file to a Mesh instance and its respective Texture . Inheritance Object TmsTerrainStreamer Namespace : Unity.Geospatial.Streaming.TmsTerrain Assembly : solution.dll Syntax public class TmsTerrainStreamer Methods Load(Byte[]) Convert a serialized TMS Terrain tile to a TerrainTile allowing to be converted to a Mesh instance with Mesh . Declaration public TmsTerrainStreamer.TerrainTile Load(byte[] data) Parameters Type Name Description Byte [] data Data to be deserialized. Returns Type Description TmsTerrainStreamer.TerrainTile A new TmsTerrainStreamer.TerrainTile ready to be converted to a Mesh ."
  },
  "api/Unity.Geospatial.Streaming.TmsTerrain.TmsTerrainStreamer.TerrainTile.html": {
    "href": "api/Unity.Geospatial.Streaming.TmsTerrain.TmsTerrainStreamer.TerrainTile.html",
    "title": "Class TmsTerrainStreamer.TerrainTile | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class TmsTerrainStreamer.TerrainTile Represent a single tile part of a TMS terrain dataset. This contains all the information needed to load the data representing a single tile for a specific zoom level. Inheritance Object TmsTerrainStreamer.TerrainTile Namespace : Unity.Geospatial.Streaming.TmsTerrain Assembly : solution.dll Syntax public sealed class TerrainTile Constructors TerrainTile(TmsTerrainStreamer.TileType, Mesh.MeshDataArray, double3, ExtentSchema, Double, Double, Single) Default constructor. Declaration public TerrainTile(TmsTerrainStreamer.TileType type, Mesh.MeshDataArray mesh, double3 position, ExtentSchema extent, double minElevation, double maxElevation, float geometricError) Parameters Type Name Description TmsTerrainStreamer.TileType type Specify if the tile has geometry and if it has child tiles. Mesh.MeshDataArray mesh Snapshot of mesh data of multiple meshes to read from. double3 position Where to position the geometry when loading the tile. ExtentSchema extent Define the coordinate limits of the tile based on the WGS84 system. Double minElevation The minimum elevation of the tile, relative to the terrain.json file. Double maxElevation The maximum elevation of the tile, relative to the terrain.json file. Single geometricError The error, in meters, introduced if this tile is rendered and its children are not. At runtime, the geometric error is used to compute screen space error (SSE), i.e., the error measured in pixels. Properties Extent Define the coordinate limits of the tile based on the WGS84 system. Declaration public ExtentSchema Extent { get; } Property Value Type Description ExtentSchema GeometricError The error, in meters, introduced if this tile is rendered and its children are not. At runtime, the geometric error is used to compute screen space error (SSE), i.e., the error measured in pixels. Declaration public float GeometricError { get; } Property Value Type Description Single MaxElevation The maximum elevation of the tile, relative to the terrain.json file. Declaration public double MaxElevation { get; } Property Value Type Description Double Mesh Snapshot of mesh data of multiple meshes to read from. Declaration public Mesh.MeshDataArray Mesh { get; } Property Value Type Description Mesh.MeshDataArray MinElevation The minimum elevation of the tile, relative to the terrain.json file. Declaration public double MinElevation { get; } Property Value Type Description Double Position Where to position the geometry when loading the tile. Declaration public double3 Position { get; } Property Value Type Description double3 Type Specify if the tile has geometry and if it has child tiles. Declaration public TmsTerrainStreamer.TileType Type { get; } Property Value Type Description TmsTerrainStreamer.TileType Methods GetBoundingVolume(double4x4) The bounding volume that encloses the tile geometry. Declaration public DoubleBounds GetBoundingVolume(double4x4 transform) Parameters Type Name Description double4x4 transform Offset the result by this position. Returns Type Description Unity.Geospatial.HighPrecision.DoubleBounds The bounding volume to use when calculating the screen space error of this ILeaf instance. HasChildren() Get if this tile has child tiles that can be loaded. Declaration public bool HasChildren() Returns Type Description Boolean true if the tile has child tiles; false otherwise."
  },
  "api/Unity.Geospatial.Streaming.TmsTerrain.TmsTerrainStreamer.TileType.html": {
    "href": "api/Unity.Geospatial.Streaming.TmsTerrain.TmsTerrainStreamer.TileType.html",
    "title": "Enum TmsTerrainStreamer.TileType | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Enum TmsTerrainStreamer.TileType The type for a given terrain data. Namespace : Unity.Geospatial.Streaming.TmsTerrain Assembly : solution.dll Syntax public enum TileType Fields Name Description EmptyWithoutChildren The tile has no mesh data and no child tiles. EmptyWithChildren The tile has no mesh data but have child tiles. DataWithoutChildren The tile has mesh data and no child tiles. DataWithChildren The tile has mesh data and have child tiles."
  },
  "api/Unity.Geospatial.Streaming.TmsTerrain.TmsTerrainUriLoader.html": {
    "href": "api/Unity.Geospatial.Streaming.TmsTerrain.TmsTerrainUriLoader.html",
    "title": "Class TmsTerrainUriLoader | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class TmsTerrainUriLoader Default UTR UriLoader . Inheritance Object UriLoader TmsTerrainUriLoader Inherited Members UriLoader.LoaderActions Namespace : Unity.Geospatial.Streaming.TmsTerrain Assembly : solution.dll Syntax public class TmsTerrainUriLoader : UriLoader Constructors TmsTerrainUriLoader(ILoaderActions, UGDataSourceID, UGLighting, Single) Default constructor. Declaration public TmsTerrainUriLoader(ILoaderActions loaderActions, UGDataSourceID dataSource, UGLighting lighting, float detailMultiplier) Parameters Type Name Description ILoaderActions loaderActions Reference to the command manager the UriLoader should publish it's requests to. UGDataSourceID dataSource Unique identifier allowing to do indirect assignment. UGLighting lighting Lighting type to apply to the shading. Single detailMultiplier Multiply the GeometricError with this value allowing resolution control per UGDataSource . Properties SupportedFileTypes Returns the files types that are supported by this content loader. Declaration public override IEnumerable<FileType> SupportedFileTypes { get; } Property Value Type Description IEnumerable < FileType > Overrides UriLoader.SupportedFileTypes Methods LoadAsync(NodeId, UriNodeContent, double4x4) Load the content specified by the uri. Returns a task which, when completed, will return the InstanceId of the generated instance. Declaration public override async Task<InstanceID> LoadAsync(NodeId nodeId, UriNodeContent content, double4x4 transform) Parameters Type Name Description NodeId nodeId BoundingVolumeHierarchy<T> NodeId requested to be loaded. UriNodeContent content Content holding the URI and transform information. double4x4 transform The transform to be applied to the underlying geometry Returns Type Description Task < InstanceID > The instance ID of the resulting geometry. Overrides UriLoader.LoadAsync(NodeId, UriNodeContent, double4x4) Unload(InstanceID) Unload the specified instanceId Declaration public override void Unload(InstanceID instanceId) Parameters Type Name Description InstanceID instanceId The instance Id to be unloaded Overrides UriLoader.Unload(InstanceID)"
  },
  "api/Unity.Geospatial.Streaming.TmsTerrain.UriCollection.html": {
    "href": "api/Unity.Geospatial.Streaming.TmsTerrain.UriCollection.html",
    "title": "Struct UriCollection | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct UriCollection IUriCollection to use when loading TMS (Terrain Management System) Terrain datasets. Implements IUriCollection Namespace : Unity.Geospatial.Streaming.TmsTerrain Assembly : solution.dll Syntax public readonly struct UriCollection : IUriCollection, IEnumerable<Uri>, IEnumerable, IEquatable<UriCollection> Constructors UriCollection(Int32, UInt32, UInt32, String, String, String, String, Uri, Uri) Constructor with all the elements needed to construct the URIs based on the TmsTerrain template. Declaration public UriCollection(int level, uint column, uint row, string meshPrefix, string meshExtension, string albedoPrefix, string albedoExtension, Uri baseUri = null, Uri albedoBaseUri = null) Parameters Type Name Description Int32 level Correspond to Unity.Geospatial.Streaming.TmsTerrain.Tile.Level . UInt32 column Correspond to Unity.Geospatial.Streaming.TmsTerrain.Tile.Column . UInt32 row Correspond to Unity.Geospatial.Streaming.TmsTerrain.Tile.Row . String meshPrefix Correspond to TerrainUri . String meshExtension Correspond to TerrainFormat . String albedoPrefix Correspond to ImageryUri . String albedoExtension Correspond to ImageryFormat . Uri baseUri An absolute Uri that is the base for the new mesh Uri instance. If the albedoBaseUri is not set, the baseUri will also be the albedo base uri. Uri albedoBaseUri An absolute Uri that is the base for the new albedo Uri instance. UriCollection(Int32, UInt32, UInt32, ContentSchema, Uri, Uri) Constructor with a ContentSchema instance. Declaration public UriCollection(int level, uint column, uint row, ContentSchema content, Uri baseUri = null, Uri albedoBaseUri = null) Parameters Type Name Description Int32 level Correspond to Unity.Geospatial.Streaming.TmsTerrain.Tile.Level . UInt32 column Correspond to Unity.Geospatial.Streaming.TmsTerrain.Tile.Column . UInt32 row Correspond to Unity.Geospatial.Streaming.TmsTerrain.Tile.Row . ContentSchema content Complete the URIs based on the values of this instance. Uri baseUri An absolute Uri that is the base for the new mesh Uri instance. If the albedoBaseUri is not set, the baseUri will also be the albedo base uri. Uri albedoBaseUri An absolute Uri that is the base for the new albedo Uri instance. UriCollection(String, String, String, String) Constructor with the URIs already fully constructed and base Uris as strings. Declaration public UriCollection(string meshUri, string albedoUri, string baseUri, string albedoBaseUri = null) Parameters Type Name Description String meshUri Link where to access the mesh data. String albedoUri Link where to access the albedo texture. String baseUri An absolute Uri that is the base for the new mesh Uri instance. If the albedoBaseUri is not set, the baseUri will also be the albedo base uri. String albedoBaseUri An absolute Uri that is the base for the new albedo Uri instance. UriCollection(String, String, Uri, Uri) Constructor with the URIs already fully constructed. Declaration public UriCollection(string meshUri, string albedoUri, Uri baseUri = null, Uri albedoBaseUri = null) Parameters Type Name Description String meshUri Link where to access the mesh data. String albedoUri Link where to access the albedo texture. Uri baseUri An absolute Uri that is the base for the new mesh Uri instance. If the albedoBaseUri is not set, the baseUri will also be the albedo base uri. Uri albedoBaseUri An absolute Uri that is the base for the new albedo Uri instance. Properties AlbedoUri Link to access the data of the albedo texture. Declaration public readonly Uri AlbedoUri { get; } Property Value Type Description Uri MeshUri Link to access the geometry data. Declaration public readonly Uri MeshUri { get; } Property Value Type Description Uri Methods Equals(Object) Get if two objects have the same values. Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Other collection to compare with. Returns Type Description Boolean true if both objects point to the same uris; false otherwise. Overrides ValueType.Equals(Object) Equals(UriCollection) Get if two UriCollection have the same values. Declaration public readonly bool Equals(UriCollection other) Parameters Type Name Description UriCollection other Other collection to compare with. Returns Type Description Boolean true if both objects point to the same uris; false otherwise. GetEnumerator() Returns an enumerator that iterates through the Uri collection. Declaration public readonly IEnumerator<Uri> GetEnumerator() Returns Type Description IEnumerator < Uri > Enumerates the Uri part of this instance. GetFileType() Get the FileType associated with this collection. Based on the returned value, the corresponding UriLoader will be used when LoadAsync(NodeId, UriNodeContent, double4x4) / Unload(InstanceID) is called. Declaration public readonly FileType GetFileType() Returns Type Description FileType The FileType associated with the MeshUri . GetHashCode() Compute a hash code for the object. Declaration public override readonly int GetHashCode() Returns Type Description Int32 A hash code. Overrides ValueType.GetHashCode() HasContent() Get if the instance can be loaded. Declaration public readonly bool HasContent() Returns Type Description Boolean true if the collection has a MeshUri ; false if MeshUri is null or an empty langword_csharp_string . Explicit Interface Implementations IUriCollection.MainUri Get the value of MeshUri . Declaration readonly Uri IUriCollection.MainUri { get; } Returns Type Description Uri Implements IUriCollection"
  },
  "api/Unity.Geospatial.Streaming.TriangleCollectionIndex.html": {
    "href": "api/Unity.Geospatial.Streaming.TriangleCollectionIndex.html",
    "title": "Struct TriangleCollectionIndex | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct TriangleCollectionIndex Mesh triangles collection indirection allowing giving collections by index instead of the complete array. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public readonly struct TriangleCollectionIndex Constructors TriangleCollectionIndex(Int32) Default constructor. Declaration public TriangleCollectionIndex(int index) Parameters Type Name Description Int32 index Unique index the collection will refer to. Fields Index Unique index this collection refers to. Declaration public readonly int Index Field Value Type Description Int32 Null Get a null collection where the instance has no triangles. Declaration public static readonly TriangleCollectionIndex Null Field Value Type Description TriangleCollectionIndex Methods IsValid() Get if the collection does not refers to a null collection. Declaration public readonly bool IsValid() Returns Type Description Boolean"
  },
  "api/Unity.Geospatial.Streaming.UGBehaviourPresenter.html": {
    "href": "api/Unity.Geospatial.Streaming.UGBehaviourPresenter.html",
    "title": "Class UGBehaviourPresenter | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGBehaviourPresenter Main class responsible to convert the streamed geometry into actual GameObjects . Most configurations will only require a single presenter but applications with multiple cameras or applications where the source data is not normalized in space (think multiple planets or non-geolocated dataset) may require multiple presenters. Inheritance Object UGProcessingNode UGPresenter UGBehaviourPresenter Inherited Members UGPresenter.Input UGPresenter.IsProcessing UGPresenter.ScheduleMainThread UGPresenter.MainThreadProcess() UGProcessingNode.IsIdle UGProcessingNode.DataAvailabilityStatus UGProcessingNode.GetDataAvailabilityStatus(UGProcessingNode.NodeOutput) UGProcessingNode.TaskManager UGProcessingNode.InputConnections UGProcessingNode.OutputConnections UGProcessingNode.SetTaskManager(ITaskManager) UGProcessingNode.Connect<T>(UGProcessingNode.NodeOutput<T>, UGProcessingNode.NodeInput<T>) Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class UGBehaviourPresenter : UGPresenter, IDisposable Constructors UGBehaviourPresenter(Transform, Int32, List<UGDataSourceID>) Default constructor. Declaration public UGBehaviourPresenter(Transform rootTransform, int unityLayer, List<UGDataSourceID> dataSources) Parameters Type Name Description Transform rootTransform Create the instance as children of this node. Int32 unityLayer Load the instances only if this Unity layer is active. List < UGDataSourceID > dataSources Create instances for these datasets. Methods CmdAllocate(InstanceID, InstanceData) Command to be executed when an instance gets loaded. Declaration protected override void CmdAllocate(InstanceID instanceId, InstanceData instanceData) Parameters Type Name Description InstanceID instanceId Id of the instance that is loaded. InstanceData instanceData Data loaded for the given instanceId . Overrides UGPresenter.CmdAllocate(InstanceID, InstanceData) CmdDispose(InstanceID) Command to be executed when an instance gets unloaded. Declaration protected override void CmdDispose(InstanceID instanceId) Parameters Type Name Description InstanceID instanceId Id of the instance that is disposed. Overrides UGPresenter.CmdDispose(InstanceID) CmdUpdateVisibility(InstanceID, Boolean) Command to be executed when the visibility state for the given instanceId changes. Declaration protected override void CmdUpdateVisibility(InstanceID instanceId, bool visibility) Parameters Type Name Description InstanceID instanceId Instance with its visibility state changed. Boolean visibility true when the instance is displayed; false when the instance is hidden. Overrides UGPresenter.CmdUpdateVisibility(InstanceID, Boolean) Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides UGProcessingNode.Dispose() MainThreadUpKeep() At each new frame, this method will be executed before the main thread processes allowing pre-execution. Declaration public override void MainThreadUpKeep() Overrides UGPresenter.MainThreadUpKeep() Events OnAllocateInstance langword_csharp_Action to be executed when ever a new NodeContent get loaded in memory. Declaration public event Action<InstanceID, GameObject> OnAllocateInstance Event Type Type Description Action < InstanceID , GameObject > New instance id being created. instance Game object linked with instance. gameObject OnDisposeInstance langword_csharp_Action to be executed when ever a NodeContent loaded in memory get disposed of. Declaration public event Action<InstanceID, GameObject> OnDisposeInstance Event Type Type Description Action < InstanceID , GameObject > New instance id being disposed. instance Game object linked with instance. gameObject OnUpdateInstanceVisibility langword_csharp_Action to be executed when ever a NodeContent visibility state changes. Declaration public event Action<InstanceID, GameObject, bool> OnUpdateInstanceVisibility Event Type Type Description Action < InstanceID , GameObject , Boolean > New instance id being updated. instance Game object linked with instance. gameObject true if the instance is visible and loaded; false otherwise. isVisible"
  },
  "api/Unity.Geospatial.Streaming.UGCameraBehaviour.html": {
    "href": "api/Unity.Geospatial.Streaming.UGCameraBehaviour.html",
    "title": "Class UGCameraBehaviour | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGCameraBehaviour The UGCamera is a type of controller that can be used within the Unity Geospatial Framework that allows the framework to know what is currently visible through a camera, and to stream the corresponding geometry in while taking into consideration the camera's position, orientation field of view and resolution. Because it relies on the attached Camera parameters, there is nothing to configure for this class, other than ensuring that it has been added to the UGSystemBehaviour 's scene observers. Inheritance Object Object Component Behaviour MonoBehaviour UGSceneObserverBehaviour UGCameraBehaviour Implements UGSimpleSceneObserver.IImplementation Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) MonoBehaviour.StartCoroutine(String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) UnityEngine.Component.GetComponentInParent(System.Type, System.Boolean) Component.GetComponentInParent(Type) UnityEngine.Component.GetComponentInParent<T>(System.Boolean) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) Component.SendMessageUpwards(String, Object) Component.SendMessageUpwards(String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) Component.BroadcastMessage(String, Object) Component.BroadcastMessage(String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Component.rigidbody Component.rigidbody2D Component.camera Component.light Component.animation Component.constantForce Component.renderer Component.audio Component.networkView Component.collider Component.collider2D Component.hingeJoint Component.particleSystem Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax [RequireComponent(typeof(Camera))] public class UGCameraBehaviour : UGSceneObserverBehaviour, UGSimpleSceneObserver.IImplementation Properties Root Declaration public HPRoot Root { get; set; } Property Value Type Description Unity.Geospatial.HighPrecision.HPRoot ScreenSpaceError Declaration public float ScreenSpaceError { get; set; } Property Value Type Description Single Methods GetDetailObserverData() Get the required values allowing to calculate if a NodeData can be loaded based on its GeometricError . Declaration public DetailObserverData GetDetailObserverData() Returns Type Description DetailObserverData A new set of observer values. Instantiate(UGSystemBehaviour) Create a UGSimpleSceneObserver instance based on this camera components. Declaration public override UGSceneObserver Instantiate(UGSystemBehaviour ugSystem) Parameters Type Name Description UGSystemBehaviour ugSystem Create an observer based on this UGSystemBehaviour . Returns Type Description UGSceneObserver The newly created UGSceneObserver . Overrides UGSceneObserverBehaviour.Instantiate(UGSystemBehaviour) Exceptions Type Condition InvalidOperationException If the camera has no Root set and has no parent with a HPRoot component. Implements UGSimpleSceneObserver.IImplementation"
  },
  "api/Unity.Geospatial.Streaming.UGCommandBuffer.html": {
    "href": "api/Unity.Geospatial.Streaming.UGCommandBuffer.html",
    "title": "Class UGCommandBuffer | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGCommandBuffer Queue of commands to be executed by a UGCommandBuffer.IListener . This allow to defer and batch the loading. Inheritance Object UGCommandBuffer Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class UGCommandBuffer Constructors UGCommandBuffer(UUIDGenerator) Default constructor. Declaration public UGCommandBuffer(UUIDGenerator idGenerator) Parameters Type Name Description UUIDGenerator idGenerator UUID Generator used to generate session unique identifiers per created instances. Properties Count Amount of Unity.Geospatial.Streaming.UGCommandBuffer.Command waiting to be executed. Declaration public int Count { get; } Property Value Type Description Int32 Methods AddMaterialProperty(MaterialID, MaterialProperty) Request to create a MaterialProperty for the given materialId . Declaration public void AddMaterialProperty(MaterialID materialId, MaterialProperty materialProperty) Parameters Type Name Description MaterialID materialId Material to modify MaterialProperty materialProperty Property to add to the given materialId . AllocateInstance(InstanceData) Request to create an instance by linking a Mesh , a Material and a Transform together Declaration public InstanceID AllocateInstance(InstanceData instanceData) Parameters Type Name Description InstanceData instanceData Information of what to link together. Returns Type Description InstanceID Id of the instance allowing to refer to the command / loaded instance. AllocateMaterial(MaterialType) Request a Material to be loaded. Declaration public MaterialID AllocateMaterial(MaterialType type) Parameters Type Name Description MaterialType type Type of the material be instantiate. Returns Type Description MaterialID Id of the material allowing to refer to the command / loaded material. AllocateMesh(MeshData) Request a MeshData to be loaded as a Mesh . Declaration public MeshID AllocateMesh(MeshData meshData) Parameters Type Name Description MeshData meshData Mesh to be loaded. Returns Type Description MeshID Id of the meh allowing to refer to the command / loaded mesh. AllocateMesh(Mesh) Request a Mesh to be loaded. Declaration public MeshID AllocateMesh(Mesh mesh) Parameters Type Name Description Mesh mesh Mesh to be loaded. Returns Type Description MeshID Id of the mesh allowing to refer to the command / loaded mesh. AllocateTexture(TextureData) Request a TextureData to be loaded as a Texture2D . Declaration public TextureID AllocateTexture(TextureData textureData) Parameters Type Name Description TextureData textureData Texture to be loaded. Returns Type Description TextureID Id of the texture allowing to refer to the command / loaded texture. AllocateTexture(Texture2D) Request a Texture2D to be loaded. Declaration public TextureID AllocateTexture(Texture2D texture) Parameters Type Name Description Texture2D texture Texture to be loaded. Returns Type Description TextureID Id of the texture allowing to refer to the command / loaded texture. Clear() Remove all pending commands. Executing this will cancel all upcoming commands. Declaration public void Clear() DisposeInstance(InstanceID) Request to unload an instance by unlinking its Mesh , Material and Transform . Declaration public void DisposeInstance(InstanceID instanceId) Parameters Type Name Description InstanceID instanceId Id of the instance to dispose of. DisposeMaterial(MaterialID) Request to unload a Material . Declaration public void DisposeMaterial(MaterialID materialId) Parameters Type Name Description MaterialID materialId Id of the material to dispose of. DisposeMesh(MeshID) Request to unload a Mesh . Declaration public void DisposeMesh(MeshID meshId) Parameters Type Name Description MeshID meshId Id of the mesh to dispose of. DisposeTexture(TextureID) Request to unload a Texture2D . Declaration public void DisposeTexture(TextureID textureId) Parameters Type Name Description TextureID textureId Id of the texture to dispose of. ExecuteSingle(UGCommandBuffer.IListener) Execute the next command which is at the top of the queue. Declaration public bool ExecuteSingle(UGCommandBuffer.IListener listener) Parameters Type Name Description UGCommandBuffer.IListener listener Use this listener to execute the command. Returns Type Description Boolean true if a command was executed; false if the command queue is empty. QueueAction(Action) Request a custom action to be executed. Declaration public void QueueAction(Action action) Parameters Type Name Description Action action Action to append to the queue. QueueAtomic(UGCommandBuffer) Move the commands from one UGCommandBuffer queue to this instance queue and flag them as a block. Declaration public void QueueAtomic(UGCommandBuffer cb) Parameters Type Name Description UGCommandBuffer cb Buffer to transfer and flag to be execute together. RemoveMaterialProperty(MaterialID, MaterialProperty) Request to remove a MaterialProperty from the given materialId . Declaration public void RemoveMaterialProperty(MaterialID materialId, MaterialProperty materialProperty) Parameters Type Name Description MaterialID materialId Material to modify MaterialProperty materialProperty Property to remove from the given materialId . UpdateInstanceVisibility(InstanceID, Boolean) Request to change the visibility state for the given instanceId . Declaration public void UpdateInstanceVisibility(InstanceID instanceId, bool visibility) Parameters Type Name Description InstanceID instanceId Instance to change its visibility state. Boolean visibility true to set to display the instance; false to hide it."
  },
  "api/Unity.Geospatial.Streaming.UGCommandBuffer.IListener.html": {
    "href": "api/Unity.Geospatial.Streaming.UGCommandBuffer.IListener.html",
    "title": "Interface UGCommandBuffer.IListener | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface UGCommandBuffer.IListener Expected interface when executing ExecuteSingle(UGCommandBuffer.IListener) . Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public interface IListener Methods AddMaterialProperty(MaterialID, MaterialProperty) Create a MaterialProperty for the given materialId . Declaration void AddMaterialProperty(MaterialID materialId, MaterialProperty materialProperty) Parameters Type Name Description MaterialID materialId Material to modify MaterialProperty materialProperty Property to add to the given materialId . AllocateInstance(InstanceID, InstanceData) Create an instance by linking a Mesh , a Material and a Transform together Declaration void AllocateInstance(InstanceID instanceId, InstanceData instanceData) Parameters Type Name Description InstanceID instanceId Id of the instance allowing to refer to the command / loaded instance. InstanceData instanceData Information of what to link together. AllocateMaterial(MaterialID, MaterialType) Create a Material . Declaration void AllocateMaterial(MaterialID materialId, MaterialType materialType) Parameters Type Name Description MaterialID materialId Id of the material allowing to refer to the command / loaded material. MaterialType materialType Type of the material be instantiate. AllocateMesh(MeshID, MeshData) Load a MeshData as a Mesh . Declaration void AllocateMesh(MeshID meshId, MeshData meshData) Parameters Type Name Description MeshID meshId Id of the meh allowing to refer to the command / loaded mesh. MeshData meshData Mesh to be loaded. AllocateMesh(MeshID, Mesh) Load a Mesh . Declaration void AllocateMesh(MeshID meshId, Mesh mesh) Parameters Type Name Description MeshID meshId Id of the mesh allowing to refer to the command / loaded mesh. Mesh mesh Mesh to be loaded. AllocateTexture(TextureID, TextureData) Load a TextureData as a Texture2D . Declaration void AllocateTexture(TextureID textureId, TextureData textureData) Parameters Type Name Description TextureID textureId Id of the texture allowing to refer to the command / loaded texture. TextureData textureData Texture to be loaded. AllocateTexture(TextureID, Texture2D) Load a Texture2D . Declaration void AllocateTexture(TextureID textureId, Texture2D texture) Parameters Type Name Description TextureID textureId Id of the texture allowing to refer to the command / loaded texture. Texture2D texture Texture to be loaded. BeginAtomic() Specify a new block of commands will be requested. Declaration void BeginAtomic() DisposeInstance(InstanceID) Unload an instance by unlinking its Mesh , Material and Transform . Declaration void DisposeInstance(InstanceID instanceId) Parameters Type Name Description InstanceID instanceId Id of the instance to dispose of. DisposeMaterial(MaterialID) Unload a Material . Declaration void DisposeMaterial(MaterialID materialId) Parameters Type Name Description MaterialID materialId Id of the material to dispose of. DisposeMesh(MeshID) Unload a Mesh . Declaration void DisposeMesh(MeshID meshId) Parameters Type Name Description MeshID meshId Id of the mesh to dispose of. DisposeTexture(TextureID) Unload a Texture2D . Declaration void DisposeTexture(TextureID textureId) Parameters Type Name Description TextureID textureId Id of the texture to dispose of. EndAtomic() Specify the last block of commands have been completed. Declaration void EndAtomic() RemoveMaterialProperty(MaterialID, MaterialProperty) Remove a MaterialProperty from the given materialId . Declaration void RemoveMaterialProperty(MaterialID materialId, MaterialProperty materialProperty) Parameters Type Name Description MaterialID materialId Material to modify MaterialProperty materialProperty Property to remove from the given materialId . UpdateInstanceVisibility(InstanceID, Boolean) Change the visibility state for the given instanceId . Declaration void UpdateInstanceVisibility(InstanceID instanceId, bool visibility) Parameters Type Name Description InstanceID instanceId Instance to change its visibility state. Boolean visibility true to set to display the instance; false to hide it."
  },
  "api/Unity.Geospatial.Streaming.UGCommandBufferProcessor.html": {
    "href": "api/Unity.Geospatial.Streaming.UGCommandBufferProcessor.html",
    "title": "Class UGCommandBufferProcessor | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGCommandBufferProcessor Listener responsible to load / unload data requested by a UGCommandBuffer . Inheritance Object UGCommandBufferProcessor Implements UGCommandBuffer.IListener Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class UGCommandBufferProcessor : UGCommandBuffer.IListener Constructors UGCommandBufferProcessor(UGMaterialFactory, UGCommandBuffer, UGProcessingNode.NodeOutput<InstanceCommand>) Default constructor. Declaration public UGCommandBufferProcessor(UGMaterialFactory materialFactory, UGCommandBuffer commandBuffer, UGProcessingNode.NodeOutput<InstanceCommand> outputNode) Parameters Type Name Description UGMaterialFactory materialFactory Material factory used to create new materials. UGCommandBuffer commandBuffer Queue of commands to be executed. UGProcessingNode.NodeOutput < InstanceCommand > outputNode Processing node executing this instance. Methods AllocateMesh(MeshID, Mesh) Load a Mesh . Declaration public void AllocateMesh(MeshID meshId, Mesh mesh) Parameters Type Name Description MeshID meshId Id of the mesh allowing to refer to the command / loaded mesh. Mesh mesh Mesh to be loaded. AllocateTexture(TextureID, Texture2D) Load a Texture2D . Declaration public void AllocateTexture(TextureID textureId, Texture2D texture) Parameters Type Name Description TextureID textureId Id of the texture allowing to refer to the command / loaded texture. Texture2D texture Texture to be loaded. BeginAtomic() Specify a new block of commands will be requested. Declaration public void BeginAtomic() EndAtomic() Specify the last block of commands have been completed. Declaration public void EndAtomic() IsComplete() Get is all the requested commands are no more executing and none are pending. Declaration public bool IsComplete() Returns Type Description Boolean true if no commands are currently executing; false otherwise. TryExecuteSingle() Execute the next queued command. Declaration public bool TryExecuteSingle() Returns Type Description Boolean true if a command was executed; false if the command queue is empty. Explicit Interface Implementations UGCommandBuffer.IListener.AddMaterialProperty(MaterialID, MaterialProperty) Create a MaterialProperty for the given materialId . Declaration void UGCommandBuffer.IListener.AddMaterialProperty(MaterialID materialId, MaterialProperty materialProperty) Parameters Type Name Description MaterialID materialId Material to modify MaterialProperty materialProperty Property to add to the given materialId . UGCommandBuffer.IListener.AllocateInstance(InstanceID, InstanceData) Create an instance by linking a Mesh , a Material and a Transform together Declaration void UGCommandBuffer.IListener.AllocateInstance(InstanceID instanceId, InstanceData instanceData) Parameters Type Name Description InstanceID instanceId Id of the instance allowing to refer to the command / loaded instance. InstanceData instanceData Information of what to link together. UGCommandBuffer.IListener.AllocateMaterial(MaterialID, MaterialType) Create a Material . Declaration void UGCommandBuffer.IListener.AllocateMaterial(MaterialID materialId, MaterialType materialType) Parameters Type Name Description MaterialID materialId Id of the material allowing to refer to the command / loaded material. MaterialType materialType Type of the material be instantiate. UGCommandBuffer.IListener.AllocateMesh(MeshID, MeshData) Load a MeshData as a Mesh . Declaration void UGCommandBuffer.IListener.AllocateMesh(MeshID meshId, MeshData meshData) Parameters Type Name Description MeshID meshId Id of the meh allowing to refer to the command / loaded mesh. MeshData meshData Mesh to be loaded. UGCommandBuffer.IListener.AllocateTexture(TextureID, TextureData) Load a TextureData as a Texture2D . Declaration void UGCommandBuffer.IListener.AllocateTexture(TextureID textureId, TextureData textureData) Parameters Type Name Description TextureID textureId Id of the texture allowing to refer to the command / loaded texture. TextureData textureData Texture to be loaded. UGCommandBuffer.IListener.DisposeInstance(InstanceID) Unload an instance by unlinking its Mesh , Material and Transform . Declaration void UGCommandBuffer.IListener.DisposeInstance(InstanceID instanceId) Parameters Type Name Description InstanceID instanceId Id of the instance to dispose of. UGCommandBuffer.IListener.DisposeMaterial(MaterialID) Unload a Material . Declaration void UGCommandBuffer.IListener.DisposeMaterial(MaterialID materialId) Parameters Type Name Description MaterialID materialId Id of the material to dispose of. UGCommandBuffer.IListener.DisposeMesh(MeshID) Unload a Mesh . Declaration void UGCommandBuffer.IListener.DisposeMesh(MeshID meshId) Parameters Type Name Description MeshID meshId Id of the mesh to dispose of. UGCommandBuffer.IListener.DisposeTexture(TextureID) Unload a Texture2D . Declaration void UGCommandBuffer.IListener.DisposeTexture(TextureID textureId) Parameters Type Name Description TextureID textureId Id of the texture to dispose of. UGCommandBuffer.IListener.RemoveMaterialProperty(MaterialID, MaterialProperty) Remove a MaterialProperty from the given materialId . Declaration void UGCommandBuffer.IListener.RemoveMaterialProperty(MaterialID materialId, MaterialProperty materialProperty) Parameters Type Name Description MaterialID materialId Material to modify MaterialProperty materialProperty Property to remove from the given materialId . UGCommandBuffer.IListener.UpdateInstanceVisibility(InstanceID, Boolean) Change the visibility state for the given instanceId . Declaration void UGCommandBuffer.IListener.UpdateInstanceVisibility(InstanceID instanceId, bool visibility) Parameters Type Name Description InstanceID instanceId Instance to change its visibility state. Boolean visibility true to set to display the instance; false to hide it. Implements UGCommandBuffer.IListener"
  },
  "api/Unity.Geospatial.Streaming.UGCommonTerrainMaterial.Factory.html": {
    "href": "api/Unity.Geospatial.Streaming.UGCommonTerrainMaterial.Factory.html",
    "title": "Struct UGCommonTerrainMaterial.Factory | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct UGCommonTerrainMaterial.Factory UGCommonTerrainMaterial creator with two layers ( BaseShader , OverlayShader ). Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public readonly struct Factory Constructors Factory(String, String) Default constructor. Declaration public Factory(string baseShader, string overlayShader) Parameters Type Name Description String baseShader Name of the underlying shader. String overlayShader Name of the overlying shader. Properties BaseShader Name of the underlying shader. Declaration public readonly string BaseShader { get; } Property Value Type Description String OverlayShader Name of the overlying shader. Declaration public readonly string OverlayShader { get; } Property Value Type Description String Methods Instantiate() Create a new UGMaterial instance based on the shaders of this UGCommonTerrainMaterial.Factory . Declaration public readonly UGMaterial Instantiate() Returns Type Description UGMaterial"
  },
  "api/Unity.Geospatial.Streaming.UGCommonTerrainMaterial.html": {
    "href": "api/Unity.Geospatial.Streaming.UGCommonTerrainMaterial.html",
    "title": "Class UGCommonTerrainMaterial | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGCommonTerrainMaterial Multi-Material allowing apply multiple Materials / Textures to the same Mesh . Inheritance Object UGMaterial UGCommonTerrainMaterial Inherited Members UGMaterial.IsComposite UGMaterial.Dispose() UGMaterial.AddListener(Action<UGMaterial>) UGMaterial.RemoveListener(Action<UGMaterial>) UGMaterial.AddMaterialProperty(MaterialProperty) UGMaterial.RemoveMaterialProperty(MaterialProperty) Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class UGCommonTerrainMaterial : UGMaterial, IDisposable Constructors UGCommonTerrainMaterial(String, String) Default constructor. Declaration public UGCommonTerrainMaterial(string baseShader, string overlayShader) Parameters Type Name Description String baseShader Name of the underlying shader. String overlayShader Name of the overlying shader. Fields BuiltinUnlit Built-in Render Pipeline UGCommonTerrainMaterial.Factory with no lighting contribution. Declaration public static readonly UGCommonTerrainMaterial.Factory BuiltinUnlit Field Value Type Description UGCommonTerrainMaterial.Factory HDRPLit High Definition Render Pipeline UGCommonTerrainMaterial.Factory with lighting contribution. Declaration public static readonly UGCommonTerrainMaterial.Factory HDRPLit Field Value Type Description UGCommonTerrainMaterial.Factory HDRPUnlit High Definition Render Pipeline UGCommonTerrainMaterial.Factory with no lighting contribution. Declaration public static readonly UGCommonTerrainMaterial.Factory HDRPUnlit Field Value Type Description UGCommonTerrainMaterial.Factory URPLit Universal Render Pipeline UGCommonTerrainMaterial.Factory with lighting contribution. Declaration public static readonly UGCommonTerrainMaterial.Factory URPLit Field Value Type Description UGCommonTerrainMaterial.Factory URPUnlit Universal Render Pipeline UGCommonTerrainMaterial.Factory with no lighting contribution. Declaration public static readonly UGCommonTerrainMaterial.Factory URPUnlit Field Value Type Description UGCommonTerrainMaterial.Factory Properties UnityMaterials Created Materials after the renderer instantiation was executed via the corresponding IUGRenderer . Declaration public override List<Material> UnityMaterials { get; } Property Value Type Description List < Material > Overrides UGMaterial.UnityMaterials Methods OnAddMaterialProperty(MaterialProperty) Called whenever AddMaterialProperty(MaterialID, MaterialProperty) request to create a new MaterialProperty for this material. Declaration protected override void OnAddMaterialProperty(MaterialProperty materialProperty) Parameters Type Name Description MaterialProperty materialProperty Property to add. Overrides UGMaterial.OnAddMaterialProperty(MaterialProperty) OnDispose() Called when Dispose() is called allowing to release unmanaged resources. Declaration protected override void OnDispose() Overrides UGMaterial.OnDispose() OnRemoveMaterialProperty(MaterialProperty) Called whenever AddMaterialProperty(MaterialID, MaterialProperty) request to remove a MaterialProperty from this material. Declaration protected override void OnRemoveMaterialProperty(MaterialProperty materialProperty) Parameters Type Name Description MaterialProperty materialProperty Property to remove. Overrides UGMaterial.OnRemoveMaterialProperty(MaterialProperty)"
  },
  "api/Unity.Geospatial.Streaming.UGDataSource.html": {
    "href": "api/Unity.Geospatial.Streaming.UGDataSource.html",
    "title": "Class UGDataSource | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGDataSource Base class that defines a layer of data available to be loaded. This can be a single file, a collection of files, a stream, a connection to a server data set or any other ways to access data. Inheritance Object UGDataSource UniversalDecoderDataSource Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public abstract class UGDataSource Constructors UGDataSource(UGDataSourceID) Default constructor. Declaration protected UGDataSource(UGDataSourceID dataSourceId) Parameters Type Name Description UGDataSourceID dataSourceId Scriptable object associated with this instance. Fields DataSourceID Unique identifier allowing to do indirect assignment. Declaration public readonly UGDataSourceID DataSourceID Field Value Type Description UGDataSourceID Methods GetDecoderType() Type of UGDataSourceDecoder allowing to define with which other UGDataSource this instance can be used with. Declaration public abstract Type GetDecoderType() Returns Type Description Type The type of decoder associated with this instance. InstantiateDecoder(UUIDGenerator, UGMaterialFactory, UGDataSource[], Int32) Create a new UGDataSourceDecoder instance allowing to decode / read from this source. Declaration public abstract UGDataSourceDecoder InstantiateDecoder(UUIDGenerator idGenerator, UGMaterialFactory materialFactory, UGDataSource[] dataSources, int maximumSimultaneousContentRequests) Parameters Type Name Description UUIDGenerator idGenerator Class instance to use to create unique identifier. UGMaterialFactory materialFactory Which material factory to be used by the renderer. UGDataSource [] dataSources Array of UGDataSource instance available to be loaded. Int32 maximumSimultaneousContentRequests The MaximumSimultaneousContentRequests will be set to this value. Returns Type Description UGDataSourceDecoder"
  },
  "api/Unity.Geospatial.Streaming.UGDataSourceDecoder.html": {
    "href": "api/Unity.Geospatial.Streaming.UGDataSourceDecoder.html",
    "title": "Class UGDataSourceDecoder | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGDataSourceDecoder Base UGProcessingNode class allowing to load a dataset. Inheritance Object UGProcessingNode UGDataSourceDecoder UGUniversalDecoder Inherited Members UGProcessingNode.IsProcessing UGProcessingNode.IsIdle UGProcessingNode.DataAvailabilityStatus UGProcessingNode.Dispose() UGProcessingNode.ScheduleMainThread UGProcessingNode.MainThreadUpKeep() UGProcessingNode.MainThreadProcess() UGProcessingNode.TaskManager UGProcessingNode.InputConnections UGProcessingNode.OutputConnections UGProcessingNode.SetTaskManager(ITaskManager) UGProcessingNode.Connect<T>(UGProcessingNode.NodeOutput<T>, UGProcessingNode.NodeInput<T>) Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public abstract class UGDataSourceDecoder : UGProcessingNode, IDisposable Constructors UGDataSourceDecoder(Int32) Default constructor. Declaration protected UGDataSourceDecoder(int outputCount) Parameters Type Name Description Int32 outputCount Specify the amount of InstanceCommand that will be used as UGProcessingNode.NodeOutput<T> . Properties Input Array of DetailObserverData allowing to calculate the lowest geometric error against them. Declaration public UGProcessingNode.NodeInput<DetailObserverData[]> Input { get; } Property Value Type Description UGProcessingNode.NodeInput < DetailObserverData []> OutputCount Get the number of UGProcessingNode.NodeOutput<T> have been created with a InstanceCommand . Declaration public int OutputCount { get; } Property Value Type Description Int32 Methods GetDataAvailabilityStatus(UGProcessingNode.NodeOutput) Get if this node has completed the execution for the given output value. Declaration protected override UGProcessingNode.DataAvailability GetDataAvailabilityStatus(UGProcessingNode.NodeOutput output) Parameters Type Name Description UGProcessingNode.NodeOutput output Get the data availability for this output. Returns Type Description UGProcessingNode.DataAvailability The status of this instance execution. Overrides UGProcessingNode.GetDataAvailabilityStatus(UGProcessingNode.NodeOutput) GetOutput(Int32) Get the InstanceCommand UGProcessingNode.NodeOutput<T> for the given index . Declaration public UGProcessingNode.NodeOutput<InstanceCommand> GetOutput(int index) Parameters Type Name Description Int32 index Index of the instance to retrieve. Returns Type Description UGProcessingNode.NodeOutput < InstanceCommand > The node output instance at the given index . SetDetailObserverData(DetailObserverData[]) Apply the DetailObserverData allowing to use calculate the geometric error against them. Declaration public abstract void SetDetailObserverData(DetailObserverData[] data) Parameters Type Name Description DetailObserverData [] data Replace the actual observers with those."
  },
  "api/Unity.Geospatial.Streaming.UGDataSourceID.html": {
    "href": "api/Unity.Geospatial.Streaming.UGDataSourceID.html",
    "title": "Struct UGDataSourceID | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct UGDataSourceID Unique identifier of a UGDataSource . This allow indirection to the UGDataSource and keep the link even after the UGDataSource as been disposed of. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public readonly struct UGDataSourceID Constructors UGDataSourceID(Int64) Default constructor. Declaration public UGDataSourceID(long uuid) Parameters Type Name Description Int64 uuid Universal unique identifier of the data source. Fields Uuid Universal unique identifier of this data source. Declaration public readonly long Uuid Field Value Type Description Int64 Properties Null Get a UGDataSourceID representing a null value. Declaration public static readonly UGDataSourceID Null { get; } Property Value Type Description UGDataSourceID Methods Equals(Object) Get if this instance is the same as the given obj . Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Compare with this instance. Returns Type Description Boolean true if both instances represent the same; false otherwise. Overrides ValueType.Equals(Object) Equals(UGDataSourceID) Get if two UGDataSourceID represent the same. Declaration public readonly bool Equals(UGDataSourceID other) Parameters Type Name Description UGDataSourceID other Compare with this instance. Returns Type Description Boolean true if both instances represent the same; false otherwise. GetHashCode() Compute a hash code for the object. Declaration public override readonly int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides ValueType.GetHashCode() Remarks You should not assume that equal hash codes imply object equality. You should never persist or use a hash code outside the application domain in which it was created, because the same object may hash differently across application domains, processes, and platforms. ToString() Get the string representation of this UGDataSourceID . Declaration public override readonly string ToString() Returns Type Description String The string result. Overrides ValueType.ToString() Operators Equality(UGDataSourceID, UGDataSourceID) Get if two UGDataSourceID represent the same. Declaration public static bool operator ==(UGDataSourceID first, UGDataSourceID second) Parameters Type Name Description UGDataSourceID first Compare with this instance. UGDataSourceID second Compare the first instance with this other instance. Returns Type Description Boolean true if both instances represent the same; false otherwise. Explicit(Int64 to UGDataSourceID) Cast a langword_csharp_long to a UGDataSourceID . Declaration public static explicit operator UGDataSourceID(long uuid) Parameters Type Name Description Int64 uuid Long value to be converted. Returns Type Description UGDataSourceID The UGDataSourceID representation of the given instance. Explicit(UGDataSourceID to Int64) Cast an UGDataSourceID to a langword_csharp_long . Declaration public static explicit operator long (UGDataSourceID id) Parameters Type Name Description UGDataSourceID id Instance to be converted. Returns Type Description Int64 The langword_csharp_long representation of the given data source. Inequality(UGDataSourceID, UGDataSourceID) Get if two UGDataSourceID does not represent the same. Declaration public static bool operator !=(UGDataSourceID first, UGDataSourceID second) Parameters Type Name Description UGDataSourceID first Compare with this instance. UGDataSourceID second Compare the first instance with this other instance. Returns Type Description Boolean true if both instances are not the same; false if both instances are the same."
  },
  "api/Unity.Geospatial.Streaming.UGDataSourceObject.html": {
    "href": "api/Unity.Geospatial.Streaming.UGDataSourceObject.html",
    "title": "Class UGDataSourceObject | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGDataSourceObject Base class that defines an ScriptableObject available to be loaded. This can be a single file, a collection of files, a stream, a connection to a server data set or any other ways to access data. Inheritance Object Object ScriptableObject UGDataSourceObject Ogc3dTilesDataSourceObject TmsTerrainDataSourceObject GltfDataSourceObject Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public abstract class UGDataSourceObject : ScriptableObject Properties DataSourceID Scriptable object associated with this instance. Declaration public abstract UGDataSourceID DataSourceID { get; } Property Value Type Description UGDataSourceID Methods Instantiate(UGSystemBehaviour) Instantiates the underlying UGDataSource object. For most use-cases, this should only be called by the UGSystemBehaviour. Declaration public abstract UGDataSource Instantiate(UGSystemBehaviour system) Parameters Type Name Description UGSystemBehaviour system Instantiate the UGDataSource as child of this UGSystemBehaviour . Returns Type Description UGDataSource The newly instantiated UGDataSource ."
  },
  "api/Unity.Geospatial.Streaming.UGDeferredMaterial.html": {
    "href": "api/Unity.Geospatial.Streaming.UGDeferredMaterial.html",
    "title": "Class UGDeferredMaterial | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGDeferredMaterial UGDeferredMaterial allows material customization at runtime per instance data. This can be done by retrieving the material properties per instance data, then assigning these properties directly to the renderer's underlying Unity Materials. Inheritance Object UGMaterial UGDeferredMaterial Inherited Members UGMaterial.IsComposite UGMaterial.Dispose() UGMaterial.AddListener(Action<UGMaterial>) UGMaterial.RemoveListener(Action<UGMaterial>) UGMaterial.AddMaterialProperty(MaterialProperty) UGMaterial.RemoveMaterialProperty(MaterialProperty) Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class UGDeferredMaterial : UGMaterial, IDisposable Constructors UGDeferredMaterial(MaterialType) Default constructor. Declaration public UGDeferredMaterial(MaterialType type) Parameters Type Name Description MaterialType type Instantiate this UGDeferredMaterial when this MaterialType is requested. Properties Properties The MaterialProperty to apply to the UGMaterial when instantiated. Declaration public Dictionary<MaterialPropertyType, MaterialProperty> Properties { get; } Property Value Type Description Dictionary < MaterialPropertyType , MaterialProperty > Type Instantiate this UGDeferredMaterial when this MaterialType is requested. Declaration public MaterialType Type { get; } Property Value Type Description MaterialType UnityMaterials Created Materials after the renderer instantiation was executed via the corresponding IUGRenderer . Declaration public override List<Material> UnityMaterials { get; } Property Value Type Description List < Material > Overrides UGMaterial.UnityMaterials Methods OnAddMaterialProperty(MaterialProperty) Called whenever AddMaterialProperty(MaterialID, MaterialProperty) request to create a new MaterialProperty for this material. Declaration protected override void OnAddMaterialProperty(MaterialProperty materialProperty) Parameters Type Name Description MaterialProperty materialProperty Property to add. Overrides UGMaterial.OnAddMaterialProperty(MaterialProperty) OnDispose() Called when Dispose() is called allowing to release unmanaged resources. Declaration protected override void OnDispose() Overrides UGMaterial.OnDispose() OnRemoveMaterialProperty(MaterialProperty) Called whenever AddMaterialProperty(MaterialID, MaterialProperty) request to remove a MaterialProperty from this material. Declaration protected override void OnRemoveMaterialProperty(MaterialProperty materialProperty) Parameters Type Name Description MaterialProperty materialProperty Property to remove. Overrides UGMaterial.OnRemoveMaterialProperty(MaterialProperty)"
  },
  "api/Unity.Geospatial.Streaming.UGExtentModifier.html": {
    "href": "api/Unity.Geospatial.Streaming.UGExtentModifier.html",
    "title": "Class UGExtentModifier | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGExtentModifier The extent modifier allow to remove a zone to be displayed for a specified UGDataSourceID . To do so, you must select a GeodeticExtent . This will be the shape that will be used to cut the InstanceData loaded from the UGDataSourceID . Inheritance Object UGProcessingNode UGModifier UGExtentModifier Inherited Members UGModifier.Input UGModifier.Output UGProcessingNode.IsIdle UGProcessingNode.DataAvailabilityStatus UGProcessingNode.GetDataAvailabilityStatus(UGProcessingNode.NodeOutput) UGProcessingNode.TaskManager UGProcessingNode.InputConnections UGProcessingNode.OutputConnections UGProcessingNode.SetTaskManager(ITaskManager) UGProcessingNode.Connect<T>(UGProcessingNode.NodeOutput<T>, UGProcessingNode.NodeInput<T>) Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class UGExtentModifier : UGModifier, IDisposable Constructors UGExtentModifier(GeodeticExtent, IEnumerable<UGDataSourceID>, IEnumerable<UGDataSourceID>) Default constructor. Declaration public UGExtentModifier(GeodeticExtent extent, IEnumerable<UGDataSourceID> differenceDataSources, IEnumerable<UGDataSourceID> intersectionDataSources) Parameters Type Name Description GeodeticExtent extent Set the bounds and planes based on the points of this extent. IEnumerable < UGDataSourceID > differenceDataSources List of data sources which will be cut out by the specified extent. This is usually comprised of a lower detail environment. IEnumerable < UGDataSourceID > intersectionDataSources List of data sources which will be cropped by the specified extent. This is usually comprised of a higher detail inset. Properties IsProcessing true if the node is currently being executed and cannot be called until completion; false otherwise. Declaration protected override bool IsProcessing { get; } Property Value Type Description Boolean Overrides UGProcessingNode.IsProcessing IsReadyForData true if this instance can be executed; false if the Input dependency is either not connected or not executed. Declaration protected override bool IsReadyForData { get; } Property Value Type Description Boolean Overrides UGModifier.IsReadyForData ScheduleMainThread true if the process needs to be executed on the main thread; false otherwise. Declaration public override bool ScheduleMainThread { get; } Property Value Type Description Boolean Overrides UGProcessingNode.ScheduleMainThread Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides UGProcessingNode.Dispose() MainThreadProcess() At the end of each new frame, this method will be called as processes to be executed on the main thread. Declaration public override void MainThreadProcess() Overrides UGProcessingNode.MainThreadProcess() MainThreadUpKeep() At each new frame, this method will be executed before the main thread processes allowing pre-execution. Declaration public override void MainThreadUpKeep() Overrides UGProcessingNode.MainThreadUpKeep() ProcessData(ref InstanceCommand) Execute this instance and update the Output value based on the given instance . Declaration protected override void ProcessData(ref InstanceCommand instance) Parameters Type Name Description InstanceCommand instance Execute the UGProcessingNode based on this given value. Overrides UGModifier.ProcessData(ref InstanceCommand)"
  },
  "api/Unity.Geospatial.Streaming.UGExtentModifierBehaviour.html": {
    "href": "api/Unity.Geospatial.Streaming.UGExtentModifierBehaviour.html",
    "title": "Class UGExtentModifierBehaviour | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGExtentModifierBehaviour The extent modifier allow to remove a zone to be displayed for a specified UGDataSourceObject . To do so, you must select a GeodeticExtentObject . This will be the shape that will be used to cut the UGDataSourceObject . After, you select UGDataSourceObject in the DifferenceDataSources and IntersectionDataSources that will be cut the selected Extent . UGDataSourceObject part of the DifferenceDataSources list will have everything inside the Extent excluded. And the UGDataSourceObject in the IntersectionDataSources list will only keep their geometry that is inside the Extent shape. Inheritance Object Object Component Behaviour MonoBehaviour UGModifierBehaviour UGExtentModifierBehaviour Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) MonoBehaviour.StartCoroutine(String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) UnityEngine.Component.GetComponentInParent(System.Type, System.Boolean) Component.GetComponentInParent(Type) UnityEngine.Component.GetComponentInParent<T>(System.Boolean) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) Component.SendMessageUpwards(String, Object) Component.SendMessageUpwards(String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) Component.BroadcastMessage(String, Object) Component.BroadcastMessage(String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Component.rigidbody Component.rigidbody2D Component.camera Component.light Component.animation Component.constantForce Component.renderer Component.audio Component.networkView Component.collider Component.collider2D Component.hingeJoint Component.particleSystem Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class UGExtentModifierBehaviour : UGModifierBehaviour Properties DifferenceDataSources List of data sources which will be cut out by the specified extent. This is usually comprised of a lower detail environment. Declaration public List<UGDataSourceObject> DifferenceDataSources { get; set; } Property Value Type Description List < UGDataSourceObject > Extent The extent of the modifier, in decimal degrees. It must be convex and shouldn't span more than a few hundred kilometers. Declaration public GeodeticExtentObject Extent { get; set; } Property Value Type Description GeodeticExtentObject IntersectionDataSources List of data sources which will be cropped by the specified extent. This is usually comprised of a higher detail inset. Declaration public List<UGDataSourceObject> IntersectionDataSources { get; set; } Property Value Type Description List < UGDataSourceObject > Methods Instantiate() Create a new UGExtentModifier instance representing this UGExtentModifierBehaviour . Declaration public override UGModifier Instantiate() Returns Type Description UGModifier The newly created instance. Overrides UGModifierBehaviour.Instantiate() Validate(UGSystemBehaviour, out String) Compare the given system . dataSources with this instance DifferenceDataSources and IntersectionDataSources . If a UGDataSourceObject is not part of the given system , it will return false Declaration public override bool Validate(UGSystemBehaviour system, out string errorMsg) Parameters Type Name Description UGSystemBehaviour system Check if all sources are part of this system. dataSources String errorMsg Error returning the first missing UGDataSourceObject if any. Returns Type Description Boolean true if all sources part of the given system ; false if a UGDataSourceObject is missing. Overrides UGModifierBehaviour.Validate(UGSystemBehaviour, out String)"
  },
  "api/Unity.Geospatial.Streaming.UGInstantiator.html": {
    "href": "api/Unity.Geospatial.Streaming.UGInstantiator.html",
    "title": "Class UGInstantiator | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGInstantiator Allow to chain InstanceCommand results. Inheritance Object UGProcessingNode UGInstantiator Inherited Members UGProcessingNode.IsIdle UGProcessingNode.DataAvailabilityStatus UGProcessingNode.GetDataAvailabilityStatus(UGProcessingNode.NodeOutput) UGProcessingNode.TaskManager UGProcessingNode.InputConnections UGProcessingNode.OutputConnections UGProcessingNode.SetTaskManager(ITaskManager) UGProcessingNode.Connect<T>(UGProcessingNode.NodeOutput<T>, UGProcessingNode.NodeInput<T>) Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class UGInstantiator : UGProcessingNode, IDisposable Constructors UGInstantiator(Int32) Default constructor. Declaration public UGInstantiator(int outputSize) Parameters Type Name Description Int32 outputSize Amount of UGProcessingNode.NodeOutput<T> to create for this instance. Properties Input Execute this InstanceCommand before executing the output commands. Declaration public UGProcessingNode.NodeInput<InstanceCommand> Input { get; } Property Value Type Description UGProcessingNode.NodeInput < InstanceCommand > IsProcessing true if the node is currently being executed and cannot be called until completion; false otherwise. Declaration protected override bool IsProcessing { get; } Property Value Type Description Boolean Overrides UGProcessingNode.IsProcessing OutputCount Amount of available UGProcessingNode.NodeOutput<T> . Declaration public int OutputCount { get; } Property Value Type Description Int32 ScheduleMainThread true if the process needs to be executed on the main thread; false otherwise. Declaration public override bool ScheduleMainThread { get; } Property Value Type Description Boolean Overrides UGProcessingNode.ScheduleMainThread Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides UGProcessingNode.Dispose() GetOutput(Int32) Get the UGProcessingNode.NodeOutput<T> for the given index . Declaration public UGProcessingNode.NodeOutput<InstanceCommand> GetOutput(int index) Parameters Type Name Description Int32 index Index of the instance to retrieve. Returns Type Description UGProcessingNode.NodeOutput < InstanceCommand > The node output instance at the given index . MainThreadProcess() At the end of each new frame, this method will be called as processes to be executed on the main thread. Declaration public override void MainThreadProcess() Overrides UGProcessingNode.MainThreadProcess() MainThreadUpKeep() At each new frame, this method will be executed before the main thread processes allowing pre-execution. Declaration public override void MainThreadUpKeep() Overrides UGProcessingNode.MainThreadUpKeep()"
  },
  "api/Unity.Geospatial.Streaming.UGLighting.html": {
    "href": "api/Unity.Geospatial.Streaming.UGLighting.html",
    "title": "Enum UGLighting | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Enum UGLighting Specify the material type to use when loading a UGDataSource . Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public enum UGLighting Fields Name Description Default Use the default material for the current . Lit The material will receive light. Unlit The material will not receive light and will keep a constant look."
  },
  "api/Unity.Geospatial.Streaming.UGMaterial.html": {
    "href": "api/Unity.Geospatial.Streaming.UGMaterial.html",
    "title": "Class UGMaterial | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGMaterial Base class used by the UGMaterialFactory allowing to create Unity Materials to be assigned to instances created by the IUGRenderer . Inheritance Object UGMaterial UGCommonTerrainMaterial UGDeferredMaterial UGSimpleMaterial Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public abstract class UGMaterial : IDisposable Constructors UGMaterial(Boolean) Default constructor. Declaration protected UGMaterial(bool isComposite) Parameters Type Name Description Boolean isComposite Properties IsComposite true if the material is a composition of multiple overlaying materials ; false otherwise. Declaration public bool IsComposite { get; } Property Value Type Description Boolean UnityMaterials Created Materials after the renderer instantiation was executed via the corresponding IUGRenderer . Declaration public abstract List<Material> UnityMaterials { get; } Property Value Type Description List < Material > Methods AddListener(Action<UGMaterial>) Register an Action to be called after AddMaterialProperty(MaterialProperty) execution. Declaration public void AddListener(Action<UGMaterial> listener) Parameters Type Name Description Action < UGMaterial > listener Execute this Action with the affected UGMaterial as the given argument. AddMaterialProperty(MaterialProperty) Apply the given materialProperty to the material. Declaration public void AddMaterialProperty(MaterialProperty materialProperty) Parameters Type Name Description MaterialProperty materialProperty Property to add to the material. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public virtual void Dispose() Finalize() Destructor called by the garbage collector. Declaration protected void Finalize() OnAddMaterialProperty(MaterialProperty) Called whenever AddMaterialProperty(MaterialID, MaterialProperty) request to create a new MaterialProperty for this material. Declaration protected abstract void OnAddMaterialProperty(MaterialProperty materialProperty) Parameters Type Name Description MaterialProperty materialProperty Property to add. OnDispose() Called when Dispose() is called allowing to release unmanaged resources. Declaration protected abstract void OnDispose() OnRemoveMaterialProperty(MaterialProperty) Called whenever AddMaterialProperty(MaterialID, MaterialProperty) request to remove a MaterialProperty from this material. Declaration protected abstract void OnRemoveMaterialProperty(MaterialProperty materialProperty) Parameters Type Name Description MaterialProperty materialProperty Property to remove. RemoveListener(Action<UGMaterial>) Unregister an Action that was called after AddMaterialProperty(MaterialProperty) execution. Declaration public void RemoveListener(Action<UGMaterial> listener) Parameters Type Name Description Action < UGMaterial > listener Action to be unregistered. RemoveMaterialProperty(MaterialProperty) Remove a previously AddMaterialProperty(MaterialProperty) materialProperty from this material. Declaration public void RemoveMaterialProperty(MaterialProperty materialProperty) Parameters Type Name Description MaterialProperty materialProperty Property to remove from the material."
  },
  "api/Unity.Geospatial.Streaming.UGMaterialFactory.html": {
    "href": "api/Unity.Geospatial.Streaming.UGMaterialFactory.html",
    "title": "Class UGMaterialFactory | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGMaterialFactory Base class to create UGMaterial instances with its attached MaterialProperty . Inheritance Object UGMaterialFactory DeferredMaterialFactory SimpleMaterialFactory Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public abstract class UGMaterialFactory Methods InstantiateMaterial(MaterialType) Create a new UGMaterial instance based on the given type . Declaration public abstract UGMaterial InstantiateMaterial(MaterialType type) Parameters Type Name Description MaterialType type Determine which UGMaterial to instantiate. Returns Type Description UGMaterial The new material instance."
  },
  "api/Unity.Geospatial.Streaming.UGMaterialFactoryObject.html": {
    "href": "api/Unity.Geospatial.Streaming.UGMaterialFactoryObject.html",
    "title": "Class UGMaterialFactoryObject | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGMaterialFactoryObject Base factory asset to be instantiated into a scene as a UGMaterialFactory . Inheritance Object Object ScriptableObject UGMaterialFactoryObject DeferredMaterialFactoryObject SimpleMaterialFactoryObject Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public abstract class UGMaterialFactoryObject : ScriptableObject Methods Instantiate() Create a new UGMaterialFactory based on this instance values. Declaration public abstract UGMaterialFactory Instantiate() Returns Type Description UGMaterialFactory The new UGMaterialFactory instance."
  },
  "api/Unity.Geospatial.Streaming.UGMetadata.html": {
    "href": "api/Unity.Geospatial.Streaming.UGMetadata.html",
    "title": "Class UGMetadata | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGMetadata This class is designed to contain a geospatial object's metadata. By default, this metadata is comprised of a string dictionary which can contain arbitrary values. However, should a particular use-case require metadata of a different form, such as a hierarchy of elements, this class can be derived and the derived class can be assigned to instances by the decoder. Inheritance Object UGMetadata Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class UGMetadata Constructors UGMetadata(Dictionary<String, Object>) Construct a new metadata object Declaration public UGMetadata(Dictionary<string, object> properties = null) Parameters Type Name Description Dictionary < String , Object > properties Dictionary of strings containing metadata. If null, a new dictionary will be instantiated and properties can be assigned post construction. UGMetadata(NodeId, DoubleBounds, Single) Construct a new metadata object with each individual values specified. Declaration public UGMetadata(NodeId nodeId, DoubleBounds bounds, float geometricError) Parameters Type Name Description NodeId nodeId The id of the node this metadata instance is linked with. Unity.Geospatial.HighPrecision.DoubleBounds bounds Define the limits of the content allowing to calculate the screen space error. Single geometricError The geometric error of the content. If the evaluated screen space error is higher than this value, the node will not be expanded. UGMetadata(NodeId, IGetNodeData) Construct a new metadata object and fill it with values based on the given data values. Declaration public UGMetadata(NodeId nodeId, IGetNodeData getter) Parameters Type Name Description NodeId nodeId Id of the node to create the metadata instance for. IGetNodeData getter Instance to get the values from. Properties InstanceData Get all the data that was loaded for the InstanceID linked with this UGMetadata instance. Declaration public InstanceData InstanceData { get; set; } Property Value Type Description InstanceData Properties The metadata properties Declaration public Dictionary<string, object> Properties { get; } Property Value Type Description Dictionary < String , Object >"
  },
  "api/Unity.Geospatial.Streaming.UGMetadataBehaviour.html": {
    "href": "api/Unity.Geospatial.Streaming.UGMetadataBehaviour.html",
    "title": "Class UGMetadataBehaviour | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGMetadataBehaviour The UGMetadataBehaviour is a class designed to wrap the UGMetadata object and expose it to the GameObject workflow. Inheritance Object Object Component Behaviour MonoBehaviour UGMetadataBehaviour Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) MonoBehaviour.StartCoroutine(String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) UnityEngine.Component.GetComponentInParent(System.Type, System.Boolean) Component.GetComponentInParent(Type) UnityEngine.Component.GetComponentInParent<T>(System.Boolean) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) Component.SendMessageUpwards(String, Object) Component.SendMessageUpwards(String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) Component.BroadcastMessage(String, Object) Component.BroadcastMessage(String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Component.rigidbody Component.rigidbody2D Component.camera Component.light Component.animation Component.constantForce Component.renderer Component.audio Component.networkView Component.collider Component.collider2D Component.hingeJoint Component.particleSystem Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class UGMetadataBehaviour : MonoBehaviour Properties Metadata The Metadata of the given GameObject. If no metadata is present, this value can be null. Declaration public UGMetadata Metadata { get; set; } Property Value Type Description UGMetadata"
  },
  "api/Unity.Geospatial.Streaming.UGModifier.html": {
    "href": "api/Unity.Geospatial.Streaming.UGModifier.html",
    "title": "Class UGModifier | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGModifier Base UGProcessingNode class used to alter loaded datasets. Inheritance Object UGProcessingNode UGModifier UGExtentModifier Inherited Members UGProcessingNode.IsProcessing UGProcessingNode.IsIdle UGProcessingNode.DataAvailabilityStatus UGProcessingNode.GetDataAvailabilityStatus(UGProcessingNode.NodeOutput) UGProcessingNode.Dispose() UGProcessingNode.ScheduleMainThread UGProcessingNode.MainThreadUpKeep() UGProcessingNode.MainThreadProcess() UGProcessingNode.TaskManager UGProcessingNode.InputConnections UGProcessingNode.OutputConnections UGProcessingNode.SetTaskManager(ITaskManager) UGProcessingNode.Connect<T>(UGProcessingNode.NodeOutput<T>, UGProcessingNode.NodeInput<T>) Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public abstract class UGModifier : UGProcessingNode, IDisposable Constructors UGModifier() Default constructor. Declaration protected UGModifier() Properties Input InstanceCommand to be executed before this instance gets executed. Declaration public UGProcessingNode.NodeInput<InstanceCommand> Input { get; } Property Value Type Description UGProcessingNode.NodeInput < InstanceCommand > IsReadyForData true if this instance can be executed; false if the Input dependency is either not connected or not executed. Declaration protected abstract bool IsReadyForData { get; } Property Value Type Description Boolean Output InstanceCommand to be executed after this instance gets executed. Declaration public UGProcessingNode.NodeOutput<InstanceCommand> Output { get; protected set; } Property Value Type Description UGProcessingNode.NodeOutput < InstanceCommand > Methods ProcessData(ref InstanceCommand) Execute this instance and update the Output value based on the given instance . Declaration protected abstract void ProcessData(ref InstanceCommand instance) Parameters Type Name Description InstanceCommand instance Execute the UGProcessingNode based on this given value."
  },
  "api/Unity.Geospatial.Streaming.UGModifierBehaviour.html": {
    "href": "api/Unity.Geospatial.Streaming.UGModifierBehaviour.html",
    "title": "Class UGModifierBehaviour | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGModifierBehaviour Abstract class allowing to Instantiate() a UGModifier . Inheritance Object Object Component Behaviour MonoBehaviour UGModifierBehaviour UGExtentModifierBehaviour Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) MonoBehaviour.StartCoroutine(String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) UnityEngine.Component.GetComponentInParent(System.Type, System.Boolean) Component.GetComponentInParent(Type) UnityEngine.Component.GetComponentInParent<T>(System.Boolean) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) Component.SendMessageUpwards(String, Object) Component.SendMessageUpwards(String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) Component.BroadcastMessage(String, Object) Component.BroadcastMessage(String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Component.rigidbody Component.rigidbody2D Component.camera Component.light Component.animation Component.constantForce Component.renderer Component.audio Component.networkView Component.collider Component.collider2D Component.hingeJoint Component.particleSystem Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public abstract class UGModifierBehaviour : MonoBehaviour Methods Instantiate() Create a new UGModifier instance representing this UGModifierBehaviour . Declaration public abstract UGModifier Instantiate() Returns Type Description UGModifier The newly created instance. Validate(UGSystemBehaviour, out String) Modifier validation method against a given UGSystem Declaration public virtual bool Validate(UGSystemBehaviour system, out string errorMsg) Parameters Type Name Description UGSystemBehaviour system A UGSystem that currently uses this UGModifier String errorMsg When this method returns, outputs a validation error message if there is any error, otherwise outputs an empty string Returns Type Description Boolean Return false if there is any validation error, otherwise return true"
  },
  "api/Unity.Geospatial.Streaming.UGObjectPool-1.html": {
    "href": "api/Unity.Geospatial.Streaming.UGObjectPool-1.html",
    "title": "Class UGObjectPool<T> | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGObjectPool<T> Allow to create new objects by limiting the garbage collection. Each time an object is disposed, it's only flagged has disabled allowing to reuse the object next time a new instance is requested. Inheritance Object UGObjectPool<T> Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class UGObjectPool<T> : IDisposable where T : IUGObject Type Parameters Name Description T Type of object created by GetObject() . Constructors UGObjectPool(Func<T>, Action<T>, Action<T>, Action<T>) Default constructor. Declaration public UGObjectPool(Func<T> allocate, Action<T> dispose, Action<T> set, Action<T> clear) Parameters Type Name Description Func <T> allocate Function used to create a new instance of T . Action <T> dispose Function called when this UGObjectPool<T> instance is disposed. Action <T> set Function called each time GetObject() is called, even if it returns a recycled instance. Action <T> clear Function called when ReleaseObject(T) is called for a T instance. Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. This will call the registered dispose method on each T instances part of this pool. Declaration public void Dispose() Finalize() Destructor called by the garbage collector. Declaration protected void Finalize() GetObject() Get the next available T instance. If no more instances are available, a new instance will be created. Declaration public T GetObject() Returns Type Description T A ready to use T instance. ReleaseObject(T) Mark a T instance as no more used and make it available the next time GetObject() is called. Declaration public void ReleaseObject(T obj) Parameters Type Name Description T obj The instance to tag as disposed."
  },
  "api/Unity.Geospatial.Streaming.UGOmniObserverBehaviour.html": {
    "href": "api/Unity.Geospatial.Streaming.UGOmniObserverBehaviour.html",
    "title": "Class UGOmniObserverBehaviour | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGOmniObserverBehaviour The Omni Observer is an omnidirectional observer which ensures that the same level of detail is uniformly streamed in all around the observer, with a level of detail which is inversely proportional to the distance objects are located from the observer. Using this scene observer will increase the amount of video memory required to load the given geometry but will eliminate noticeable loading when rotating the camera. The primary use-case for this observer is VR applications, where the camera turns frequently. Inheritance Object Object Component Behaviour MonoBehaviour UGSceneObserverBehaviour UGOmniObserverBehaviour Implements UGSimpleSceneObserver.IImplementation Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) MonoBehaviour.StartCoroutine(String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) UnityEngine.Component.GetComponentInParent(System.Type, System.Boolean) Component.GetComponentInParent(Type) UnityEngine.Component.GetComponentInParent<T>(System.Boolean) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) Component.SendMessageUpwards(String, Object) Component.SendMessageUpwards(String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) Component.BroadcastMessage(String, Object) Component.BroadcastMessage(String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Component.rigidbody Component.rigidbody2D Component.camera Component.light Component.animation Component.constantForce Component.renderer Component.audio Component.networkView Component.collider Component.collider2D Component.hingeJoint Component.particleSystem Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class UGOmniObserverBehaviour : UGSceneObserverBehaviour, UGSimpleSceneObserver.IImplementation Fields MaxViewDistance The maximum distance at which an object should be visible. Note that objects further than this may still be visible, depending on the structure of the streamed data but it's visibility is not guaranteed. This setting is completely independent from the camera's clip planes, which may also impact object visibility. Declaration public float MaxViewDistance Field Value Type Description Single NormalizedError The expected geometric error 1 meter away from the observer. Declaration public float NormalizedError Field Value Type Description Single Root Set the parent root of this instance. If no root is set, the parent UGSystemBehaviour root will be taken. Declaration public HPRoot Root Field Value Type Description Unity.Geospatial.HighPrecision.HPRoot Methods GetDetailObserverData() Get a DetailObserverData representing this instance. Declaration public DetailObserverData GetDetailObserverData() Returns Type Description DetailObserverData see cref=\"UGSceneObserver\"/> information allowing to calculate the geometric error against it. Instantiate(UGSystemBehaviour) Create a new UGSceneObserver of this camera and link it with the given ugSystem . Declaration public override UGSceneObserver Instantiate(UGSystemBehaviour ugSystem) Parameters Type Name Description UGSystemBehaviour ugSystem Create the instance under this parent node. Returns Type Description UGSceneObserver The instantiated observer. Overrides UGSceneObserverBehaviour.Instantiate(UGSystemBehaviour) Exceptions Type Condition InvalidOperationException Raised if no valid Root was found. Implements UGSimpleSceneObserver.IImplementation"
  },
  "api/Unity.Geospatial.Streaming.UGPresenter.html": {
    "href": "api/Unity.Geospatial.Streaming.UGPresenter.html",
    "title": "Class UGPresenter | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGPresenter Responsible to convert the streamed geometry into actual GameObjects . Most configurations will only require a single presenter but applications with multiple cameras or applications where the source data is not normalized in space (think multiple planets or non-geolocated dataset) may require multiple presenters. Inheritance Object UGProcessingNode UGPresenter UGBehaviourPresenter Inherited Members UGProcessingNode.IsIdle UGProcessingNode.DataAvailabilityStatus UGProcessingNode.GetDataAvailabilityStatus(UGProcessingNode.NodeOutput) UGProcessingNode.Dispose() UGProcessingNode.TaskManager UGProcessingNode.InputConnections UGProcessingNode.OutputConnections UGProcessingNode.SetTaskManager(ITaskManager) UGProcessingNode.Connect<T>(UGProcessingNode.NodeOutput<T>, UGProcessingNode.NodeInput<T>) Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public abstract class UGPresenter : UGProcessingNode, IDisposable Constructors UGPresenter() Default constructor. Declaration protected UGPresenter() Properties Input InstanceCommand to be executed before this instance gets executed. Declaration public UGProcessingNode.NodeInput<InstanceCommand> Input { get; } Property Value Type Description UGProcessingNode.NodeInput < InstanceCommand > IsProcessing true if the node is currently being executed and cannot be called until completion; false otherwise. Declaration protected override bool IsProcessing { get; } Property Value Type Description Boolean Overrides UGProcessingNode.IsProcessing ScheduleMainThread true if the process needs to be executed on the main thread; false otherwise. Declaration public override bool ScheduleMainThread { get; } Property Value Type Description Boolean Overrides UGProcessingNode.ScheduleMainThread Methods CmdAllocate(InstanceID, InstanceData) Command to be executed when an instance gets loaded. Declaration protected abstract void CmdAllocate(InstanceID instanceId, InstanceData instanceData) Parameters Type Name Description InstanceID instanceId Id of the instance that is loaded. InstanceData instanceData Data loaded for the given instanceId . CmdDispose(InstanceID) Command to be executed when an instance gets unloaded. Declaration protected abstract void CmdDispose(InstanceID instanceId) Parameters Type Name Description InstanceID instanceId Id of the instance that is disposed. CmdUpdateVisibility(InstanceID, Boolean) Command to be executed when the visibility state for the given instanceId changes. Declaration protected abstract void CmdUpdateVisibility(InstanceID instanceId, bool visibility) Parameters Type Name Description InstanceID instanceId Instance with its visibility state changed. Boolean visibility true when the instance is displayed; false when the instance is hidden. MainThreadProcess() At the end of each new frame, this method will be called as processes to be executed on the main thread. Declaration public override void MainThreadProcess() Overrides UGProcessingNode.MainThreadProcess() MainThreadUpKeep() At each new frame, this method will be executed before the main thread processes allowing pre-execution. Declaration public override void MainThreadUpKeep() Overrides UGProcessingNode.MainThreadUpKeep()"
  },
  "api/Unity.Geospatial.Streaming.UGProcessingNode.DataAvailability.html": {
    "href": "api/Unity.Geospatial.Streaming.UGProcessingNode.DataAvailability.html",
    "title": "Enum UGProcessingNode.DataAvailability | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Enum UGProcessingNode.DataAvailability State of the UGProcessingNode . Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public enum DataAvailability Fields Name Description WaitingUpstream The UGProcessingNode cannot be executed since at least one upstream UGProcessingNode haven't completed its execution. Processing The UGProcessingNode is currently executing. Idle The UGProcessingNode does not need to be executed and is waiting to be called."
  },
  "api/Unity.Geospatial.Streaming.UGProcessingNode.html": {
    "href": "api/Unity.Geospatial.Streaming.UGProcessingNode.html",
    "title": "Class UGProcessingNode | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGProcessingNode Base class to execute a task by the UGSystem within a processing graph. Inheritance Object UGProcessingNode DecoderMultiplexer ObserverMultiplexer OneToManyNode<T> UGDataSourceDecoder UGInstantiator UGModifier UGPresenter UGSceneObserver Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public abstract class UGProcessingNode : IDisposable Constructors UGProcessingNode() Default constructor. Declaration protected UGProcessingNode() Fields InputConnections Array of required inputs to be connected to upstream UGProcessingNode.NodeOutput instances. Declaration protected UGProcessingNode.NodeInput[] InputConnections Field Value Type Description UGProcessingNode.NodeInput [] OutputConnections Array of outputs available to be connected to downstream UGProcessingNode.NodeInput instances. Declaration protected UGProcessingNode.NodeOutput[] OutputConnections Field Value Type Description UGProcessingNode.NodeOutput [] TaskManager Define how to execute the Tasks . This allow to implement either a custom task manager or decide whether all the Tasks should be executed on the main thread or be multi-threaded. Declaration protected readonly ITaskManager TaskManager Field Value Type Description ITaskManager Properties DataAvailabilityStatus Get if this node is currently processing and prevent downstream connections to be executed. Declaration public UGProcessingNode.DataAvailability DataAvailabilityStatus { get; } Property Value Type Description UGProcessingNode.DataAvailability The status of this instance execution. IsIdle Get if this instance has completed its execution. Declaration public bool IsIdle { get; } Property Value Type Description Boolean true if all nodes part of this instance are with the status idle; false otherwise. IsProcessing true if the node is currently being executed and cannot be called until completion; false otherwise. Declaration protected abstract bool IsProcessing { get; } Property Value Type Description Boolean ScheduleMainThread true if the process needs to be executed on the main thread; false otherwise. Declaration public abstract bool ScheduleMainThread { get; } Property Value Type Description Boolean Methods Connect<T>(UGProcessingNode.NodeOutput<T>, UGProcessingNode.NodeInput<T>) Connect an UGProcessingNode.NodeOutput<T> to an UGProcessingNode.NodeInput<T> allowing the rightNode retrieving the leftNode value on execution. Declaration public static void Connect<T>(UGProcessingNode.NodeOutput<T> leftNode, UGProcessingNode.NodeInput<T> rightNode) Parameters Type Name Description UGProcessingNode.NodeOutput <T> leftNode Upstream node to connect. UGProcessingNode.NodeInput <T> rightNode Downstream node to connect. Type Parameters Name Description T Restrict the two connectors to be of this type. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public abstract void Dispose() GetDataAvailabilityStatus(UGProcessingNode.NodeOutput) Get if this node has completed the execution for the given output value. Declaration protected virtual UGProcessingNode.DataAvailability GetDataAvailabilityStatus(UGProcessingNode.NodeOutput output) Parameters Type Name Description UGProcessingNode.NodeOutput output Get the data availability for this output. Returns Type Description UGProcessingNode.DataAvailability The status of this instance execution. MainThreadProcess() At the end of each new frame, this method will be called as processes to be executed on the main thread. Declaration public abstract void MainThreadProcess() MainThreadUpKeep() At each new frame, this method will be executed before the main thread processes allowing pre-execution. Declaration public abstract void MainThreadUpKeep() SetTaskManager(ITaskManager) Change how to execute the tasks. Declaration public void SetTaskManager(ITaskManager taskManager) Parameters Type Name Description ITaskManager taskManager Define how to execute the Tasks . This allow to implement either a custom task manager or decide whether all the Tasks should be executed on the main thread or be multi-threaded."
  },
  "api/Unity.Geospatial.Streaming.UGProcessingNode.NodeInput.html": {
    "href": "api/Unity.Geospatial.Streaming.UGProcessingNode.NodeInput.html",
    "title": "Class UGProcessingNode.NodeInput | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGProcessingNode.NodeInput Base input connector allowing to connect upstream values to an UGProcessingNode.NodeOutput as the source value. Inheritance Object UGProcessingNode.NodeInput UGProcessingNode.NodeInput<T> Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public abstract class NodeInput Properties UpstreamDataAvailability Get if a dependency of this instance is currently processing, preventing this instance to be processed. Declaration public abstract UGProcessingNode.DataAvailability UpstreamDataAvailability { get; } Property Value Type Description UGProcessingNode.DataAvailability"
  },
  "api/Unity.Geospatial.Streaming.UGProcessingNode.NodeInput-1.html": {
    "href": "api/Unity.Geospatial.Streaming.UGProcessingNode.NodeInput-1.html",
    "title": "Class UGProcessingNode.NodeInput<T> | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGProcessingNode.NodeInput<T> Generic input connector allowing to connect upstream values to an UGProcessingNode.NodeOutput<T> . Inheritance Object UGProcessingNode.NodeInput UGProcessingNode.NodeInput<T> ObserverMultiplexer.Input Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public abstract class NodeInput<T> : UGProcessingNode.NodeInput Type Parameters Name Description T Type of value this instances expect to receive when executing its parent UGProcessingNode . Properties ConnectedOutput Define the dependency and the value getter of this instance. Declaration public UGProcessingNode.NodeOutput<T> ConnectedOutput { get; set; } Property Value Type Description UGProcessingNode.NodeOutput <T> IsReadyForData Get if the dependency was executed, meaning, ready to get its ConnectedOutput value. Declaration public abstract bool IsReadyForData { get; } Property Value Type Description Boolean UpstreamDataAvailability Get if the ConnectedOutput is currently processing, preventing this instance to be processed. Declaration public override UGProcessingNode.DataAvailability UpstreamDataAvailability { get; } Property Value Type Description UGProcessingNode.DataAvailability Overrides UGProcessingNode.NodeInput.UpstreamDataAvailability Methods ProcessData(ref T) Execute the UGProcessingNode owner of this input based on the given data value. Declaration public abstract void ProcessData(ref T data) Parameters Type Name Description T data Execute the UGProcessingNode owner based on this given value."
  },
  "api/Unity.Geospatial.Streaming.UGProcessingNode.NodeOutput.html": {
    "href": "api/Unity.Geospatial.Streaming.UGProcessingNode.NodeOutput.html",
    "title": "Class UGProcessingNode.NodeOutput | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGProcessingNode.NodeOutput Base output connector allowing to connect downstream values to an UGProcessingNode.NodeInput . Inheritance Object UGProcessingNode.NodeOutput UGProcessingNode.NodeOutput<T> Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public abstract class NodeOutput Properties UpstreamDataAvailability Get if this parent node currently processing and prevent downstream connections to be executed. Declaration public abstract UGProcessingNode.DataAvailability UpstreamDataAvailability { get; } Property Value Type Description UGProcessingNode.DataAvailability"
  },
  "api/Unity.Geospatial.Streaming.UGProcessingNode.NodeOutput-1.html": {
    "href": "api/Unity.Geospatial.Streaming.UGProcessingNode.NodeOutput-1.html",
    "title": "Class UGProcessingNode.NodeOutput<T> | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGProcessingNode.NodeOutput<T> Generic output connector allowing to connect downstream values to an UGProcessingNode.NodeInput<T> . Inheritance Object UGProcessingNode.NodeOutput UGProcessingNode.NodeOutput<T> Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class NodeOutput<T> : UGProcessingNode.NodeOutput Type Parameters Name Description T Type of value this instances send when executing its parent UGProcessingNode . Constructors NodeOutput(UGProcessingNode) Default constructor. Declaration public NodeOutput(UGProcessingNode node) Parameters Type Name Description UGProcessingNode node Owner of this instance. Properties ConnectedInput The connected input using this output as upstream dependency. Declaration public UGProcessingNode.NodeInput<T> ConnectedInput { get; set; } Property Value Type Description UGProcessingNode.NodeInput <T> IsReadyForData true if the UGProcessingNode parent can be executed; false if the ConnectedInput is not connected. Declaration public bool IsReadyForData { get; } Property Value Type Description Boolean UpstreamDataAvailability Get if this parent node currently processing and prevent downstream connections to be executed. Declaration public override UGProcessingNode.DataAvailability UpstreamDataAvailability { get; } Property Value Type Description UGProcessingNode.DataAvailability Overrides UGProcessingNode.NodeOutput.UpstreamDataAvailability Methods ProcessData(ref T) Execute the UGProcessingNode owner of this output based on the given data value. Declaration public void ProcessData(ref T data) Parameters Type Name Description T data Execute the UGProcessingNode owner based on this given value."
  },
  "api/Unity.Geospatial.Streaming.UGSceneObserver.html": {
    "href": "api/Unity.Geospatial.Streaming.UGSceneObserver.html",
    "title": "Class UGSceneObserver | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGSceneObserver Base Scene Observer class used to calculate the values. Inheritance Object UGProcessingNode UGSceneObserver UGSimpleSceneObserver Inherited Members UGProcessingNode.IsProcessing UGProcessingNode.IsIdle UGProcessingNode.DataAvailabilityStatus UGProcessingNode.GetDataAvailabilityStatus(UGProcessingNode.NodeOutput) UGProcessingNode.Dispose() UGProcessingNode.ScheduleMainThread UGProcessingNode.MainThreadUpKeep() UGProcessingNode.MainThreadProcess() UGProcessingNode.TaskManager UGProcessingNode.InputConnections UGProcessingNode.OutputConnections UGProcessingNode.SetTaskManager(ITaskManager) UGProcessingNode.Connect<T>(UGProcessingNode.NodeOutput<T>, UGProcessingNode.NodeInput<T>) Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public abstract class UGSceneObserver : UGProcessingNode, IDisposable Fields m_DetailOutputs List of UGProcessingNode.NodeOutput<T> returning each DetailObserverData for each registered observer. Declaration protected readonly List<UGProcessingNode.NodeOutput<DetailObserverData>> m_DetailOutputs Field Value Type Description List < UGProcessingNode.NodeOutput < DetailObserverData >> Properties DetailOutputCount Get the number of UGProcessingNode.NodeOutput<T> have been created with a DetailObserverData . Declaration public int DetailOutputCount { get; } Property Value Type Description Int32 Methods GetDetailOutput(Int32) Get the DetailObserverData UGProcessingNode.NodeOutput<T> for the given index . Declaration public UGProcessingNode.NodeOutput<DetailObserverData> GetDetailOutput(int index) Parameters Type Name Description Int32 index Index of the instance to retrieve. Returns Type Description UGProcessingNode.NodeOutput < DetailObserverData > The node output instance at the given index ."
  },
  "api/Unity.Geospatial.Streaming.UGSceneObserverBehaviour.html": {
    "href": "api/Unity.Geospatial.Streaming.UGSceneObserverBehaviour.html",
    "title": "Class UGSceneObserverBehaviour | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGSceneObserverBehaviour Base class to Instantiate(UGSystemBehaviour) a UGSceneObserver . Scene observer tells the UGSystem which geometry must be loaded at which resolution by calculating the GetErrorSpecification(in DoubleBounds) based on the space it takes in the field of view of the UGSceneObserver . Inheritance Object Object Component Behaviour MonoBehaviour UGSceneObserverBehaviour UGCameraBehaviour UGOmniObserverBehaviour Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) MonoBehaviour.StartCoroutine(String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) UnityEngine.Component.GetComponentInParent(System.Type, System.Boolean) Component.GetComponentInParent(Type) UnityEngine.Component.GetComponentInParent<T>(System.Boolean) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) Component.SendMessageUpwards(String, Object) Component.SendMessageUpwards(String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) Component.BroadcastMessage(String, Object) Component.BroadcastMessage(String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Component.rigidbody Component.rigidbody2D Component.camera Component.light Component.animation Component.constantForce Component.renderer Component.audio Component.networkView Component.collider Component.collider2D Component.hingeJoint Component.particleSystem Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public abstract class UGSceneObserverBehaviour : MonoBehaviour Methods Instantiate(UGSystemBehaviour) Create a new UGSceneObserver of this camera and link it with the given ugSystem . Declaration public abstract UGSceneObserver Instantiate(UGSystemBehaviour ugSystem) Parameters Type Name Description UGSystemBehaviour ugSystem Create the instance under this parent node. Returns Type Description UGSceneObserver The instantiated observer."
  },
  "api/Unity.Geospatial.Streaming.UGShaderPropertiesObject.html": {
    "href": "api/Unity.Geospatial.Streaming.UGShaderPropertiesObject.html",
    "title": "Class UGShaderPropertiesObject | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGShaderPropertiesObject ScriptableObject for UGShaderProperty to be applied on materials . Inheritance Object Object ScriptableObject UGShaderPropertiesObject Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax [CreateAssetMenu(fileName = \"Shader Properties\", menuName = \"Geospatial/Rendering/Shader Properties\", order = 102)] public class UGShaderPropertiesObject : ScriptableObject Fields PropertyList List of UGShaderProperty to be applied. Declaration public List<UGShaderProperty> PropertyList Field Value Type Description List < UGShaderProperty >"
  },
  "api/Unity.Geospatial.Streaming.UGShaderProperty.html": {
    "href": "api/Unity.Geospatial.Streaming.UGShaderProperty.html",
    "title": "Class UGShaderProperty | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGShaderProperty Property directive allowing the corresponding method call on a material . Inheritance Object UGShaderProperty Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax [Serializable] public class UGShaderProperty Constructors UGShaderProperty(MaterialPropertyType, String, String) Default constructor. Declaration public UGShaderProperty(MaterialPropertyType type, string name, string st = null) Parameters Type Name Description MaterialPropertyType type Specify how a MaterialProperty affects the material . String name Name of the property allowing a better understanding of its usage. String st Texture transform / scale to apply. Fields Name Name of the property allowing a better understanding of its usage. Declaration public string Name Field Value Type Description String TextureScaleTiling Texture transform / scale to apply. Declaration public string TextureScaleTiling Field Value Type Description String Type Specify how a MaterialProperty affects the material . Declaration public MaterialPropertyType Type Field Value Type Description MaterialPropertyType"
  },
  "api/Unity.Geospatial.Streaming.UGSimpleMaterial.html": {
    "href": "api/Unity.Geospatial.Streaming.UGSimpleMaterial.html",
    "title": "Class UGSimpleMaterial | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGSimpleMaterial UGMaterial instance creator with a single material . Inheritance Object UGMaterial UGSimpleMaterial Inherited Members UGMaterial.IsComposite UGMaterial.Dispose() UGMaterial.AddListener(Action<UGMaterial>) UGMaterial.RemoveListener(Action<UGMaterial>) UGMaterial.AddMaterialProperty(MaterialProperty) UGMaterial.RemoveMaterialProperty(MaterialProperty) Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class UGSimpleMaterial : UGMaterial, IDisposable Constructors UGSimpleMaterial(Material, IEnumerable<UGShaderProperty>) Default constructor. Declaration public UGSimpleMaterial(Material mat, IEnumerable<UGShaderProperty> propertyList) Parameters Type Name Description Material mat The material to be instantiated when applied to meshes . IEnumerable < UGShaderProperty > propertyList Properties to be evaluated when applied. Properties UnityMaterials Created Materials after the renderer instantiation was executed via the corresponding IUGRenderer . Declaration public override List<Material> UnityMaterials { get; } Property Value Type Description List < Material > Overrides UGMaterial.UnityMaterials Methods OnAddMaterialProperty(MaterialProperty) Called whenever AddMaterialProperty(MaterialID, MaterialProperty) request to create a new MaterialProperty for this material. Declaration protected override void OnAddMaterialProperty(MaterialProperty materialProperty) Parameters Type Name Description MaterialProperty materialProperty Property to add. Overrides UGMaterial.OnAddMaterialProperty(MaterialProperty) OnDispose() Called when Dispose() is called allowing to release unmanaged resources. Declaration protected override void OnDispose() Overrides UGMaterial.OnDispose() OnRemoveMaterialProperty(MaterialProperty) Called whenever AddMaterialProperty(MaterialID, MaterialProperty) request to remove a MaterialProperty from this material. Declaration protected override void OnRemoveMaterialProperty(MaterialProperty materialProperty) Parameters Type Name Description MaterialProperty materialProperty Property to remove. Overrides UGMaterial.OnRemoveMaterialProperty(MaterialProperty)"
  },
  "api/Unity.Geospatial.Streaming.UGSimpleSceneObserver.html": {
    "href": "api/Unity.Geospatial.Streaming.UGSimpleSceneObserver.html",
    "title": "Class UGSimpleSceneObserver | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGSimpleSceneObserver The Simple Scene Observer is a Unity workflow agnostic scene observer which is completed by a Unity workflow dependant implementation. For example, the completes this class' implementation by converting the Unity Camera and Unity Transform properties and members into the abstracted struct. Inheritance Object UGProcessingNode UGSceneObserver UGSimpleSceneObserver Inherited Members UGSceneObserver.m_DetailOutputs UGSceneObserver.DetailOutputCount UGSceneObserver.GetDetailOutput(Int32) UGProcessingNode.IsIdle UGProcessingNode.DataAvailabilityStatus UGProcessingNode.GetDataAvailabilityStatus(UGProcessingNode.NodeOutput) UGProcessingNode.TaskManager UGProcessingNode.InputConnections UGProcessingNode.OutputConnections UGProcessingNode.SetTaskManager(ITaskManager) UGProcessingNode.Connect<T>(UGProcessingNode.NodeOutput<T>, UGProcessingNode.NodeInput<T>) Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class UGSimpleSceneObserver : UGSceneObserver, IDisposable Constructors UGSimpleSceneObserver(UGSimpleSceneObserver.IImplementation) Default constructor. Declaration public UGSimpleSceneObserver(UGSimpleSceneObserver.IImplementation implementation) Parameters Type Name Description UGSimpleSceneObserver.IImplementation implementation Allow to convert an UGSceneObserver to a DetailObserverData instance. Properties IsProcessing Implementation of IsProcessing . Declaration protected override bool IsProcessing { get; } Property Value Type Description Boolean Overrides UGProcessingNode.IsProcessing ScheduleMainThread Implementation of ScheduleMainThread . Declaration public override bool ScheduleMainThread { get; } Property Value Type Description Boolean Overrides UGProcessingNode.ScheduleMainThread Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public override void Dispose() Overrides UGProcessingNode.Dispose() MainThreadProcess() Implementation of MainThreadProcess() . Declaration public override void MainThreadProcess() Overrides UGProcessingNode.MainThreadProcess() MainThreadUpKeep() Implementation of MainThreadUpKeep() . Declaration public override void MainThreadUpKeep() Overrides UGProcessingNode.MainThreadUpKeep()"
  },
  "api/Unity.Geospatial.Streaming.UGSimpleSceneObserver.IImplementation.html": {
    "href": "api/Unity.Geospatial.Streaming.UGSimpleSceneObserver.IImplementation.html",
    "title": "Interface UGSimpleSceneObserver.IImplementation | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface UGSimpleSceneObserver.IImplementation Allow to convert an UGSceneObserver to a DetailObserverData instance. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public interface IImplementation Methods GetDetailObserverData() Method used to convert the UGSimpleSceneObserver instance to a DetailObserverData . Declaration DetailObserverData GetDetailObserverData() Returns Type Description DetailObserverData The necessary data to calculate the geometric error of a geometry."
  },
  "api/Unity.Geospatial.Streaming.UGSkyboxBehaviour.html": {
    "href": "api/Unity.Geospatial.Streaming.UGSkyboxBehaviour.html",
    "title": "Class UGSkyboxBehaviour | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGSkyboxBehaviour The UGSkybox sets and controls a spherical skybox shader such that it conforms with the geoid being displayed. Inheritance Object Object Component Behaviour MonoBehaviour UGSkyboxBehaviour Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) MonoBehaviour.StartCoroutine(String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) UnityEngine.Component.GetComponentInParent(System.Type, System.Boolean) Component.GetComponentInParent(Type) UnityEngine.Component.GetComponentInParent<T>(System.Boolean) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) Component.SendMessageUpwards(String, Object) Component.SendMessageUpwards(String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) Component.BroadcastMessage(String, Object) Component.BroadcastMessage(String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Component.rigidbody Component.rigidbody2D Component.camera Component.light Component.animation Component.constantForce Component.renderer Component.audio Component.networkView Component.collider Component.collider2D Component.hingeJoint Component.particleSystem Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax [RequireComponent(typeof(HPTransform))] public class UGSkyboxBehaviour : MonoBehaviour Fields planetRadius The radius of the planet used by the skybox. Default is 6.3e6 to match earth's radius. This value is only passed at initialization and has no effect after start. Declaration public float planetRadius Field Value Type Description Single skybox The material it should use as the skybox which is automatically populated. upon creation in the editor. The available skybox materials are located at: com.unity.geospatial.streaming / Runtime / Assets / Materials / Skybox Declaration public Material skybox Field Value Type Description Material"
  },
  "api/Unity.Geospatial.Streaming.UGSystem.Configuration.html": {
    "href": "api/Unity.Geospatial.Streaming.UGSystem.Configuration.html",
    "title": "Struct UGSystem.Configuration | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct UGSystem.Configuration UGSystem configuration used when creating a new UGSystem instance. Allows to create UGSystem on the fly and also makes the serialization easier. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public struct Configuration Fields AllowMultithreading Allow the UGSystem to run tasks on multiple threads. Leave this on for most platforms but turn off for platforms that do not support threading such as WebGL. Declaration public bool AllowMultithreading Field Value Type Description Boolean DataSources This is the list of Geospatial layers that will be streamed. See UGDataSource for details as to the layer's configuration. Declaration public UGDataSource[] DataSources Field Value Type Description UGDataSource [] MainThreadTimeLimitMs This is the time, in milliseconds, that the UG System is allowed to use on the main thread. As much as possible, the Geospatial Framework tries to offload as much of the CPU intensive tasks to threads populated onto the job system. However, some action need to be performed by the main thread such as creating GameObjects and some Unity render objects. These main thread actions are queued up by the other threads, each frame, a time-slot of the specified duration is allocated to perform them. If the time used by the main thread exceeds the specified duration, excess actions will be postponed to the next frame. It is normal and expected that this time limit be exceeded. It defines a cut-off as to when an action can be started. There is no predictive logic as to how long a task might take. Therefore if the last task was started at 9ms and took 8ms, the allocated time would expand to 17ms. Setting this parameter to 0 will cause only a single action to be performed each frame. Declaration public float MainThreadTimeLimitMs Field Value Type Description Single MaterialFactory The material factory allows the UG System to take function with any render pipeline, provided that the appropriate material factory has been created and has been assigned. The Unity Geospatial Framework comes with material factories for both the Built-in render pipeline as well as the Universal Render Pipeline. Declaration public UGMaterialFactory MaterialFactory Field Value Type Description UGMaterialFactory MaximumSimultaneousContentRequests This is the amount of files that will be loaded simultaneously. If the limit has been reached, items part of the queue needs to be completed before new ones can be added. Declaration public int MaximumSimultaneousContentRequests Field Value Type Description Int32 Remarks The higher the value, faster execution time you will get. But if the value is too high, slower it will get since the system will not be able to adapt when UGSceneObserver are in movement. If the value is too low, it will take more time to get a higher resolution, but you will gain reaction speed. Modifiers This is the modifier stack. Modifiers are applied to the streamed data in the order they are set in this list, from 0 to last. Declaration public UGModifier[] Modifiers Field Value Type Description UGModifier [] Presenters These are the presenters which will convert the streamed geometry into actual GameObjects . Most configurations will only require a single presenter but applications with multiple cameras or applications where the source data is not normalized in space (think multiple planets or non-geolocated dataset) may require multiple presenters. Declaration public UGPresenter[] Presenters Field Value Type Description UGPresenter [] SceneObservers Scene observers determine which parts of the universe are streamed into the scene. Examples of scene observers are cameras, bounding boxes, bounding spheres, etc. Declaration public UGSceneObserver[] SceneObservers Field Value Type Description UGSceneObserver [] StreamingMode The streaming mode is an advanced feature that allows the UGSystem to trade off impact on the simulation's framerate in exchange for faster streaming. Declaration public UGSystem.StreamingModes StreamingMode Field Value Type Description UGSystem.StreamingModes Properties Default Construct a new UGSystem.Configuration instance with the default values. Declaration public static readonly UGSystem.Configuration Default { get; } Property Value Type Description UGSystem.Configuration"
  },
  "api/Unity.Geospatial.Streaming.UGSystem.html": {
    "href": "api/Unity.Geospatial.Streaming.UGSystem.html",
    "title": "Class UGSystem | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGSystem Serves as the center piece to the Unity Geospatial Framework. Responsible to build GameObject type objects (in contrast with DOTS type objects) During runtime, this class will instantiate a number of other GameObject which will serve to render the environment as it is streamed in from various sources. Inheritance Object UGSystem Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class UGSystem : IDisposable Constructors UGSystem(ref UGSystem.Configuration) Default constructor. Declaration public UGSystem(ref UGSystem.Configuration configuration) Parameters Type Name Description UGSystem.Configuration configuration Apply the values from this configuration to the newly created UGSystem . Exceptions Type Condition InvalidOperationException Raised where the given configuration has invalid values. Properties ProcessingNodes Nodes to be evaluated by the Process Graph on each frame. Declaration public IEnumerable<UGProcessingNode> ProcessingNodes { get; } Property Value Type Description IEnumerable < UGProcessingNode > StreamingMode The streaming mode is an advanced feature that allows the UGSystem to trade off impact on the simulation's framerate in exchange for faster streaming. Declaration public UGSystem.StreamingModes StreamingMode { get; } Property Value Type Description UGSystem.StreamingModes Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. This will make sure all running main threads are completed and processing nodes are disposed. Declaration public void Dispose() Finalize() Destructor called by the garbage collector. Declaration protected void Finalize() ProcessFrame() Evaluate each UGProcessingNode part of ProcessingNodes . Declaration public void ProcessFrame() Events OnBeginProcessing Event called when a UGProcessingNode starts to be processed and none where previously. Declaration public event Action<SystemProcessingEventArgs> OnBeginProcessing Event Type Type Description Action < SystemProcessingEventArgs > OnEndProcessing Event called when all UGProcessingNode got executed and no more are pending to be executed. Declaration public event Action<SystemProcessingEventArgs> OnEndProcessing Event Type Type Description Action < SystemProcessingEventArgs >"
  },
  "api/Unity.Geospatial.Streaming.UGSystem.StreamingModes.html": {
    "href": "api/Unity.Geospatial.Streaming.UGSystem.StreamingModes.html",
    "title": "Enum UGSystem.StreamingModes | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Enum UGSystem.StreamingModes The streaming mode is an advanced feature that allows the UGSystem to trade off impact on the simulation's framerate in exchange for faster streaming. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public enum StreamingModes Fields Name Description MinimalImpact The frame rate is the priority. When processing, if a UGCommandBuffer is taking too much time, it's completion will be delayed to the next frame. HoldFrame The simulation is the priority. UGCommandBuffer must be completed before moving to the next frame."
  },
  "api/Unity.Geospatial.Streaming.UGSystemBehaviour.html": {
    "href": "api/Unity.Geospatial.Streaming.UGSystemBehaviour.html",
    "title": "Class UGSystemBehaviour | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGSystemBehaviour The UGSystemBehaviour is a relatively thin MonoBehaviour wrapper on the underlying UGSystem class, which serves as the center piece to the Unity Geospatial Framework. It is a facade type interface which is responsible for communicating with the underlying UGSystem as well as building GameObject type objects (in contrast with DOTS type objects) During runtime, this class will instantiate a number of other GameObject which will serve to render the environment as it is streamed in from various sources. Inheritance Object Object Component Behaviour MonoBehaviour UGSystemBehaviour Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(String, Single) MonoBehaviour.InvokeRepeating(String, Single, Single) MonoBehaviour.CancelInvoke(String) MonoBehaviour.IsInvoking(String) MonoBehaviour.StartCoroutine(String) MonoBehaviour.StartCoroutine(String, Object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(String) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(Object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, Component) Component.TryGetComponent<T>(T) Component.GetComponent(String) Component.GetComponentInChildren(Type, Boolean) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(Boolean) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, Boolean) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(Boolean) Component.GetComponentsInChildren<T>(Boolean, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) UnityEngine.Component.GetComponentInParent(System.Type, System.Boolean) Component.GetComponentInParent(Type) UnityEngine.Component.GetComponentInParent<T>(System.Boolean) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, Boolean) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(Boolean) Component.GetComponentsInParent<T>(Boolean, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(String) Component.SendMessageUpwards(String, Object, SendMessageOptions) Component.SendMessageUpwards(String, Object) Component.SendMessageUpwards(String) Component.SendMessageUpwards(String, SendMessageOptions) Component.SendMessage(String, Object) Component.SendMessage(String) Component.SendMessage(String, Object, SendMessageOptions) Component.SendMessage(String, SendMessageOptions) Component.BroadcastMessage(String, Object, SendMessageOptions) Component.BroadcastMessage(String, Object) Component.BroadcastMessage(String) Component.BroadcastMessage(String, SendMessageOptions) Component.transform Component.gameObject Component.tag Component.rigidbody Component.rigidbody2D Component.camera Component.light Component.animation Component.constantForce Component.renderer Component.audio Component.networkView Component.collider Component.collider2D Component.hingeJoint Component.particleSystem Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class UGSystemBehaviour : MonoBehaviour Fields AllowMultithreading Allow the UGSystem to run tasks on multiple threads. Leave this on for most platforms but turn off for platforms that do not support threading such as WebGL. Declaration public bool AllowMultithreading Field Value Type Description Boolean dataSources This is the list of Geospatial layers that will be streamed. See UGDataSource for details as to the layer's configuration. Declaration public List<UGDataSourceObject> dataSources Field Value Type Description List < UGDataSourceObject > MainThreadTimeLimitMS This is the time, in milliseconds, that the UG System is allowed to use on the main thread. As much as possible, the Geospatial Framework tries to offload as much of the CPU intensive tasks to threads populated onto the job system. However, some action need to be performed by the main thread such as creating GameObjects and some Unity render objects. These main thread actions are queued up by the other threads, each frame, a time-slot of the specified duration is allocated to perform them. If the time used by the main thread exceeds the specified duration, excess actions will be postponed to the next frame. It is normal and expected that this time limit be exceeded. It defines a cut-off as to when an action can be started. There is no predictive logic as to how long a task might take. Therefore if the last task was started at 9ms and took 8ms, the allocated time would expand to 17ms. Setting this parameter to 0 will cause only a single action to be performed each frame. Declaration public float MainThreadTimeLimitMS Field Value Type Description Single MaterialFactory The material factory allows the UG System to take function with any render pipeline, provided that the appropriate material factory has been created and has been assigned. The Unity Geospatial Framework comes with material factories for both the Built-in render pipeline as well as the Universal Render Pipeline. Declaration public UGMaterialFactoryObject MaterialFactory Field Value Type Description UGMaterialFactoryObject MaximumSimultaneousContentRequests This is the amount of files that will be loaded simultaneously. If the limit has been reached, items part of the queue needs to be completed before new ones can be added. Declaration public int MaximumSimultaneousContentRequests Field Value Type Description Int32 Remarks The higher the value, faster execution time you will get. But if the value is too high, slower it will get since the system will not be able to adapt when UGSceneObserver are in movement. If the value is too low, it will take more time to get a higher resolution, but you will gain reaction speed. modifiers This is the modifier stack. Modifiers are applied to the streamed data in the order they are set in this list, from 0 to last. Declaration public List<UGModifierBehaviour> modifiers Field Value Type Description List < UGModifierBehaviour > planetRadius The approximate radius of the planet. By default, this setting is configured such that it matches the radius of the earth and can be fetched by various scripts for things like adjusting clipping planes based off of the camera's altitude or configuring the skybox's appearance. Declaration public float planetRadius Field Value Type Description Single presenters These are the presenters which will convert the streamed geometry into actual GameObjects . Most configurations will only require a single presenter but applications with multiple cameras or applications where the source data is not normalized in space (think multiple planets or non-geolocated dataset) may require multiple presenters. Declaration public List<UGSystemBehaviour.PresenterConfiguration> presenters Field Value Type Description List < UGSystemBehaviour.PresenterConfiguration > sceneObservers Scene observers determine which parts of the universe are streamed into the scene. Examples of scene observers are cameras, bounding boxes, bounding spheres, etc. Declaration public List<UGSceneObserverBehaviour> sceneObservers Field Value Type Description List < UGSceneObserverBehaviour > streamingMode The streaming mode is an advanced feature that allows the UGSystemBehaviour to trade off impact on the simulation's framerate in exchange for faster streaming. Declaration public UGSystem.StreamingModes streamingMode Field Value Type Description UGSystem.StreamingModes Properties InitializedDataSources UGDataSource instances available for streaming content. Declaration public UGDataSource[] InitializedDataSources { get; } Property Value Type Description UGDataSource [] Methods GetDataSourceIDs(Int32) Get an langword_csharp_Array of UGDataSourceID based on the InitializedDataSources . Declaration public List<UGDataSourceID> GetDataSourceIDs(int dataSourceMask) Parameters Type Name Description Int32 dataSourceMask The selected UGDataSource by the UGPresenter . Returns Type Description List < UGDataSourceID > The langword_csharp_Array of UGDataSourceID representing the expected UGDataSource to be loaded. Events OnAllocateInstance langword_csharp_Action to be executed when ever a new NodeContent get loaded in memory. Declaration public event Action<int, InstanceID, GameObject> OnAllocateInstance Event Type Type Description Action < Int32 , InstanceID , GameObject > Id of the UGBehaviourPresenter part of this system triggering the event. presenter New instance id being created. instance Game object linked with instance. gameObject OnBeginProcessing Event called when a UGProcessingNode starts to be processed and none where previously. Declaration public event Action<SystemProcessingEventArgs> OnBeginProcessing Event Type Type Description Action < SystemProcessingEventArgs > OnDisposeInstance langword_csharp_Action to be executed when ever a NodeContent loaded in memory get disposed of. Declaration public event Action<int, InstanceID, GameObject> OnDisposeInstance Event Type Type Description Action < Int32 , InstanceID , GameObject > Id of the UGBehaviourPresenter part of this system triggering the event. presenter New instance id being disposed. instance Game object linked with instance. gameObject OnEndProcessing Event called when all UGProcessingNode got executed and no more are pending to be executed. Declaration public event Action<SystemProcessingEventArgs> OnEndProcessing Event Type Type Description Action < SystemProcessingEventArgs > OnUpdateInstanceVisibility langword_csharp_Action to be executed when ever a NodeContent visibility state changes. Declaration public event Action<int, InstanceID, GameObject, bool> OnUpdateInstanceVisibility Event Type Type Description Action < Int32 , InstanceID , GameObject , Boolean > Id of the UGBehaviourPresenter part of this system triggering the event. presenter New instance id being updated. instance Game object linked with instance. gameObject true if the instance is visible and loaded; false otherwise. isVisible"
  },
  "api/Unity.Geospatial.Streaming.UGSystemBehaviour.PresenterConfiguration.html": {
    "href": "api/Unity.Geospatial.Streaming.UGSystemBehaviour.PresenterConfiguration.html",
    "title": "Struct UGSystemBehaviour.PresenterConfiguration | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct UGSystemBehaviour.PresenterConfiguration Allow to serialize a single UGBehaviourPresenter instance. Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax [Serializable] public struct PresenterConfiguration Fields dataSources All the UGDataSourceObject to load. Declaration public int dataSources Field Value Type Description Int32 outputLayer Index of the Layer this presenter is associated with. Declaration public int outputLayer Field Value Type Description Int32 outputRoot Parent Transform of the presenter. Declaration public Transform outputRoot Field Value Type Description Transform"
  },
  "api/Unity.Geospatial.Streaming.UGTextureSettings.html": {
    "href": "api/Unity.Geospatial.Streaming.UGTextureSettings.html",
    "title": "Struct UGTextureSettings | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct UGTextureSettings Global options to apply when loading textures . Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public struct UGTextureSettings Constructors UGTextureSettings(Boolean, FilterMode, Int32) Default constructor. Declaration public UGTextureSettings(bool generateMipMaps, FilterMode defaultFilterMode, int anisotropicFilterLevel) Parameters Type Name Description Boolean generateMipMaps true to enable mip map generation.; false otherwise. FilterMode defaultFilterMode Default filtering mode for textures that have no such specification in the dataset. Int32 anisotropicFilterLevel Specify the anisotropic filtering level for textures Fields anisotropicFilterLevel This property defines the anisotropic filtering level for textures. Declaration public int anisotropicFilterLevel Field Value Type Description Int32 defaultFilterMode This property defines the default filtering mode for textures that have no such specification in the dataset. Declaration public FilterMode defaultFilterMode Field Value Type Description FilterMode generateMipMaps Set this property to true to enable mip map generation. Declaration public bool generateMipMaps Field Value Type Description Boolean"
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.BoundingVolumeHierarchy-1.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.BoundingVolumeHierarchy-1.html",
    "title": "Class BoundingVolumeHierarchy<T> | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class BoundingVolumeHierarchy<T> The BoundingVolumeHierarchy is one of the central classes which make up the UniversalDecoder. It is the memory representation of the bounding volume hierarchy structure that makes up HLODed streaming formats such as 3DTiles and many terrain formats. Each node has a bounding volume which is garanteed to contain all of its children, thus making it very efficient to tranverse and determine which nodes need to be visible as a function of any given set of observers. Inheritance Object BoundingVolumeHierarchy<T> Implements IEditHierarchyNodes IGetNodeData IEditCurrentState IExploreHierarchyNodes Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public class BoundingVolumeHierarchy<T> : IEditHierarchyNodes, IEditTargetState, IGetNodeData, IEditCurrentState, IScheduleNodeChanges<T>, IExploreHierarchyNodes where T : struct Type Parameters Name Description T The type passed here is the scheduler cache, which can be specified independantly of the rest of the BoundingVolumeHierarchy's implmementation. Constructors BoundingVolumeHierarchy() Construct a new BoundingVolumeHierarchy Declaration public BoundingVolumeHierarchy() Properties RootNode Implementation of RootNode Declaration public NodeId RootNode { get; } Property Value Type Description NodeId Methods AddNode(NodeId, NodeData, NodeContent) Implementation of AddNode(NodeId, NodeData, NodeContent) Declaration public NodeId AddNode(NodeId parent, NodeData data, NodeContent content) Parameters Type Name Description NodeId parent The node which should be the new node's parent. NodeData data The data that this node should contain. NodeContent content Content of the data to load when requested. Returns Type Description NodeId GetAlwaysExpandFlag(NodeId) Implementation of Declaration public bool GetAlwaysExpandFlag(NodeId nodeId) Parameters Type Name Description NodeId nodeId Returns Type Description Boolean GetBounds(NodeId) Implementation of GetBounds(NodeId) Declaration public DoubleBounds GetBounds(NodeId nodeId) Parameters Type Name Description NodeId nodeId Returns Type Description Unity.Geospatial.HighPrecision.DoubleBounds GetChildren(NodeId) Get children of a node while generating garbage. This method should be avoided. Instead, use GetChildren(NodeId, List<NodeId>) This way, the list can be recycled to avoid garbage collection. This method is useful for unit testing and debugging. Declaration public List<NodeId> GetChildren(NodeId nodeId) Parameters Type Name Description NodeId nodeId Returns Type Description List < NodeId > GetChildren(NodeId, List<NodeId>) Implementation of GetChildren(NodeId, List<NodeId>) Declaration public void GetChildren(NodeId nodeId, List<NodeId> result) Parameters Type Name Description NodeId nodeId List < NodeId > result GetCurrentState(NodeId) Implementation of GetCurrentState(NodeId) Declaration public CurrentState GetCurrentState(NodeId nodeId) Parameters Type Name Description NodeId nodeId Returns Type Description CurrentState GetErrorSpecification(NodeId) Implementation of GetErrorSpecification(NodeId) Declaration public float GetErrorSpecification(NodeId nodeId) Parameters Type Name Description NodeId nodeId Returns Type Description Single GetGeometricError(NodeId) Implementation of GetGeometricError(NodeId) Declaration public float GetGeometricError(NodeId nodeId) Parameters Type Name Description NodeId nodeId Returns Type Description Single GetNodeContent(NodeId) Implementation of GetNodeContent(NodeId) Declaration public NodeContent GetNodeContent(NodeId nodeId) Parameters Type Name Description NodeId nodeId Returns Type Description NodeContent GetParent(NodeId) Implementation of GetParent(NodeId) Declaration public NodeId GetParent(NodeId nodeId) Parameters Type Name Description NodeId nodeId Returns Type Description NodeId GetRefinementMode(NodeId) Implementation of Unity.Geospatial.Streaming.UniversalDecoder.IScheduleNodeChanges`1.GetRefinementMode(Unity.Geospatial.Streaming.UniversalDecoder.NodeId) Declaration public RefinementMode GetRefinementMode(NodeId nodeId) Parameters Type Name Description NodeId nodeId Returns Type Description RefinementMode GetSchedulerCache(NodeId) Implementation of Unity.Geospatial.Streaming.UniversalDecoder.IScheduleNodeChanges`1.GetSchedulerCache(Unity.Geospatial.Streaming.UniversalDecoder.NodeId) Declaration public T GetSchedulerCache(NodeId nodeId) Parameters Type Name Description NodeId nodeId Returns Type Description T GetTargetState(NodeId) Implementation of Unity.Geospatial.Streaming.UniversalDecoder.IEditTargetState.GetTargetState(Unity.Geospatial.Streaming.UniversalDecoder.NodeId) Declaration public TargetState GetTargetState(NodeId nodeId) Parameters Type Name Description NodeId nodeId Returns Type Description TargetState HasNode(NodeId) Implementation of HasNode(NodeId) Declaration public bool HasNode(NodeId nodeId) Parameters Type Name Description NodeId nodeId Returns Type Description Boolean NodeHasChildren(NodeId) Implementation of NodeHasChildren(NodeId) Declaration public bool NodeHasChildren(NodeId nodeId) Parameters Type Name Description NodeId nodeId Returns Type Description Boolean RemoveNode(NodeId) Implementation of RemoveNode(NodeId) Declaration public void RemoveNode(NodeId nodeId) Parameters Type Name Description NodeId nodeId The NodeId of the node to be removed. SetCurrentState(NodeId, CurrentState) Implementation of SetCurrentState(NodeId, CurrentState) Declaration public void SetCurrentState(NodeId nodeId, CurrentState currentState) Parameters Type Name Description NodeId nodeId CurrentState currentState SetErrorSpecification(NodeId, Single) Implementation of Unity.Geospatial.Streaming.UniversalDecoder.IEditTargetState.SetErrorSpecification(Unity.Geospatial.Streaming.UniversalDecoder.NodeId,System.Single) Declaration public void SetErrorSpecification(NodeId nodeId, float errorSpecification) Parameters Type Name Description NodeId nodeId Single errorSpecification SetSchedulerCache(NodeId, T) Implementation of Unity.Geospatial.Streaming.UniversalDecoder.IScheduleNodeChanges`1.SetSchedulerCache(Unity.Geospatial.Streaming.UniversalDecoder.NodeId,`0) Declaration public void SetSchedulerCache(NodeId nodeId, T cache) Parameters Type Name Description NodeId nodeId T cache SetTargetState(NodeId, TargetState) Implementation of Unity.Geospatial.Streaming.UniversalDecoder.IEditTargetState.SetTargetState(Unity.Geospatial.Streaming.UniversalDecoder.NodeId,Unity.Geospatial.Streaming.UniversalDecoder.TargetState) Declaration public void SetTargetState(NodeId nodeId, TargetState targetState) Parameters Type Name Description NodeId nodeId TargetState targetState UpdateNode(NodeId, NodeData) Implementation of UpdateNode(NodeId, NodeData) Declaration public void UpdateNode(NodeId nodeId, NodeData data) Parameters Type Name Description NodeId nodeId The node to update. NodeData data The data that this node should contain. Implements IEditHierarchyNodes IGetNodeData IEditCurrentState IExploreHierarchyNodes"
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.ContentType.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.ContentType.html",
    "title": "Struct ContentType | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct ContentType The content type is used to figure out which NodeContent classes are associated to which ContentLoaders. Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public readonly struct ContentType : IEquatable<ContentType> Constructors ContentType(Int32) Default constructor. This should not be used directly and should really only be used by the UniqueContentTypeGenerator. Declaration public ContentType(int id) Parameters Type Name Description Int32 id The unique id to be used for the given content type. Fields EmptyNode A content type reserved for empty nodes in the BVH. Declaration public static readonly ContentType EmptyNode Field Value Type Description ContentType Methods Equals(Object) See if this is equivalent to another object. Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj The other object Returns Type Description Boolean True if the other object is a ContentType class and has the same id. Overrides ValueType.Equals(Object) Equals(ContentType) See if two content type classes are equivalent. Declaration public readonly bool Equals(ContentType obj) Parameters Type Name Description ContentType obj The other content type. Returns Type Description Boolean True if they both have the same id. GetHashCode() Obtain the hash of the ContentType. Essentially returns the id. Declaration public override readonly int GetHashCode() Returns Type Description Int32 The hash of the ContentType. Overrides ValueType.GetHashCode()"
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.CurrentState.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.CurrentState.html",
    "title": "Struct CurrentState | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct CurrentState This struct is used to determine the current state of a node in the BoundingVolumeHierarchy. It consists of a bit field which is used to determine loaded and visibility states. Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public readonly struct CurrentState Constructors CurrentState(Boolean, Boolean) This is a less efficient constructor that allows direct conversion of boolean values into the state flags. It is less error-prone that the other proposed constructor. Declaration public CurrentState(bool loaded, bool visible = false) Parameters Type Name Description Boolean loaded Whether or not the state is loaded. Boolean visible Whether or not the state is visible CurrentState(Byte) This is the most efficient constructor of the CurrentState and should be prefered for creating fixed values. See example for usage. Declaration public CurrentState(byte state) Parameters Type Name Description Byte state The state with which to initialize the CurrentState struct. Examples new CurrentState(CurrentState.Loaded | CurrentState.Hidden) Fields Hidden Can be used to initialize the current state Declaration public const byte Hidden = 0 Field Value Type Description Byte Examples new CurrentState(CurrentState.Unloaded | CurrentState.Hidden); Loaded Can be used to initialize the current state Declaration public const byte Loaded = 1 Field Value Type Description Byte Examples new CurrentState(CurrentState.Loaded | CurrentState.Hidden); Unloaded Can be used to initialize the current state Declaration public const byte Unloaded = 0 Field Value Type Description Byte Examples new CurrentState(CurrentState.Unloaded | CurrentState.Hidden); Visible Can be used to initialize the current state Declaration public const byte Visible = 2 Field Value Type Description Byte Examples new CurrentState(CurrentState.Loaded | CurrentState.Visible); Properties IsHidden Returns whether the state is hidden, independently from the loaded state. Declaration public readonly bool IsHidden { get; } Property Value Type Description Boolean IsLoaded Returns whether the state is loaded, independently from the visibility state. Declaration public readonly bool IsLoaded { get; } Property Value Type Description Boolean IsUnloaded Returns whether the state is unloaded, independently from the visibility state. Declaration public readonly bool IsUnloaded { get; } Property Value Type Description Boolean IsVisible Returns whether the state is visibile, independently from the loaded state. Declaration public readonly bool IsVisible { get; } Property Value Type Description Boolean State The internal state of the CurrentState. It is public in order to enable direct bit-wise computations on the bit field if necessary. Declaration public readonly byte State { get; } Property Value Type Description Byte Methods SetHidden() Take the current state, clear the visible flag and return the modified state. Declaration public readonly CurrentState SetHidden() Returns Type Description CurrentState The modified state SetLoaded() Take the current state, set the loaded flag and return the modified state. Declaration public readonly CurrentState SetLoaded() Returns Type Description CurrentState The modified state SetUnloaded() Take the current state, clear the loaded flag and return the modified state. Declaration public readonly CurrentState SetUnloaded() Returns Type Description CurrentState The modified state SetVisible() Take the current state, set the visible flag and return the modified state. Declaration public readonly CurrentState SetVisible() Returns Type Description CurrentState The modified state ToString() Returns a string representation of the current state. Declaration public override readonly string ToString() Returns Type Description String A string representation of the current state. Overrides ValueType.ToString()"
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.FileType.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.FileType.html",
    "title": "Class FileType | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class FileType The file type is used to figure out the content type of a file based on its path extension or magic number. Inheritance Object FileType Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public sealed class FileType : IEquatable<FileType> Remarks This does not allow to figure out the INodeContentLoader to use since multiple INodeContentLoader uses files of the same type, for example, json. Constructors FileType(String, IEnumerable<String>, IEnumerable<Byte[]>) Default constructor. This new file type will be registered after creation. Declaration public FileType(string name, IEnumerable<string> extensions, IEnumerable<byte[]> magicNumbers = null) Parameters Type Name Description String name Name used when converting to string. IEnumerable < String > extensions List of file path extensions associated with the file format. IEnumerable < Byte []> magicNumbers List of magic numbers associated with the file format. Fields Glb Binary GL Transmission Format. Declaration public static readonly FileType Glb Field Value Type Description FileType Gltf GL Transmission Format. Declaration public static readonly FileType Gltf Field Value Type Description FileType Jpeg JPEG IMAGE Format. Declaration public static readonly FileType Jpeg Field Value Type Description FileType Json JavaScript Object Notation format. Declaration public static readonly FileType Json Field Value Type Description FileType Ogc3dTilesB3dm OGC 3d Tiles Batch 3D Model format. Declaration public static readonly FileType Ogc3dTilesB3dm Field Value Type Description FileType Ogc3dTilesCmpt OGC 3d Tiles Composite format. Declaration public static readonly FileType Ogc3dTilesCmpt Field Value Type Description FileType Ogc3dTilesI3dm OGC 3d Tiles Instanced 3D Model format. Declaration public static readonly FileType Ogc3dTilesI3dm Field Value Type Description FileType Ogc3dTilesPnts OGC 3d Tiles Point Cloud format. Declaration public static readonly FileType Ogc3dTilesPnts Field Value Type Description FileType TmsTerrain TMS (Terrain Management System) terrain format. Declaration public static readonly FileType TmsTerrain Field Value Type Description FileType Properties Extensions File extensions associated with this file type. Declaration public IReadOnlyList<string> Extensions { get; } Property Value Type Description IReadOnlyList < String > Remarks This can be an empty list. MagicNumbers List of magic numbers associated with the file format. Declaration public IReadOnlyList<byte[]> MagicNumbers { get; } Property Value Type Description IReadOnlyList < Byte []> Remarks This can be an empty list. Name Name of this instance allowing to easily differentiate it from others without comparing all of its values. Declaration public string Name { get; } Property Value Type Description String Methods CreateAndRegister(String, Byte[]) Create a new FileType instance and Register() it. The name of the file type will be the same as the specified file extension. Declaration public static FileType CreateAndRegister(string extension, params byte[] magicNumber) Parameters Type Name Description String extension List of file path extensions associated with the file format. Byte [] magicNumber The magic number associated with the file format. Returns Type Description FileType The newly created FileType instance. CreateAndRegister(String, IEnumerable<Char>) Create a new FileType instance and Register() it. The name of the file type will be the same as the specified file extension. Declaration public static FileType CreateAndRegister(string extension, IEnumerable<char> magicNumber) Parameters Type Name Description String extension List of file path extensions associated with the file format. IEnumerable < Char > magicNumber The magic number as a char array when the header can be considered as UTF8 encoded. Returns Type Description FileType The newly created FileType instance. CreateAndRegister(String, IEnumerable<String>, Byte[]) Create a new FileType instance and Register() it. Declaration public static FileType CreateAndRegister(string name, IEnumerable<string> extensions, params byte[] magicNumber) Parameters Type Name Description String name Name used when converting to string. IEnumerable < String > extensions List of file path extensions associated with the file format. Byte [] magicNumber The magic number associated with the file format. Returns Type Description FileType The newly created FileType instance. CreateAndRegister(String, IEnumerable<String>, IEnumerable<Byte[]>) Create a new FileType instance and Register() it. Declaration public static FileType CreateAndRegister(string name, IEnumerable<string> extensions, IEnumerable<byte[]> magicNumbers = null) Parameters Type Name Description String name Name used when converting to string. IEnumerable < String > extensions List of file path extensions associated with the file format. IEnumerable < Byte []> magicNumbers List of magic numbers associated with the file format. Returns Type Description FileType The newly created FileType instance. CreateAndRegister(String, IEnumerable<String>, IEnumerable<Char[]>) Create a new FileType instance and Register() it. Declaration public static FileType CreateAndRegister(string name, IEnumerable<string> extensions, IEnumerable<char[]> magicNumbers) Parameters Type Name Description String name Name used when converting to string. IEnumerable < String > extensions List of file path extensions associated with the file format. IEnumerable < Char []> magicNumbers List of magic numbers as a char array when the header can be considered as UTF8 encoded. Returns Type Description FileType The newly created FileType instance. CreateAndRegister(String, IEnumerable<String>, IEnumerable<Char>) Create a new FileType instance and Register() it. Declaration public static FileType CreateAndRegister(string name, IEnumerable<string> extensions, IEnumerable<char> magicNumber) Parameters Type Name Description String name Name used when converting to string. IEnumerable < String > extensions List of file path extensions associated with the file format. IEnumerable < Char > magicNumber The magic number as a char array when the header can be considered as UTF8 encoded. Returns Type Description FileType The newly created FileType instance. CreateAndRegister(String, IEnumerable<String>, IEnumerable<String>) Create a new FileType instance and Register() it. Declaration public static FileType CreateAndRegister(string name, IEnumerable<string> extensions, IEnumerable<string> magicNumbers) Parameters Type Name Description String name Name used when converting to string. IEnumerable < String > extensions List of file path extensions associated with the file format. IEnumerable < String > magicNumbers The magic numbers as a string when the header can be considered as UTF8 encoded. Returns Type Description FileType The newly created FileType instance. CreateAndRegister(String, IEnumerable<String>, String) Create a new FileType instance and Register() it. Declaration public static FileType CreateAndRegister(string name, IEnumerable<string> extensions, string magicNumber) Parameters Type Name Description String name Name used when converting to string. IEnumerable < String > extensions List of file path extensions associated with the file format. String magicNumber The magic number as a string when the header can be considered as UTF8 encoded. Returns Type Description FileType The newly created FileType instance. CreateAndRegister(String, String) Create a new FileType instance and Register() it. The name of the file type will be the same as the specified file extension. Declaration public static FileType CreateAndRegister(string extension, string magicNumber) Parameters Type Name Description String extension List of file path extensions associated with the file format. String magicNumber The magic number as a string when the header can be considered as UTF8 encoded. Returns Type Description FileType The newly created FileType instance. CreateAndRegister(String, String, Byte[]) Create a new FileType instance and Register() it. Declaration public static FileType CreateAndRegister(string name, string extension, params byte[] magicNumber) Parameters Type Name Description String name Name used when converting to string. String extension List of file path extensions associated with the file format. Byte [] magicNumber The magic number associated with the file format. Returns Type Description FileType The newly created FileType instance. CreateAndRegister(String, String, IEnumerable<Char>) Create a new FileType instance and Register() it. Declaration public static FileType CreateAndRegister(string name, string extension, IEnumerable<char> magicNumber) Parameters Type Name Description String name Name used when converting to string. String extension List of file path extensions associated with the file format. IEnumerable < Char > magicNumber The magic number as a char array when the header can be considered as UTF8 encoded. Returns Type Description FileType The newly created FileType instance. CreateAndRegister(String, String, String) Create a new FileType instance and Register() it. Declaration public static FileType CreateAndRegister(string name, string extension, string magicNumber) Parameters Type Name Description String name Name used when converting to string. String extension List of file path extensions associated with the file format. String magicNumber The magic number as a string when the header can be considered as UTF8 encoded. Returns Type Description FileType The newly created FileType instance. Equals(Object) See if this is equivalent to another object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The other object Returns Type Description Boolean True if the other object is a FileType class and has the same id. Overrides Object.Equals(Object) Equals(FileType) See if two FileType instances are equivalent. Declaration public bool Equals(FileType obj) Parameters Type Name Description FileType obj The other FileType . Returns Type Description Boolean true if they both are the same; false otherwise. GetByFileExtension(String) Get the FileType that match the given path based on its file extension. Declaration public static FileType GetByFileExtension(string path) Parameters Type Name Description String path File path to get the FileType from. Returns Type Description FileType The FileType matching the given file path; null if no registered FileType matches the given path . GetByMagicNumber(Byte[]) Get the FileType that match the given data header. Declaration public static FileType GetByMagicNumber(byte[] data) Parameters Type Name Description Byte [] data Data to get the FileType from. Returns Type Description FileType The FileType matching the given data ; null if no registered FileType matches the given data . GetByMagicNumber(Stream) Get the FileType that match the given stream header. Declaration public static FileType GetByMagicNumber(Stream stream) Parameters Type Name Description Stream stream Data stream to get the FileType from. Returns Type Description FileType The FileType matching the given stream ; null if no registered FileType matches the given stream . GetHashCode() Obtain the hash of the FileType. Declaration public override int GetHashCode() Returns Type Description Int32 The hash of the FileType. Overrides Object.GetHashCode() Register() Register this FileType instance allowing to execute GetByFileExtension(String) and GetByMagicNumber(Byte[]) . Declaration public void Register() ToString() Get the name of this instance. Declaration public override string ToString() Returns Type Description String The class type followed by the name of this instance. Overrides Object.ToString() Unregister() Stop searching for this FileType instance when executing GetByFileExtension(String) or GetByMagicNumber(Byte[]) . Declaration public void Unregister() Operators Equality(FileType, FileType) Validate if both FileType are the same. Declaration public static bool operator ==(FileType item1, FileType item2) Parameters Type Name Description FileType item1 First FileType to evaluate its equality. FileType item2 Second FileType to evaluate its equality. Returns Type Description Boolean true if both types represent the same FileType ; false otherwise. Inequality(FileType, FileType) Validate if both FileType aren't the same. Declaration public static bool operator !=(FileType item1, FileType item2) Parameters Type Name Description FileType item1 First FileType to evaluate its inequality. FileType item2 Second FileType to evaluate its inequality. Returns Type Description Boolean true if both types does not represent the same FileType ; false otherwise."
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.GltfContentLoader.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.GltfContentLoader.html",
    "title": "Class GltfContentLoader | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class GltfContentLoader The GLTF content loader interprets .gltf and .glb files for the content manager. Inheritance Object UriNodeContentLoader GltfContentLoader Implements INodeContentLoader Inherited Members UriNodeContentLoader.LoadNodeAsync(NodeId, NodeContent) UriNodeContentLoader.UnloadNode(NodeId) Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public class GltfContentLoader : UriNodeContentLoader, INodeContentLoader Constructors GltfContentLoader(ILoaderActions, UGDataSourceID, UGLighting, UGTextureSettings) Constructor with the adjustment matrix set to identity. Declaration public GltfContentLoader(ILoaderActions loaderActions, UGDataSourceID dataSource, UGLighting lighting, UGTextureSettings textureSettings) Parameters Type Name Description ILoaderActions loaderActions Reference to the command manager the UriLoader should publish it's output to. UGDataSourceID dataSource Unique identifier allowing to do indirect assignment. UGLighting lighting Lighting type to apply to the shading. UGTextureSettings textureSettings Texture options to apply for each imported texture. GltfContentLoader(ILoaderActions, UGDataSourceID, UGLighting, UGTextureSettings, double4x4) Default constructor. Declaration public GltfContentLoader(ILoaderActions loaderActions, UGDataSourceID dataSource, UGLighting lighting, UGTextureSettings textureSettings, double4x4 adjustmentMatrix) Parameters Type Name Description ILoaderActions loaderActions Reference to the command manager the UriLoader should publish it's output to. UGDataSourceID dataSource Unique identifier allowing to do indirect assignment. UGLighting lighting Lighting type to apply to the shading. UGTextureSettings textureSettings Texture options to apply for each imported texture. double4x4 adjustmentMatrix Each time a node is loaded, multiply its transform by this matrix allowing axis alignments when the format is not left-handed, Y-Up. Implements INodeContentLoader"
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.GltfDataSource.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.GltfDataSource.html",
    "title": "Class GltfDataSource | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class GltfDataSource Data source information required by the GltfContentLoader to decoder its content. Inheritance Object UGDataSource UniversalDecoderDataSource GltfDataSource Inherited Members UniversalDecoderDataSource.GetDecoderType() UniversalDecoderDataSource.InstantiateDecoder(UUIDGenerator, UGMaterialFactory, UGDataSource[], Int32) UGDataSource.DataSourceID Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public class GltfDataSource : UniversalDecoderDataSource Constructors GltfDataSource(String, double3, quaternion, float3, UGLighting, UGTextureSettings, UGDataSourceID) Default constructor. Declaration public GltfDataSource(string uri, double3 position, quaternion rotation, float3 scale, UGLighting lighting, UGTextureSettings textureSettings, UGDataSourceID dataSourceId) Parameters Type Name Description String uri Address of the .gltf / .glb file to decoder. double3 position Where to position the loaded data. quaternion rotation Orientation to apply after loading the file. float3 scale Resize the loaded content by this ratio by axis. UGLighting lighting Lighting type to apply to the shading. UGTextureSettings textureSettings Texture options to apply for each imported texture. UGDataSourceID dataSourceId Scriptable object associated with this instance. Properties Lighting Lighting type to apply to the shading. Declaration public UGLighting Lighting { get; } Property Value Type Description UGLighting TextureSettings Texture options to apply for each imported texture. Declaration public UGTextureSettings TextureSettings { get; } Property Value Type Description UGTextureSettings Transform Where to position, orient and resize the loaded data. Declaration public double4x4 Transform { get; } Property Value Type Description double4x4 Uri Address of the .gltf / .glb file to decoder. Declaration public string Uri { get; } Property Value Type Description String Methods InitializerDecoder(NodeContentManager) Initialize decoder by adding relevant nodes to the hierarchy and by initializing the content manager with the appropriately configured loaders. Declaration public override void InitializerDecoder(NodeContentManager contentManager) Parameters Type Name Description NodeContentManager contentManager The content manager to be initialized with this datasource Overrides UniversalDecoderDataSource.InitializerDecoder(NodeContentManager)"
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.GltfDataSourceObject.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.GltfDataSourceObject.html",
    "title": "Class GltfDataSourceObject | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class GltfDataSourceObject ScriptableObject allowing to load gltf and glb files. Inheritance Object Object ScriptableObject UGDataSourceObject GltfDataSourceObject Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(String) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(Object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, Boolean) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, Boolean) Object.Destroy(Object, Single) Object.Destroy(Object) Object.DestroyImmediate(Object, Boolean) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, Boolean) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, Single) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() UnityEngine.Object.FindObjectsOfType<T>(System.Boolean) Object.FindObjectOfType<T>() UnityEngine.Object.FindObjectOfType<T>(System.Boolean) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, Boolean) Object.ToString() Object.name Object.hideFlags Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax [CreateAssetMenu(fileName = \"GLTF File\", menuName = \"Geospatial/Data Sources/GLTF\", order = 100)] public class GltfDataSourceObject : UGDataSourceObject Fields anisotropicFilterLevel This property defines the anisotropic filtering level for textures Declaration [Range(0F, 16F)] public int anisotropicFilterLevel Field Value Type Description Int32 defaultFilterMode This property defines the default filtering mode for textures that have no such specification in the dataset Declaration public FilterMode defaultFilterMode Field Value Type Description FilterMode generateMipMaps Set this property to true to enable mip map generation. Declaration public bool generateMipMaps Field Value Type Description Boolean lighting Allows you to override the shading of the given dataset. By default, many datasets which are derived from satelite imagery use unlit textures and call for unlit shading. This setting allows the user to override this and make use of lit shading even if the dataset calls for unlit shading. Declaration public UGLighting lighting Field Value Type Description UGLighting position The position of the GLB in universe space Declaration public double3 position Field Value Type Description double3 rotation The rotation of the GLB, in universe space Declaration public quaternion rotation Field Value Type Description quaternion scale The scale of the GLB, in universe space Declaration public float3 scale Field Value Type Description float3 uri The URI to the GLTF or GLB file. It can be either an absolute or relative path in the following form Note that relative path is relative to streamingAssetsPath . Declaration public string uri Field Value Type Description String Properties DataSourceID Scriptable object associated with this instance. Declaration public override UGDataSourceID DataSourceID { get; } Property Value Type Description UGDataSourceID Overrides UGDataSourceObject.DataSourceID Methods Instantiate(UGSystemBehaviour) Instantiates the underlying UGDataSource object. For most use-cases, this should only be called by the UGSystemBehaviour. Declaration public override UGDataSource Instantiate(UGSystemBehaviour system) Parameters Type Name Description UGSystemBehaviour system Instantiate the UGDataSource as child of this UGSystemBehaviour . Returns Type Description UGDataSource The newly instantiated UGDataSource . Overrides UGDataSourceObject.Instantiate(UGSystemBehaviour)"
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.GltfUriLoader.AlwaysDeferAgent.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.GltfUriLoader.AlwaysDeferAgent.html",
    "title": "Class GltfUriLoader.AlwaysDeferAgent | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class GltfUriLoader.AlwaysDeferAgent Used to interrupting the glTF loading procedure at certain points. This decision is always a trade-off between minimum loading time and a stable frame rate. Inheritance Object GltfUriLoader.AlwaysDeferAgent Implements GLTFast.IDeferAgent Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public class AlwaysDeferAgent : IDeferAgent Methods BreakPoint() Conditional yield. May continue right away or yield once, based on time. Declaration public async Task BreakPoint() Returns Type Description Task If ShouldDefer() returns true, returns Task.Yield(). Otherwise returns sync BreakPoint(Single) Conditional yield. May continue right away or yield once, based on time and duration. Declaration public async Task BreakPoint(float duration) Parameters Type Name Description Single duration Predicted duration of upcoming processing in seconds Returns Type Description Task If ShouldDefer(Single) returns true, returns Task.Yield(). Otherwise returns sync ShouldDefer() This will be called by GltfImport at various points in the loading procedure. Declaration public bool ShouldDefer() Returns Type Description Boolean True if the remaining work of the loading procedure should be deferred to the next frame/Update loop invocation. False if work can continue. ShouldDefer(Single) Indicates if upcoming work should be deferred to the next frame. Declaration public bool ShouldDefer(float duration) Parameters Type Name Description Single duration Predicted duration of upcoming processing in seconds Returns Type Description Boolean True if the remaining work of the loading procedure should be deferred to the next frame/Update loop invocation. False if work can continue. Implements GLTFast.IDeferAgent"
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.GltfUriLoader.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.GltfUriLoader.html",
    "title": "Class GltfUriLoader | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class GltfUriLoader Default glTF UriLoader . Inheritance Object UriLoader GltfUriLoader OgcB3dmUriLoader<TTableSchema, TBatchSchema> Inherited Members UriLoader.LoaderActions Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public class GltfUriLoader : UriLoader Constructors GltfUriLoader(ILoaderActions, UGDataSourceID, UGLighting, UGTextureSettings) Constructor with the adjustment matrix set to identity. Declaration public GltfUriLoader(ILoaderActions loaderActions, UGDataSourceID dataSource, UGLighting lighting, UGTextureSettings textureSettings) Parameters Type Name Description ILoaderActions loaderActions Reference to the command manager the UriLoader should publish it's requests to. UGDataSourceID dataSource Unique identifier allowing to do indirect assignment. UGLighting lighting Lighting type to apply to the shading. UGTextureSettings textureSettings Texture options to apply for each imported texture. GltfUriLoader(ILoaderActions, UGDataSourceID, UGLighting, UGTextureSettings, double4x4) Default constructor. Declaration public GltfUriLoader(ILoaderActions loaderActions, UGDataSourceID dataSource, UGLighting lighting, UGTextureSettings textureSettings, double4x4 adjustmentMatrix) Parameters Type Name Description ILoaderActions loaderActions Reference to the command manager the UriLoader should publish it's requests to. UGDataSourceID dataSource Unique identifier allowing to do indirect assignment. UGLighting lighting Lighting type to apply to the shading. UGTextureSettings textureSettings Texture options to apply for each imported texture. double4x4 adjustmentMatrix Each time a node is loaded, multiply its transform by this matrix allowing axis alignments when the format is not left-handed, Y-Up. Fields ZMinusForwardMatrix Default glTF files are encoded in Z Minus and result in a rotated model when imported in Unity which is Z Plus. Declaration public static readonly double4x4 ZMinusForwardMatrix Field Value Type Description double4x4 ZPlusForwardMatrix Applying this matrix as the adjustment matrix will leave imported glTF files as encoded without any modification. Declaration public static readonly double4x4 ZPlusForwardMatrix Field Value Type Description double4x4 Properties SupportedFileTypes Returns the files types that are supported by this content loader. Declaration public override IEnumerable<FileType> SupportedFileTypes { get; } Property Value Type Description IEnumerable < FileType > Overrides UriLoader.SupportedFileTypes Methods LoadAsync(NodeId, Byte[], String, double4x4) Load the content specified as a langword_csharp_byte array. Returns a task which, when completed, will return the InstanceId of the generated instance. Declaration public virtual async Task<InstanceID> LoadAsync(NodeId nodeId, byte[] bytes, string uri, double4x4 transform) Parameters Type Name Description NodeId nodeId BoundingVolumeHierarchy<T> NodeId requested to be loaded. Byte [] bytes Load the file from this Byte array instead from a path. String uri The uri to be loaded. double4x4 transform The transform to be applied to the underlying geometry Returns Type Description Task < InstanceID > The instance ID of the resulting geometry. LoadAsync(NodeId, Byte[], Uri, double4x4) Load the content specified as a langword_csharp_byte array. Returns a task which, when completed, will return the InstanceId of the generated instance. Declaration public virtual async Task<InstanceID> LoadAsync(NodeId nodeId, byte[] bytes, Uri uri, double4x4 transform) Parameters Type Name Description NodeId nodeId BoundingVolumeHierarchy<T> NodeId requested to be loaded. Byte [] bytes Load the file from this Byte array instead from a path. Uri uri The uri to be loaded. double4x4 transform The transform to be applied to the underlying geometry Returns Type Description Task < InstanceID > The instance ID of the resulting geometry. LoadAsync(NodeId, Func<GltfImport, ImportSettings, Task<Boolean>>, Uri, double4x4) Load the glTF file part of the given uri . Declaration protected async Task<InstanceID> LoadAsync(NodeId nodeId, Func<GltfImport, ImportSettings, Task<bool>> func, Uri uri, double4x4 transform) Parameters Type Name Description NodeId nodeId BoundingVolumeHierarchy<T> NodeId requested to be loaded. Func < GLTFast.GltfImport , GLTFast.ImportSettings , Task < Boolean >> func Async function to execute to load the glTF file. Uri uri Where to load the file from. double4x4 transform Move the loaded node to this position. Returns Type Description Task < InstanceID > The InstanceID associated with the newly imported node. Remarks The given transform will be multiplied by the Unity.Geospatial.Streaming.UniversalDecoder.GltfUriLoader.m_AdjustmentMatrix . LoadAsync(NodeId, UriNodeContent, double4x4) Load the content specified by the uri. Returns a task which, when completed, will return the InstanceId of the generated instance. Declaration public override async Task<InstanceID> LoadAsync(NodeId nodeId, UriNodeContent content, double4x4 transform) Parameters Type Name Description NodeId nodeId BoundingVolumeHierarchy<T> NodeId requested to be loaded. UriNodeContent content Content holding the URI and transform information. double4x4 transform The transform to be applied to the underlying geometry Returns Type Description Task < InstanceID > The instance ID of the resulting geometry. Overrides UriLoader.LoadAsync(NodeId, UriNodeContent, double4x4) Unload(InstanceID) Unload the specified instanceId Declaration public override void Unload(InstanceID instanceId) Parameters Type Name Description InstanceID instanceId The instance Id to be unloaded Overrides UriLoader.Unload(InstanceID)"
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.HierarchyContentLoader-2.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.HierarchyContentLoader-2.html",
    "title": "Class HierarchyContentLoader<TLeaf, TUriCollection> | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class HierarchyContentLoader<TLeaf, TUriCollection> Main class used to load hierarchy structured dataset allowing to load linked sub-files via registered UriLoader . This class is able to load a schema based on your implementation (json, yaml, txt) and load it's referenced files has long you register a UriLoader for each FileType the TLeaf . GetUriCollection returns. Inheritance Object HierarchyContentLoader<TLeaf, TUriCollection> OgcTilesetContentLoader<TTileset, TTile> TmsTerrainContentLoader Implements INodeContentLoader Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public abstract class HierarchyContentLoader<TLeaf, TUriCollection> : INodeContentLoader where TLeaf : ILeaf where TUriCollection : IUriCollection Type Parameters Name Description TLeaf Each time a child representing a node to be potentially loaded, an instance of this type will be returned. See GetChildren() TUriCollection Type of IUriCollection used to load the content of each TLeaf Constructors HierarchyContentLoader(INodeContentManager, ContentType, double4x4, Boolean) Default constructor. Declaration protected HierarchyContentLoader(INodeContentManager contentManager, ContentType contentType, double4x4 adjustmentMatrix, bool createHierarchyOnDemand = true) Parameters Type Name Description INodeContentManager contentManager INodeContentManager to use when loading a tile. ContentType contentType Type identifier allowing to figure which INodeContentLoader to execute when loading this content. double4x4 adjustmentMatrix Each time a node is loaded, multiply its transform by this matrix allowing axis alignments when the format is not left-handed, Y-Up. Boolean createHierarchyOnDemand true to create the BoundingVolumeHierarchy<T> nodes only when the parent node get loaded; false to create all the nodes when LoadNodeAsync(NodeId, NodeContent) is executed for a Unity.Geospatial.Streaming.UniversalDecoder.HierarchyContentLoader`2.RootContent instance. Properties ContentType Type identifier allowing to figure which INodeContentLoader to execute when loading this content. Declaration public ContentType ContentType { get; } Property Value Type Description ContentType FileType FileType associated with this loader allowing to call within LoadNodeAsync(NodeId, NodeContent) when the URI is of the same type. Declaration public abstract FileType FileType { get; } Property Value Type Description FileType Methods AddTopLevelNode(NodeContentManager, ContentType, UGDataSourceID, double4x4, Single, Uri, RefinementMode) Create a node child of the content manager root node. Declaration public void AddTopLevelNode(NodeContentManager contentManager, ContentType contentType, UGDataSourceID dataSource, double4x4 transform, float detailMultiplier, Uri uri, RefinementMode refinementMode) Parameters Type Name Description NodeContentManager contentManager Register the new node inside via this manager. ContentType contentType Type identifier allowing to figure which INodeContentLoader to execute when loading this content. UGDataSourceID dataSource Unique identifier allowing to do indirect assignment. double4x4 transform Where to place the node once loaded. Single detailMultiplier Multiply the geometric error by this value allowing to compensate when other data sources gives too different results. Uri uri URI providing where the resource is accessible. RefinementMode refinementMode Refinement mode to be applied when expanded. GetTransform(NodeContent, double4x4, double4x4) Based on the node content, get where the content should be loaded. Declaration protected virtual double4x4 GetTransform(NodeContent content, double4x4 transform, double4x4 adjustment) Parameters Type Name Description NodeContent content Content loaded from the TLeaf . double4x4 transform Value usually get from the TLeaf . double4x4 adjustment Adjustment matrix to apply to all transform. Returns Type Description double4x4 Where to place the instance once loaded. Remarks If you want a different behavior, override this method. It will be called before each load. LoadNodeAsync(NodeId, NodeContent) Load the given NodeId given the provided NodeContent. Declaration public async Task<InstanceID> LoadNodeAsync(NodeId nodeId, NodeContent nodeContent) Parameters Type Name Description NodeId nodeId The NodeId of the node to be loaded. This should come directly from the bounding volume hierarchy. NodeContent nodeContent The node content that should be loaded by the content loader. Given that this is an abstract class, various implementations can be passed here. Returns Type Description Task < InstanceID > The newly created instance corresponding to the loaded content. LoadRootAsync(NodeContent) Deserialize the given NodeContent to a TLeaf instance. Declaration public abstract Task<TLeaf> LoadRootAsync(NodeContent nodeContent) Parameters Type Name Description NodeContent nodeContent The node content that should be loaded by the content loader. Returns Type Description Task <TLeaf> The newly created instance corresponding to the loaded content. RegisterUriLoader(UriLoader) Register a sub-content loader to be used whenever a URI of the same FileType is found. Declaration public void RegisterUriLoader(UriLoader uriLoader) Parameters Type Name Description UriLoader uriLoader Loader to be registered. ScheduleTask(Action) Append a task to the list to be executed by the INodeContentManager . Declaration protected void ScheduleTask(Action task) Parameters Type Name Description Action task Task to be executed. Will be asynchronous if the INodeContentManager supports it. UnloadNode(NodeId) Unload a load and its linked loaded InstanceID . Declaration public void UnloadNode(NodeId nodeId) Parameters Type Name Description NodeId nodeId Node to unload. Remarks When LoadAsync(NodeId, UriNodeContent, double4x4) is called, Unity.Geospatial.Streaming.UniversalDecoder.HierarchyContentLoader`2.RegisterInstance(Unity.Geospatial.Streaming.UniversalDecoder.NodeId,Unity.Geospatial.Streaming.InstanceID,Unity.Geospatial.Streaming.UniversalDecoder.UriLoader) must have been called. Otherwise, UnloadNode(NodeId) won't work as expected. Implements INodeContentLoader"
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.html",
    "title": "Namespace Unity.Geospatial.Streaming.UniversalDecoder | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Namespace Unity.Geospatial.Streaming.UniversalDecoder Classes BoundingVolumeHierarchy<T> The BoundingVolumeHierarchy is one of the central classes which make up the UniversalDecoder. It is the memory representation of the bounding volume hierarchy structure that makes up HLODed streaming formats such as 3DTiles and many terrain formats. Each node has a bounding volume which is garanteed to contain all of its children, thus making it very efficient to tranverse and determine which nodes need to be visible as a function of any given set of observers. FileType The file type is used to figure out the content type of a file based on its path extension or magic number. GltfContentLoader The GLTF content loader interprets .gltf and .glb files for the content manager. GltfDataSource Data source information required by the GltfContentLoader to decoder its content. GltfDataSourceObject ScriptableObject allowing to load gltf and glb files. GltfUriLoader Default glTF UriLoader . GltfUriLoader.AlwaysDeferAgent Used to interrupting the glTF loading procedure at certain points. This decision is always a trade-off between minimum loading time and a stable frame rate. HierarchyContentLoader<TLeaf, TUriCollection> Main class used to load hierarchy structured dataset allowing to load linked sub-files via registered UriLoader . This class is able to load a schema based on your implementation (json, yaml, txt) and load it's referenced files has long you register a UriLoader for each FileType the TLeaf . GetUriCollection returns. NodeContent Base class used to load a node data (geometry, texture, point cloud...). NodeContentManager Allow to manage the loading / unloading of NodeId content via the UGSystem ITaskManager . PriorityQueue<T> A priority queue for the specified object type. UGGltFastInstantiator Decoder class used to convert .gltf and .glb files to instances. UGUniversalDecoder Main decoder used with a UniversalDecoderDataSource implementation. UniqueContentTypeGenerator Unique identifier generator used for ContentType registration. UniversalDecoderDataSource Base class that defines a layer of data available to be loaded via a NodeContentManager . UriLoader Loader to use to load data based on a URI . This loader is intended to be used with a INodeContentLoader allowing to reuse UriLoader for multiple INodeContentLoader . UriNodeContent NodeContent associated with a specific UriLoader . UriNodeContentLoader Classes with NodeId LoadNodeAsync(NodeId, NodeContent) / UnloadNode(NodeId) capabilities. based on a URI . Structs ContentType The content type is used to figure out which NodeContent classes are associated to which ContentLoaders. CurrentState This struct is used to determine the current state of a node in the BoundingVolumeHierarchy. It consists of a bit field which is used to determine loaded and visibility states. NodeData Data associated to a specific NodeId . The data refer to any information on how the node should be loaded without any notion on the hierarchy. For hierarchy information, see Unity.Geospatial.Streaming.UniversalDecoder.Node`1 . NodeId Indirection to a single item part of the BoundingVolumeHierarchy<T> SingleUri IUriCollection with only one URI part of it. TargetState This is the Target State of a node. Interfaces IEditCurrentState Interface to interact with the CurrentState for a given NodeId . IEditHierarchyNodes Interface to interact with the parenting of NodeId . IExpandingNodeContent NodeContent associated with a specific UriLoader and children information allowing to generate the hierarchy on demand. IExploreHierarchyNodes Interface to navigate through the hierarchy of the nodes like getting the parent or the children of a NodeId . IGetNodeData Interface to get information for a given NodeId . ILeaf Represent a single item available to be loaded by a UriLoader . ILoaderActions Commands allowed to be executed when loading / unloading data. INodeContentLoader Interface for classes with NodeId LoadNodeAsync(NodeId, NodeContent) / UnloadNode(NodeId) capabilities. INodeContentManager Interface to manage the loading / unloading of NodeId content via the UGSystem ITaskManager . IUriCollection Collection of paths defining the source of data to load when LoadAsync(NodeId, UriNodeContent, double4x4) is called for a single ILeaf . Enums NodeContentManager.State The possible state of the NodeContentManager defining if a node is currently being evaluated."
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.IEditCurrentState.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.IEditCurrentState.html",
    "title": "Interface IEditCurrentState | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface IEditCurrentState Interface to interact with the CurrentState for a given NodeId . Inherited Members IExploreHierarchyNodes.RootNode IExploreHierarchyNodes.NodeHasChildren(NodeId) IExploreHierarchyNodes.GetChildren(NodeId, List<NodeId>) IExploreHierarchyNodes.GetParent(NodeId) IExploreHierarchyNodes.HasNode(NodeId) Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public interface IEditCurrentState : IExploreHierarchyNodes Methods GetCurrentState(NodeId) Get the CurrentState of the specified node. Declaration CurrentState GetCurrentState(NodeId nodeId) Parameters Type Name Description NodeId nodeId The NodeId of the desired node. Returns Type Description CurrentState The CurrentState of the specified node. GetNodeContent(NodeId) Get the NodeContent of the specified node. Declaration NodeContent GetNodeContent(NodeId nodeId) Parameters Type Name Description NodeId nodeId The NodeId of the desired node. Returns Type Description NodeContent The NodeContent of the specified node. SetCurrentState(NodeId, CurrentState) Set the CurrentState of the specified node. Declaration void SetCurrentState(NodeId nodeId, CurrentState currentState) Parameters Type Name Description NodeId nodeId The NodeId of the desired node. CurrentState currentState The CurrentState of the specified node."
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.IEditHierarchyNodes.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.IEditHierarchyNodes.html",
    "title": "Interface IEditHierarchyNodes | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface IEditHierarchyNodes Interface to interact with the parenting of NodeId . Inherited Members IGetNodeData.GetBounds(NodeId) IGetNodeData.GetGeometricError(NodeId) IGetNodeData.GetAlwaysExpandFlag(NodeId) IGetNodeData.GetErrorSpecification(NodeId) IExploreHierarchyNodes.RootNode IExploreHierarchyNodes.NodeHasChildren(NodeId) IExploreHierarchyNodes.GetChildren(NodeId, List<NodeId>) IExploreHierarchyNodes.GetParent(NodeId) IExploreHierarchyNodes.HasNode(NodeId) Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public interface IEditHierarchyNodes : IGetNodeData, IExploreHierarchyNodes Methods AddNode(NodeId, NodeData, NodeContent) Add a node to the bounding volume hierarchy. Declaration NodeId AddNode(NodeId parent, NodeData data, NodeContent content) Parameters Type Name Description NodeId parent The node which should be the new node's parent. NodeData data The data that this node should contain. NodeContent content Content of the data to load when requested. Returns Type Description NodeId The NodeId of the node that has been added to the hierarchy. RemoveNode(NodeId) Remove a node from the hierarchy. If this node has children, its children will also be removed from the hierarchy. Declaration void RemoveNode(NodeId nodeId) Parameters Type Name Description NodeId nodeId The NodeId of the node to be removed. UpdateNode(NodeId, NodeData) Change the NodeData to the bounding volume hierarchy. Declaration void UpdateNode(NodeId nodeId, NodeData data) Parameters Type Name Description NodeId nodeId The node to update. NodeData data The data that this node should contain."
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.IExpandingNodeContent.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.IExpandingNodeContent.html",
    "title": "Interface IExpandingNodeContent | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface IExpandingNodeContent NodeContent associated with a specific UriLoader and children information allowing to generate the hierarchy on demand. Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public interface IExpandingNodeContent Properties InheritedRefineMode The parent refine value in case the refine value on this item is not set. Declaration RefinementMode InheritedRefineMode { get; } Property Value Type Description RefinementMode Leaf Item available to be loaded by a UriLoader . Declaration ILeaf Leaf { get; } Property Value Type Description ILeaf"
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.IExploreHierarchyNodes.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.IExploreHierarchyNodes.html",
    "title": "Interface IExploreHierarchyNodes | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface IExploreHierarchyNodes Interface to navigate through the hierarchy of the nodes like getting the parent or the children of a NodeId . Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public interface IExploreHierarchyNodes Properties RootNode Get the root node of the hierarchy Declaration NodeId RootNode { get; } Property Value Type Description NodeId The NodeId which corresponds to the root node of the hierarchy. Methods GetChildren(NodeId, List<NodeId>) Get the children of the given node id. This method uses the provided list to return the NodeId of the children in order to prevent garbage collection. Declaration void GetChildren(NodeId nodeId, List<NodeId> result) Parameters Type Name Description NodeId nodeId The starting point of the node id List < NodeId > result A list of children. This list is expected to be empty before the function call. GetParent(NodeId) Get the parent of the given node. Declaration NodeId GetParent(NodeId nodeId) Parameters Type Name Description NodeId nodeId The NodeId of the node of interest. Returns Type Description NodeId The NodeId of the parent. HasNode(NodeId) Determine whether a node is valid or not Declaration bool HasNode(NodeId nodeId) Parameters Type Name Description NodeId nodeId The NodeId of the node to be tested Returns Type Description Boolean True if the node is valid, false otherwise. NodeHasChildren(NodeId) Check whether a node has children. Declaration bool NodeHasChildren(NodeId nodeId) Parameters Type Name Description NodeId nodeId The node to be tested Returns Type Description Boolean True if it has children, false otherwise."
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.IGetNodeData.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.IGetNodeData.html",
    "title": "Interface IGetNodeData | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface IGetNodeData Interface to get information for a given NodeId . Inherited Members IExploreHierarchyNodes.RootNode IExploreHierarchyNodes.NodeHasChildren(NodeId) IExploreHierarchyNodes.GetChildren(NodeId, List<NodeId>) IExploreHierarchyNodes.GetParent(NodeId) IExploreHierarchyNodes.HasNode(NodeId) Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public interface IGetNodeData : IExploreHierarchyNodes Methods GetAlwaysExpandFlag(NodeId) Get whether node is set to always expand. Some nodes, such as the root node of the hierarchy and other placeholder nodes are designed to always expand and their bounds and geometric error should never be evaluated. Declaration bool GetAlwaysExpandFlag(NodeId nodeId) Parameters Type Name Description NodeId nodeId The NodeId of the node to be evaluated. Returns Type Description Boolean True if the node is set to always expand, false otherwise. GetBounds(NodeId) Get the bounds of the given node. Declaration DoubleBounds GetBounds(NodeId nodeId) Parameters Type Name Description NodeId nodeId The NodeId of the desired node. Returns Type Description Unity.Geospatial.HighPrecision.DoubleBounds The bounds of the given node. GetErrorSpecification(NodeId) Get the error specification of the specified node. Declaration float GetErrorSpecification(NodeId nodeId) Parameters Type Name Description NodeId nodeId The NodeId of the requested node. Returns Type Description Single The error specification of the specified node. GetGeometricError(NodeId) Get the geometric error of a given node. Declaration float GetGeometricError(NodeId nodeId) Parameters Type Name Description NodeId nodeId The NodeId of the node to be queried. Returns Type Description Single The geometric error of the given node."
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.ILeaf.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.ILeaf.html",
    "title": "Interface ILeaf | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface ILeaf Represent a single item available to be loaded by a UriLoader . Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public interface ILeaf Methods GetBoundingVolume(double4x4) The bounding volume that encloses the item geometry. Declaration DoubleBounds GetBoundingVolume(double4x4 transform) Parameters Type Name Description double4x4 transform Offset the result by this position. Returns Type Description Unity.Geospatial.HighPrecision.DoubleBounds The bounding volume to use when calculating the screen space error of this ILeaf instance. GetChildren() Enumerate child items of this parent. Each child content is fully enclosed by its parent bounding volume and, generally, has a geometricError less than its parent geometricError. For leaf items, the length of this array is zero, and children may not be defined. Declaration IEnumerable<ILeaf> GetChildren() Returns Type Description IEnumerable < ILeaf > Enumerate the children of this ILeaf instance. GetGeometricError() The error, in meters, introduced if this item is rendered and its children are not. At runtime, the geometric error is used to compute screen space error (SSE), i.e., the error measured in pixels. Declaration float GetGeometricError() Returns Type Description Single The error value to compute the screen space error of the ILeaf instance. GetRefinement(RefinementMode) Specifies if additive or replacement refinement is used when traversing the hierarchy for rendering. This property is required for the root item; it is optional for all other children. The default is to inherit from the parent item. Declaration RefinementMode GetRefinement(RefinementMode inherited) Parameters Type Name Description RefinementMode inherited The parent refine value in case the refine value on this item is not set. Returns Type Description RefinementMode The RefinementMode to use when loading the ILeaf . GetTransform() Get a double4x4 matrix representing where the item content should be positioned, turned and scaled. Declaration double4x4 GetTransform() Returns Type Description double4x4 The matrix of the item. GetUriCollection(Uri) A uri collection that points to the all the content to load. When the uri are relative, it is relative to the referring top parent. Declaration IUriCollection GetUriCollection(Uri baseUri) Parameters Type Name Description Uri baseUri An absolute URI of the root ILeaf . Returns Type Description IUriCollection Address of the content to be loaded."
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.ILoaderActions.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.ILoaderActions.html",
    "title": "Interface ILoaderActions | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface ILoaderActions Commands allowed to be executed when loading / unloading data. Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public interface ILoaderActions Methods AddMaterialProperty(MaterialID, MaterialProperty) Register a new material property for the given materialId . Declaration void AddMaterialProperty(MaterialID materialId, MaterialProperty materialProperty) Parameters Type Name Description MaterialID materialId Material the property will be linked with. MaterialProperty materialProperty Property to register. AddNode(NodeId, in NodeData, in NodeContent) Add a node to the bounding volume hierarchy. Declaration NodeId AddNode(NodeId parent, in NodeData data, in NodeContent content) Parameters Type Name Description NodeId parent The node which should be the new node's parent. NodeData data The data that this node should contain. NodeContent content Content of the data to load when requested. Returns Type Description NodeId The NodeId of the node that has been added to the hierarchy. AllocateInstance(InstanceData) Register a new instance with all its related data (mesh, material, textures...). Declaration InstanceID AllocateInstance(InstanceData instanceData) Parameters Type Name Description InstanceData instanceData Data specifying what is related to the new instance. Returns Type Description InstanceID A new InstanceID linked to the newly created instance. AllocateMaterial(MaterialType) Register a material to be instantiated. Declaration MaterialID AllocateMaterial(MaterialType type) Parameters Type Name Description MaterialType type Type of material to create. Returns Type Description MaterialID A new MaterialID instance linked to the newly created material. AllocateMesh(MeshData) Register a mesh to be instantiated. Declaration MeshID AllocateMesh(MeshData meshData) Parameters Type Name Description MeshData meshData Data to register and converted to Unity mesh. Returns Type Description MeshID A new MeshID instance linked to the resulting mesh. AllocateMesh(Mesh) Register a mesh to be instantiated. Declaration MeshID AllocateMesh(Mesh mesh) Parameters Type Name Description Mesh mesh Unity mesh to register. Returns Type Description MeshID A new MeshID instance linked to the given mesh . AllocateTexture(TextureData) Register a texture to be assigned. Declaration TextureID AllocateTexture(TextureData textureData) Parameters Type Name Description TextureData textureData Data to register and converted to Unity texture. Returns Type Description TextureID A new TextureID instance linked to the resulting texture. AllocateTexture(Texture2D) Register a texture to be assigned. Declaration TextureID AllocateTexture(Texture2D texture) Parameters Type Name Description Texture2D texture Unity texture to register. Returns Type Description TextureID A new TextureID instance linked to the given texture . DisposeInstance(InstanceID) Consider an instance to be disposed. Declaration void DisposeInstance(InstanceID instanceId) Parameters Type Name Description InstanceID instanceId Remove the registration of this instance. DisposeMaterial(MaterialID) Consider a material to be disposed. Declaration void DisposeMaterial(MaterialID materialId) Parameters Type Name Description MaterialID materialId Remove the registration of this material. DisposeMesh(MeshID) Consider a mesh to be disposed. Declaration void DisposeMesh(MeshID meshId) Parameters Type Name Description MeshID meshId Remove the registration of this mesh. DisposeTexture(TextureID) Consider a texture to be disposed. Declaration void DisposeTexture(TextureID textureId) Parameters Type Name Description TextureID textureId Remove the registration of this texture. ExecuteSingle(UGCommandBuffer.IListener) Execute the next item part of the queue. Declaration bool ExecuteSingle(UGCommandBuffer.IListener listener) Parameters Type Name Description UGCommandBuffer.IListener listener Send the next queue item to this listener. Returns Type Description Boolean true if the command was successfully sent; false otherwise. InitializeMetadata(NodeId) Create a new UGMetadata instance for the given nodeId . Declaration UGMetadata InitializeMetadata(NodeId nodeId) Parameters Type Name Description NodeId nodeId The ID of the node to create the metadata for. Returns Type Description UGMetadata A new UGMetadata instance. QueueAction(Action) Add a new item to the queue. Declaration void QueueAction(Action action) Parameters Type Name Description Action action Custom action to be executed by ExecuteSingle(UGCommandBuffer.IListener) . RemoveMaterialProperty(MaterialID, MaterialProperty) Consider a material property to be disposed. Declaration void RemoveMaterialProperty(MaterialID materialId, MaterialProperty materialProperty) Parameters Type Name Description MaterialID materialId Material the property is linked to. MaterialProperty materialProperty Property to unregister. RemoveNode(NodeId) Remove a node from the hierarchy. If this node has children, its children will also be removed from the hierarchy. Declaration void RemoveNode(NodeId nodeId) Parameters Type Name Description NodeId nodeId The NodeId of the node to be removed. UpdateInstanceVisibility(InstanceID, Boolean) Change the visibility state of an instance. Declaration void UpdateInstanceVisibility(InstanceID instanceId, bool visibility) Parameters Type Name Description InstanceID instanceId Instance to change its visibility. Boolean visibility true to set visible the instance; false to set hidden. UpdateNode(NodeId, NodeData) Change the NodeData to the bounding volume hierarchy. Declaration void UpdateNode(NodeId nodeId, NodeData data) Parameters Type Name Description NodeId nodeId The node to update. NodeData data The data that this node should contain."
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.INodeContentLoader.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.INodeContentLoader.html",
    "title": "Interface INodeContentLoader | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface INodeContentLoader Interface for classes with NodeId LoadNodeAsync(NodeId, NodeContent) / UnloadNode(NodeId) capabilities. Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public interface INodeContentLoader Methods LoadNodeAsync(NodeId, NodeContent) Load the given NodeId given the provided NodeContent. Declaration Task<InstanceID> LoadNodeAsync(NodeId nodeId, NodeContent nodeContent) Parameters Type Name Description NodeId nodeId The NodeId of the node to be loaded. This should come directly from the bounding volume hierarchy. NodeContent nodeContent The node content that should be loaded by the content loader. Given that this is an abstract class, various implementations can be passed here. Returns Type Description Task < InstanceID > The newly created instance corresponding to the loaded content. UnloadNode(NodeId) Unload the given node. Declaration void UnloadNode(NodeId nodeId) Parameters Type Name Description NodeId nodeId The NodeId of the node to be unloaded. This should come directly from the BoundingVolumeHierarchy."
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.INodeContentManager.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.INodeContentManager.html",
    "title": "Interface INodeContentManager | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface INodeContentManager Interface to manage the loading / unloading of NodeId content via the UGSystem ITaskManager . Inherited Members ILoaderActions.AddMaterialProperty(MaterialID, MaterialProperty) ILoaderActions.AddNode(NodeId, NodeData, NodeContent) ILoaderActions.AllocateInstance(InstanceData) ILoaderActions.AllocateMaterial(MaterialType) ILoaderActions.AllocateMesh(Mesh) ILoaderActions.AllocateMesh(MeshData) ILoaderActions.AllocateTexture(Texture2D) ILoaderActions.AllocateTexture(TextureData) ILoaderActions.DisposeInstance(InstanceID) ILoaderActions.DisposeMaterial(MaterialID) ILoaderActions.DisposeMesh(MeshID) ILoaderActions.DisposeTexture(TextureID) ILoaderActions.ExecuteSingle(UGCommandBuffer.IListener) ILoaderActions.InitializeMetadata(NodeId) ILoaderActions.QueueAction(Action) ILoaderActions.RemoveMaterialProperty(MaterialID, MaterialProperty) ILoaderActions.RemoveNode(NodeId) ILoaderActions.UpdateInstanceVisibility(InstanceID, Boolean) ILoaderActions.UpdateNode(NodeId, NodeData) Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public interface INodeContentManager : ILoaderActions Properties LoadingCount The number of nodes currently in the process of being Load(NodeId, NodeContent) . This includes nodes which are waiting on server requests or going through some internal processing. Declaration int LoadingCount { get; } Property Value Type Description Int32 Methods GenerateContentType() Create a new unique ContentType instance. Declaration ContentType GenerateContentType() Returns Type Description ContentType The newly created ContentType . GetChildren(NodeId, List<NodeId>) Get a list of NodeId defined as child of the given parent . Declaration void GetChildren(NodeId parent, List<NodeId> children) Parameters Type Name Description NodeId parent Owner of the returned children. List < NodeId > children Result of the search. Load(NodeId, NodeContent) Load the provided node and its corresponding content. Once loaded, it will still not be visible. Declaration void Load(NodeId nodeId, NodeContent content) Parameters Type Name Description NodeId nodeId The node Id to be loaded NodeContent content The content to be loaded RegisterLoader(ContentType, INodeContentLoader) Register a new content loader which can be used to decode data. Declaration void RegisterLoader(ContentType contentType, INodeContentLoader contentLoader) Parameters Type Name Description ContentType contentType Associated unique content id for the given contentLoader . INodeContentLoader contentLoader The INodeContentLoader to be registered. ScheduleTask(Action) Append a task to the list to be executed. Declaration void ScheduleTask(Action task) Parameters Type Name Description Action task Task to be executed. Will be asynchronous if the INodeContentManager supports it. Unload(NodeId) Unload the provided node Declaration void Unload(NodeId nodeId) Parameters Type Name Description NodeId nodeId The node id to be unloaded. UpdateVisibility(IEnumerable<NodeId>, IEnumerable<NodeId>) Update the visibility of the nodes. This is all guaranteed to happen within the same frame to avoid visual transition artifacts. Declaration void UpdateVisibility(IEnumerable<NodeId> visible, IEnumerable<NodeId> hidden) Parameters Type Name Description IEnumerable < NodeId > visible The nodes which should be made visible. IEnumerable < NodeId > hidden The nodes which should be hidden."
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.IUriCollection.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.IUriCollection.html",
    "title": "Interface IUriCollection | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Interface IUriCollection Collection of paths defining the source of data to load when LoadAsync(NodeId, UriNodeContent, double4x4) is called for a single ILeaf . Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public interface IUriCollection : IEnumerable<Uri>, IEnumerable Properties MainUri The most representative link part of this collection. Declaration Uri MainUri { get; } Property Value Type Description Uri Methods GetFileType() Get the FileType associated with this collection. Based on the returned value, the corresponding UriLoader will be used when LoadAsync(NodeId, UriNodeContent, double4x4) / Unload(InstanceID) is called. Declaration FileType GetFileType() Returns Type Description FileType The FileType used to get the corresponding registered UriLoader . Remarks This is usually the FileType associated with the MainUri . HasContent() Get if the instance can be loaded. Declaration bool HasContent() Returns Type Description Boolean true if valid links are part of this instance; false if required links are not set."
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.NodeContent.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.NodeContent.html",
    "title": "Class NodeContent | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class NodeContent Base class used to load a node data (geometry, texture, point cloud...). Inheritance Object NodeContent UriNodeContent Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public abstract class NodeContent Constructors NodeContent(ContentType, UGDataSourceID) Constructor requesting no need to evaluate the screen space error since it will be considered always to be expanded. Declaration protected NodeContent(ContentType type, UGDataSourceID dataSource) Parameters Type Name Description ContentType type Type of data to load. See ContentType UGDataSourceID dataSource The UGDataSource instance id this NodeContent refers to. NodeContent(ContentType, UGDataSourceID, in DoubleBounds, Single) Main constructor. Declaration protected NodeContent(ContentType type, UGDataSourceID dataSource, in DoubleBounds bounds, float geometricError) Parameters Type Name Description ContentType type Type of data to load. See ContentType UGDataSourceID dataSource The UGDataSource instance id this NodeContent refers to. Unity.Geospatial.HighPrecision.DoubleBounds bounds Limits of the node in space that will be evaluated within each UGSceneObserver . Single geometricError If the evaluated screen space error is higher than this value, the node will not be expanded. Properties AlwaysExpand Overrides bounds and geometric error and always expands. Declaration public bool AlwaysExpand { get; } Property Value Type Description Boolean Bounds The bounds of the content. Declaration public DoubleBounds Bounds { get; set; } Property Value Type Description Unity.Geospatial.HighPrecision.DoubleBounds DataSource The UGDataSource instance id allowing to link the NodeId with it loaded content. Declaration public UGDataSourceID DataSource { get; } Property Value Type Description UGDataSourceID Examples This is required by UGExtentModifier to work properly. GeometricError The geometric error of the content. If the evaluated screen space error is higher than this value, the node will not be expanded. Declaration public float GeometricError { get; set; } Property Value Type Description Single NodeId The node Id of the node content. This is populated by the BVH and can only be set once. Declaration public NodeId NodeId { get; set; } Property Value Type Description NodeId Type Type of data to load. Declaration public ContentType Type { get; } Property Value Type Description ContentType Remarks This value should be part of ContentType ."
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.NodeContentManager.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.NodeContentManager.html",
    "title": "Class NodeContentManager | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class NodeContentManager Allow to manage the loading / unloading of NodeId content via the UGSystem ITaskManager . Inheritance Object NodeContentManager Implements INodeContentManager ILoaderActions Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public class NodeContentManager : INodeContentManager, ILoaderActions Constructors NodeContentManager(IEditHierarchyNodes, UGCommandBuffer, ITaskManager) Default constructor. Declaration public NodeContentManager(IEditHierarchyNodes hierarchy, UGCommandBuffer commandBuffer, ITaskManager taskManager) Parameters Type Name Description IEditHierarchyNodes hierarchy Allow to interact with the parenting of NodeId . UGCommandBuffer commandBuffer Queue of commands waiting to be executed. ITaskManager taskManager Defines how to execute the Tasks . This allow to implement either a custom task manager or decide whether all the Tasks should be executed on the main thread or be multi-threaded. Properties CommandBuffer Queue of commands waiting to be executed. Declaration public UGCommandBuffer CommandBuffer { get; } Property Value Type Description UGCommandBuffer ContentTypeGenerator Unique identifier generator used for ContentType registration. Declaration public UniqueContentTypeGenerator ContentTypeGenerator { get; } Property Value Type Description UniqueContentTypeGenerator LoadingCount The number of nodes currently in the process of being Load(NodeId, NodeContent) . This includes nodes which are waiting on server requests or going through some internal processing. Declaration public int LoadingCount { get; } Property Value Type Description Int32 TaskManager Defines how to execute the Tasks . This allow to implement either a custom task manager or decide whether all the Tasks should be executed on the main thread or be multi-threaded. Declaration public ITaskManager TaskManager { get; } Property Value Type Description ITaskManager UnloadingCount The number of nodes currently in the process of being Unload(NodeId) . Declaration public int UnloadingCount { get; } Property Value Type Description Int32 Methods AddNode(NodeId, in NodeData, in NodeContent) Add a node to the bounding volume hierarchy. Declaration public NodeId AddNode(NodeId parent, in NodeData data, in NodeContent content) Parameters Type Name Description NodeId parent The node which should be the new node's parent. NodeData data The data that this node should contain. NodeContent content Content of the data to load when requested. Returns Type Description NodeId The NodeId of the node that has been added to the hierarchy. GenerateContentType() Create a new unique ContentType instance. Declaration public ContentType GenerateContentType() Returns Type Description ContentType The newly created ContentType . GetChildren(NodeId, List<NodeId>) Get a list of NodeId defined as child of the given parent . Declaration public void GetChildren(NodeId parent, List<NodeId> children) Parameters Type Name Description NodeId parent Owner of the returned children. List < NodeId > children Result of the search. GetRootNode() Get the root node of the hierarchy Declaration public NodeId GetRootNode() Returns Type Description NodeId The NodeId which corresponds to the root node of the hierarchy. GetState() Get the current state of the NodeContentManager defining if a node is currently being evaluated. Declaration public NodeContentManager.State GetState() Returns Type Description NodeContentManager.State The state of the NodeContentManager . InitializeMetadata(NodeId) Initialize a new UGMetadata instance for a given NodeId . Declaration public UGMetadata InitializeMetadata(NodeId nodeId) Parameters Type Name Description NodeId nodeId The returned data will be taken from this node. Returns Type Description UGMetadata The newly created UGMetadata instance. Load(NodeId, NodeContent) Load the provided node and its corresponding content. Once loaded, it will still not be visible. Declaration public void Load(NodeId nodeId, NodeContent content) Parameters Type Name Description NodeId nodeId The node Id to be loaded NodeContent content The content to be loaded ProcessNext() Execute the next action part of the queue. Declaration public void ProcessNext() Exceptions Type Condition NotImplementedException If the next action in the queue is not supported. RegisterLoader(ContentType, INodeContentLoader) Register a new content loader which can be used to decode data. Declaration public void RegisterLoader(ContentType contentType, INodeContentLoader contentLoader) Parameters Type Name Description ContentType contentType Associated unique content id for the given contentLoader . INodeContentLoader contentLoader The INodeContentLoader to be registered. RemoveNode(NodeId) Remove a node from the hierarchy. If this node has children, its children will also be removed from the hierarchy. Declaration public void RemoveNode(NodeId nodeId) Parameters Type Name Description NodeId nodeId The NodeId of the node to be removed. ScheduleTask(Action) Append a task to the list to be executed. Declaration public void ScheduleTask(Action task) Parameters Type Name Description Action task Task to be executed. Will be asynchronous if the INodeContentManager supports it. Unload(NodeId) Unload the provided node Declaration public void Unload(NodeId nodeId) Parameters Type Name Description NodeId nodeId The node id to be unloaded. UpdateNode(NodeId, NodeData) Change the NodeData to the bounding volume hierarchy. Declaration public void UpdateNode(NodeId nodeId, NodeData data) Parameters Type Name Description NodeId nodeId The node to update. NodeData data The data that this node should contain. UpdateVisibility(IEnumerable<NodeId>, IEnumerable<NodeId>) Update the visibility of the nodes. This is all guaranteed to happen within the same frame to avoid visual transition artifacts. Declaration public void UpdateVisibility(IEnumerable<NodeId> visible, IEnumerable<NodeId> hidden) Parameters Type Name Description IEnumerable < NodeId > visible The nodes which should be made visible. IEnumerable < NodeId > hidden The nodes which should be hidden. Explicit Interface Implementations ILoaderActions.AddMaterialProperty(MaterialID, MaterialProperty) Register a new material property for the given materialId . Declaration void ILoaderActions.AddMaterialProperty(MaterialID materialId, MaterialProperty materialProperty) Parameters Type Name Description MaterialID materialId Material the property will be linked with. MaterialProperty materialProperty Property to register. ILoaderActions.AllocateInstance(InstanceData) Register a new instance with all its related data (mesh, material, textures...). Declaration InstanceID ILoaderActions.AllocateInstance(InstanceData instanceData) Parameters Type Name Description InstanceData instanceData Data specifying what is related to the new instance. Returns Type Description InstanceID A new InstanceID linked to the newly created instance. ILoaderActions.AllocateMaterial(MaterialType) Register a material to be instantiated. Declaration MaterialID ILoaderActions.AllocateMaterial(MaterialType type) Parameters Type Name Description MaterialType type Type of material to create. Returns Type Description MaterialID A new MaterialID instance linked to the newly created material. ILoaderActions.AllocateMesh(MeshData) Register a mesh to be instantiated. Declaration MeshID ILoaderActions.AllocateMesh(MeshData meshData) Parameters Type Name Description MeshData meshData Data to register and converted to Unity mesh. Returns Type Description MeshID A new MeshID instance linked to the resulting mesh. ILoaderActions.AllocateMesh(Mesh) Register a mesh to be instantiated. Declaration MeshID ILoaderActions.AllocateMesh(Mesh mesh) Parameters Type Name Description Mesh mesh Unity mesh to register. Returns Type Description MeshID A new MeshID instance linked to the given mesh . ILoaderActions.AllocateTexture(TextureData) Register a texture to be assigned. Declaration TextureID ILoaderActions.AllocateTexture(TextureData textureData) Parameters Type Name Description TextureData textureData Data to register and converted to Unity texture. Returns Type Description TextureID A new TextureID instance linked to the resulting texture. ILoaderActions.AllocateTexture(Texture2D) Register a texture to be assigned. Declaration TextureID ILoaderActions.AllocateTexture(Texture2D texture) Parameters Type Name Description Texture2D texture Unity texture to register. Returns Type Description TextureID A new TextureID instance linked to the given texture . ILoaderActions.DisposeInstance(InstanceID) Consider an instance to be disposed. Declaration void ILoaderActions.DisposeInstance(InstanceID instanceId) Parameters Type Name Description InstanceID instanceId Remove the registration of this instance. ILoaderActions.DisposeMaterial(MaterialID) Consider a material to be disposed. Declaration void ILoaderActions.DisposeMaterial(MaterialID materialId) Parameters Type Name Description MaterialID materialId Remove the registration of this material. ILoaderActions.DisposeMesh(MeshID) Consider a mesh to be disposed. Declaration void ILoaderActions.DisposeMesh(MeshID meshId) Parameters Type Name Description MeshID meshId Remove the registration of this mesh. ILoaderActions.DisposeTexture(TextureID) Consider a texture to be disposed. Declaration void ILoaderActions.DisposeTexture(TextureID textureId) Parameters Type Name Description TextureID textureId Remove the registration of this texture. ILoaderActions.ExecuteSingle(UGCommandBuffer.IListener) Execute the next item part of the queue. Declaration bool ILoaderActions.ExecuteSingle(UGCommandBuffer.IListener listener) Parameters Type Name Description UGCommandBuffer.IListener listener Send the next queue item to this listener. Returns Type Description Boolean true if the command was successfully sent; false otherwise. ILoaderActions.QueueAction(Action) Add a new item to the queue. Declaration void ILoaderActions.QueueAction(Action action) Parameters Type Name Description Action action Custom action to be executed by ExecuteSingle(UGCommandBuffer.IListener) . ILoaderActions.RemoveMaterialProperty(MaterialID, MaterialProperty) Consider a material property to be disposed. Declaration void ILoaderActions.RemoveMaterialProperty(MaterialID materialId, MaterialProperty materialProperty) Parameters Type Name Description MaterialID materialId Material the property is linked to. MaterialProperty materialProperty Property to unregister. ILoaderActions.UpdateInstanceVisibility(InstanceID, Boolean) Change the visibility state of an instance. Declaration void ILoaderActions.UpdateInstanceVisibility(InstanceID instanceId, bool visibility) Parameters Type Name Description InstanceID instanceId Instance to change its visibility. Boolean visibility true to set visible the instance; false to set hidden. Implements INodeContentManager ILoaderActions"
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.NodeContentManager.State.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.NodeContentManager.State.html",
    "title": "Enum NodeContentManager.State | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Enum NodeContentManager.State The possible state of the NodeContentManager defining if a node is currently being evaluated. Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public enum State Fields Name Description Done No more nodes are in the queue waiting to be evaluated and every one of them have also been processed. Processing At least one node is currently in the process to be loaded, unloaded or modified. Waiting At least one node is waiting in the queue to be evaluated."
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.NodeData.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.NodeData.html",
    "title": "Struct NodeData | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct NodeData Data associated to a specific NodeId . The data refer to any information on how the node should be loaded without any notion on the hierarchy. For hierarchy information, see Unity.Geospatial.Streaming.UniversalDecoder.Node`1 . Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public readonly struct NodeData Constructors NodeData(DoubleBounds, Single, RefinementMode, Boolean) Constructor with explicit values for each properties. Declaration public NodeData(DoubleBounds bounds, float geometricError, RefinementMode refinementMode = RefinementMode.Add, bool alwaysExpand = false) Parameters Type Name Description Unity.Geospatial.HighPrecision.DoubleBounds bounds Limits of the node geometry allowing to calculate the intersection between the node geometry with the UGSceneObserver bounds. Single geometricError Maximum allowed geometric error indicating if the node should be loaded. Usually correspond to the screen space the node should have before being loaded. A high error will dictate the node to be loaded more often since it would allow a bigger error range. A lower error will prevent the node to be loaded by have a smaller error range. An error set to langword_csharp_float .MaxValue would force the node to always be loaded if its parent is loaded. RefinementMode refinementMode Determine how to handle the node when it get Expanded . Boolean alwaysExpand If the node should always be expanded without calculating the GeometricError ; false if the GeometricError should always be calculated when Expanded state needs to be evaluated. NodeData(NodeContent, RefinementMode) Default constructor. Declaration public NodeData(NodeContent content, RefinementMode refinementMode) Parameters Type Name Description NodeContent content Fill the NodeData with this content values. RefinementMode refinementMode Refinement mode to be applied when expanded. Fields Placeholder NodeData to be used the node needs to be always expanded. Declaration public static readonly NodeData Placeholder Field Value Type Description NodeData Properties AlwaysExpand Get if the node should always be expanded without calculating the GeometricError ; false if the GeometricError should always be calculated when Expanded state needs to be evaluated. Declaration public readonly bool AlwaysExpand { get; } Property Value Type Description Boolean Bounds Limits of the node geometry allowing to calculate the intersection between the node geometry with the UGSceneObserver bounds. Declaration public readonly DoubleBounds Bounds { get; } Property Value Type Description Unity.Geospatial.HighPrecision.DoubleBounds GeometricError Maximum allowed geometric error indicating if the node should be loaded. Usually correspond to the screen space the node should have before being loaded. A high error will dictate the node to be loaded more often since it would allow a bigger error range. A lower error will prevent the node to be loaded by have a smaller error range. Declaration public readonly float GeometricError { get; } Property Value Type Description Single Remarks An error set to langword_csharp_float .MaxValue would force the node to always be loaded if its parent is loaded. RefinementMode Determine how to handle the node when it get Expanded Declaration public readonly RefinementMode RefinementMode { get; } Property Value Type Description RefinementMode"
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.NodeId.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.NodeId.html",
    "title": "Struct NodeId | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct NodeId Indirection to a single item part of the BoundingVolumeHierarchy<T> Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public readonly struct NodeId : IEquatable<NodeId> Constructors NodeId(Int32) Main constructor for a new NodeId instance. Declaration public NodeId(int id) Parameters Type Name Description Int32 id Identifier of the node corresponding to its respective index in the BoundingVolumeHierarchy<T> structure. Fields Id Index of the NodeId allowing to find its corresponding data in the other data structures. Declaration public readonly int Id Field Value Type Description Int32 NullID Node Id reserved for invalid nodes or null handles. Declaration public const int NullID = -1 Field Value Type Description Int32 Properties IsNull Get if the current node point to NullID . Declaration public readonly bool IsNull { get; } Property Value Type Description Boolean Null This ID is reserved for invalid note handles. It points to no node in the BVH Declaration public static readonly NodeId Null { get; } Property Value Type Description NodeId Methods Equals(Object) Validate obj is a NodeId instance and is the same id. Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Compare the values with this instance. Returns Type Description Boolean true if both instances represent the same id; false otherwise. Overrides ValueType.Equals(Object) Equals(NodeId) Validate an other NodeId is the same id. Declaration public readonly bool Equals(NodeId other) Parameters Type Name Description NodeId other Compare the values with this instance. Returns Type Description Boolean true if both instances represent the same id; false otherwise. GetHashCode() Compute a hash code for the object. Declaration public override readonly int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides ValueType.GetHashCode() Remarks You should not assume that equal hash codes imply object equality. You should never persist or use a hash code outside the application domain in which it was created, because the same object may hash differently across application domains, processes, and platforms. ToString() Returns a string that represents the current NodeId . Declaration public override readonly string ToString() Returns Type Description String A string that represents the current object. Overrides ValueType.ToString() Operators Equality(NodeId, NodeId) Validate both NodeId have the same values. Declaration public static bool operator ==(NodeId lhs, NodeId rhs) Parameters Type Name Description NodeId lhs First instance to compare with. NodeId rhs Compare lhs with this instance. Returns Type Description Boolean true if both instances represent the same id; false otherwise. Inequality(NodeId, NodeId) Validate both NodeId have the different values. Declaration public static bool operator !=(NodeId lhs, NodeId rhs) Parameters Type Name Description NodeId lhs First instance to compare with. NodeId rhs Compare lhs with this instance. Returns Type Description Boolean true if both instances represent the different id; false if both instances represent the same id."
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.PriorityQueue-1.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.PriorityQueue-1.html",
    "title": "Class PriorityQueue<T> | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class PriorityQueue<T> A priority queue for the specified object type. Inheritance Object PriorityQueue<T> Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public class PriorityQueue<T> Type Parameters Name Description T The type to be stored within the priority queue. Constructors PriorityQueue() Default constructor for the PriorityQueue Declaration public PriorityQueue() Properties Count The number of items contained within the priority queue. Declaration public int Count { get; } Property Value Type Description Int32 Methods Clear() Removes all elements from the queue. Declaration public void Clear() Dequeue() Remove the item with priority from the queue. Declaration public T Dequeue() Returns Type Description T The item with priority Enqueue(Double, T) Enqueue and order based on priority. Lower values will come out first. Equal priorities will are garanteed to come out in FIFO order. Declaration public void Enqueue(double priority, T item) Parameters Type Name Description Double priority Priority value - lower values have priority over higher values. T item The item to be enqueued within the priority queue."
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.SingleUri.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.SingleUri.html",
    "title": "Struct SingleUri | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct SingleUri IUriCollection with only one URI part of it. Implements IUriCollection Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public readonly struct SingleUri : IUriCollection, IEnumerable<Uri>, IEnumerable, IEquatable<SingleUri> Constructors SingleUri(String, String) Constructor with a Uri as a string. Declaration public SingleUri(string relativeUri, string baseUri) Parameters Type Name Description String relativeUri A relative Uri instance that is combined with baseUri. String baseUri An absolute Uri that is the base for the new Uri instance. SingleUri(String, Uri) Constructor with a Uri as a string. Declaration public SingleUri(string relativeUri, Uri baseUri = null) Parameters Type Name Description String relativeUri A relative Uri instance that is combined with baseUri. Uri baseUri An absolute Uri that is the base for the new Uri instance. SingleUri(Uri, Uri) Constructor with a base and a relative uris allowing to construct a new uri. Declaration public SingleUri(Uri relativeUri, Uri baseUri = null) Parameters Type Name Description Uri relativeUri A relative Uri instance that is combined with baseUri. Uri baseUri An absolute Uri that is the base for the new Uri instance. Properties Uri The path to use when LoadAsync(NodeId, UriNodeContent, double4x4) is called with this collection. Declaration public readonly Uri Uri { get; } Property Value Type Description Uri Methods Equals(Object) Get if two objects have the same values. Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj Other Uri to compare with. Returns Type Description Boolean true if both objects point to the same uri; false otherwise. Overrides ValueType.Equals(Object) Equals(SingleUri) Get if two SingleUri have the same values. Declaration public readonly bool Equals(SingleUri other) Parameters Type Name Description SingleUri other Returns Type Description Boolean true if both objects point to the same uri; false otherwise. GetEnumerator() Returns an enumerator that iterates through the Uri collection. Declaration public readonly IEnumerator<Uri> GetEnumerator() Returns Type Description IEnumerator < Uri > GetFileType() Get the FileType associated with this collection. Based on the returned value, the corresponding UriLoader will be used when LoadAsync(NodeId, UriNodeContent, double4x4) / Unload(InstanceID) is called. Declaration public readonly FileType GetFileType() Returns Type Description FileType The FileType associated with the Uri . GetHashCode() Compute a hash code for the object. Declaration public override readonly int GetHashCode() Returns Type Description Int32 A hash code. Overrides ValueType.GetHashCode() HasContent() Get if the instance can be loaded. Declaration public readonly bool HasContent() Returns Type Description Boolean true if the collection has a Uri ; false if Uri is null or an empty langword_csharp_string . Explicit Interface Implementations IUriCollection.MainUri Get the value of Uri . Declaration readonly Uri IUriCollection.MainUri { get; } Returns Type Description Uri Implements IUriCollection"
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.TargetState.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.TargetState.html",
    "title": "Struct TargetState | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Struct TargetState This is the Target State of a node. Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public readonly struct TargetState Fields Collapsed The collapsed state Declaration public static readonly TargetState Collapsed Field Value Type Description TargetState Expanded The expanded state Declaration public static readonly TargetState Expanded Field Value Type Description TargetState Properties IsCollapsed Returns whether the current state is collapsed Declaration public readonly bool IsCollapsed { get; } Property Value Type Description Boolean IsExpanded Returns whether the current state is expanded. Declaration public readonly bool IsExpanded { get; } Property Value Type Description Boolean Methods ToString() Generate a human readable string to represent the currents state. Declaration public override readonly string ToString() Returns Type Description String Human readable string of the current state. Overrides ValueType.ToString()"
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.UGGltFastInstantiator.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.UGGltFastInstantiator.html",
    "title": "Class UGGltFastInstantiator | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGGltFastInstantiator Decoder class used to convert .gltf and .glb files to instances. Inheritance Object UGGltFastInstantiator Implements GLTFast.IInstantiator Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public class UGGltFastInstantiator : IInstantiator Constructors UGGltFastInstantiator(GltfImport, ILoaderActions, String, double4x4, UGDataSourceID, UGLighting, UGMetadata) Default constructor. Declaration public UGGltFastInstantiator(GltfImport gltf, ILoaderActions loaderActions, string name, double4x4 transform, UGDataSourceID dataSource, UGLighting lighting, UGMetadata metadata) Parameters Type Name Description GLTFast.GltfImport gltf Importer used to read gltf files and convert them to Unity objects. ILoaderActions loaderActions Manager allowing to load / unload NodeId content via the UGSystem ITaskManager . String name Name to set the Unity GameObject . double4x4 transform Where to position the imported geometry. UGDataSourceID dataSource Unique identifier of the UGDataSource to import. UGLighting lighting Specify the material type to use when loading the dataSource . UGMetadata metadata Metadata information to attach to the imported GameObject . Methods AddCamera(UInt32, UInt32) Called when a node has a camera assigned Declaration public void AddCamera(uint nodeIndex, uint cameraIndex) Parameters Type Name Description UInt32 nodeIndex Index of the node UInt32 cameraIndex Index of the assigned camera AddPrimitive(UInt32, String, Mesh, Int32[], UInt32[], Nullable<UInt32>, Single[], Int32) Called for adding a Primitive/Mesh to a Node. Declaration public void AddPrimitive(uint nodeIndex, string meshName, Mesh mesh, int[] materialIndices, uint[] joints = null, uint? rootJoint = null, float[] morphTargetWeights = null, int primitiveNumeration = 0) Parameters Type Name Description UInt32 nodeIndex Index of the node String meshName Mesh's name Mesh mesh The actual Mesh Int32 [] materialIndices Material indices. Should be used to query the material UInt32 [] joints If a skin was attached, the joint indices. Null otherwise (This is not implemented). Nullable < UInt32 > rootJoint Single [] morphTargetWeights Array of weights applying the skin morph shapes (This is not implemented). Int32 primitiveNumeration Primitives are numerated per Node, starting with 0 (This is not implemented). AddPrimitiveInstanced(UInt32, String, Mesh, Int32[], UInt32, Nullable<NativeArray<Vector3>>, Nullable<NativeArray<Quaternion>>, Nullable<NativeArray<Vector3>>, Int32) Called for adding a Primitive/Mesh to a Node that uses GPU instancing (EXT_mesh_gpu_instancing) to render the same mesh/material combination many times. Similar to/called instead of AddPrimitive(UInt32, String, Mesh, Int32[], UInt32[], Nullable<UInt32>, Single[], Int32) , without joints/skin support. Declaration public void AddPrimitiveInstanced(uint nodeIndex, string meshName, Mesh mesh, int[] materialIndices, uint instanceCount, NativeArray<Vector3>? positions, NativeArray<Quaternion>? rotations, NativeArray<Vector3>? scales, int primitiveNumeration = 0) Parameters Type Name Description UInt32 nodeIndex Index of the node String meshName Mesh's name Mesh mesh The actual Mesh Int32 [] materialIndices Material indices. Should be used to query the material UInt32 instanceCount Number of instances Nullable < NativeArray < Vector3 >> positions Instance positions Nullable < NativeArray < Quaternion >> rotations Instance rotations Nullable < NativeArray < Vector3 >> scales Instance scales Int32 primitiveNumeration Primitives are numerated per Node, starting with 0 AddScene(String, UInt32[], AnimationClip[]) Called for adding a glTF scene. Declaration public void AddScene(string name, uint[] nodeIndices, AnimationClip[] animationClips) Parameters Type Name Description String name Name of the scene UInt32 [] nodeIndices Indices of root level nodes in scene AnimationClip [] animationClips Apply those animation on the instances. AllocateInstance() Register a new instance with all its related data (mesh and position). Declaration public InstanceID AllocateInstance() Returns Type Description InstanceID A new InstanceID linked to the newly created instance. CreateNode(UInt32, Vector3, Quaternion, Vector3) Called for every Node in the glTF file Declaration public void CreateNode(uint nodeIndex, Vector3 position, Quaternion rotation, Vector3 scale) Parameters Type Name Description UInt32 nodeIndex Index of node. Serves as identifier. Vector3 position Node's local position in hierarchy Quaternion rotation Node's local rotation in hierarchy Vector3 scale Node's local scale in hierarchy DisposeInstance() Frees up memory by disposing all sub assets. There can be no instantiation or other element access afterwards. Declaration public void DisposeInstance() GenerateMaterial(Int32) Create a new Material . Declaration public MaterialID GenerateMaterial(int materialIndex) Parameters Type Name Description Int32 materialIndex Material index used to query the material by the GLTFast.GltfImport. Returns Type Description MaterialID The Unique Identifier of the newly created material. Init() Used to initialize Instantiators. Always called first. Declaration public void Init() SetNodeName(UInt32, String) Sets the name of a node. If a node has no name it falls back to the first valid mesh name. Null otherwise. Declaration public void SetNodeName(uint nodeIndex, string name) Parameters Type Name Description UInt32 nodeIndex Index of the node to be named. String name Valid name or null SetParent(UInt32, UInt32) Is called to set up hierarchical parent-child relations between nodes. Always called after both nodes have been created via CreateNode before. Declaration public void SetParent(uint nodeIndex, uint parentIndex) Parameters Type Name Description UInt32 nodeIndex Index of child node. UInt32 parentIndex Index of parent node. Implements GLTFast.IInstantiator"
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.UGUniversalDecoder.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.UGUniversalDecoder.html",
    "title": "Class UGUniversalDecoder | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UGUniversalDecoder Main decoder used with a UniversalDecoderDataSource implementation. Inheritance Object UGProcessingNode UGDataSourceDecoder UGUniversalDecoder Inherited Members UGDataSourceDecoder.Input UGDataSourceDecoder.GetDataAvailabilityStatus(UGProcessingNode.NodeOutput) UGDataSourceDecoder.OutputCount UGDataSourceDecoder.GetOutput(Int32) UGProcessingNode.IsIdle UGProcessingNode.DataAvailabilityStatus UGProcessingNode.TaskManager UGProcessingNode.InputConnections UGProcessingNode.OutputConnections UGProcessingNode.SetTaskManager(ITaskManager) UGProcessingNode.Connect<T>(UGProcessingNode.NodeOutput<T>, UGProcessingNode.NodeInput<T>) Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public class UGUniversalDecoder : UGDataSourceDecoder, IDisposable Constructors UGUniversalDecoder(UGMaterialFactory, IEnumerable<UGDataSource>, Int32) Default constructor. Declaration public UGUniversalDecoder(UGMaterialFactory materialFactory, IEnumerable<UGDataSource> dataSources, int maximumSimultaneousContentRequests) Parameters Type Name Description UGMaterialFactory materialFactory Which material factory to be used by the renderer. IEnumerable < UGDataSource > dataSources Array of UGDataSource instance available to be loaded. Int32 maximumSimultaneousContentRequests The Unity.Geospatial.Streaming.UniversalDecoder.ExpansionScheduler.MaximumSimultaneousContentRequests will be set to this value. Properties IsProcessing true if the NodeContentManager is currently processing; false if in idle state. Declaration protected override bool IsProcessing { get; } Property Value Type Description Boolean Overrides UGProcessingNode.IsProcessing MaximumSimultaneousContentRequests This is the amount of files that will be loaded simultaneously. If the limit has been reached, items part of the queue needs to be completed before new ones can be added. Declaration public int MaximumSimultaneousContentRequests { get; } Property Value Type Description Int32 Remarks The higher the value, faster execution time you will get. But if the value is too high, slower it will get since the system will not be able to adapt when UGSceneObserver are in movement. If the value is too low, it will take more time to get a higher resolution, but you will gain reaction speed. ScheduleMainThread true if the decoder is currently processing.; false otherwise. Declaration public override bool ScheduleMainThread { get; } Property Value Type Description Boolean Overrides UGProcessingNode.ScheduleMainThread Methods Dispose() Releasing unmanaged resources. https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose . Declaration public override void Dispose() Overrides UGProcessingNode.Dispose() MainThreadProcess() Execute the next pending command part of the UGCommandBufferProcessor . Declaration public override void MainThreadProcess() Overrides UGProcessingNode.MainThreadProcess() MainThreadUpKeep() Request an update of the BoundingVolumeHierarchy<T> only if it's available. Declaration public override void MainThreadUpKeep() Overrides UGProcessingNode.MainThreadUpKeep() SetDetailObserverData(DetailObserverData[]) Change the DetailObserverData to evaluate on the next frame. Declaration public override void SetDetailObserverData(DetailObserverData[] data) Parameters Type Name Description DetailObserverData [] data Set the observers to this langword_csharp_Array . Overrides UGDataSourceDecoder.SetDetailObserverData(DetailObserverData[]) UpdateBvh() Execute a full round of update by getting the new expected TargetState , unloading all no more required GameObjects and load the newly required GameObjects . Declaration public async Task UpdateBvh() Returns Type Description Task Task to be executed by the UGSystem ITaskManager ."
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.UniqueContentTypeGenerator.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.UniqueContentTypeGenerator.html",
    "title": "Class UniqueContentTypeGenerator | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UniqueContentTypeGenerator Unique identifier generator used for ContentType registration. Inheritance Object UniqueContentTypeGenerator Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public class UniqueContentTypeGenerator Methods Generate() Create a new ContentType . Declaration public ContentType Generate() Returns Type Description ContentType The newly generated instance."
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.UniversalDecoderDataSource.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.UniversalDecoderDataSource.html",
    "title": "Class UniversalDecoderDataSource | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UniversalDecoderDataSource Base class that defines a layer of data available to be loaded via a NodeContentManager . Inheritance Object UGDataSource UniversalDecoderDataSource Ogc3dTilesDataSource TmsTerrainDataSource GltfDataSource Inherited Members UGDataSource.DataSourceID Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public abstract class UniversalDecoderDataSource : UGDataSource Constructors UniversalDecoderDataSource(UGDataSourceID) Default constructor. Declaration protected UniversalDecoderDataSource(UGDataSourceID dataSourceId) Parameters Type Name Description UGDataSourceID dataSourceId Scriptable object associated with this instance. Methods GetDecoderType() Type of UGDataSourceDecoder allowing to define with which other UGDataSource this instance can be used with. Declaration public override Type GetDecoderType() Returns Type Description Type The type of decoder associated with this instance. Overrides UGDataSource.GetDecoderType() InitializerDecoder(NodeContentManager) Initialize decoder by adding relevant nodes to the hierarchy and by initializing the content manager with the appropriately configured loaders. Declaration public abstract void InitializerDecoder(NodeContentManager contentManager) Parameters Type Name Description NodeContentManager contentManager The content manager to be initialized with this datasource InstantiateDecoder(UUIDGenerator, UGMaterialFactory, UGDataSource[], Int32) Create a new UGDataSourceDecoder instance allowing to decode / read from this source. Declaration public override UGDataSourceDecoder InstantiateDecoder(UUIDGenerator idGenerator, UGMaterialFactory materialFactory, UGDataSource[] dataSources, int maximumSimultaneousContentRequests) Parameters Type Name Description UUIDGenerator idGenerator Class instance to use to create unique identifier. UGMaterialFactory materialFactory Which material factory to be used by the renderer. UGDataSource [] dataSources Array of UGDataSource instance available to be loaded. Int32 maximumSimultaneousContentRequests The MaximumSimultaneousContentRequests will be set to this value. Returns Type Description UGDataSourceDecoder Overrides UGDataSource.InstantiateDecoder(UUIDGenerator, UGMaterialFactory, UGDataSource[], Int32)"
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.UriLoader.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.UriLoader.html",
    "title": "Class UriLoader | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UriLoader Loader to use to load data based on a URI . This loader is intended to be used with a INodeContentLoader allowing to reuse UriLoader for multiple INodeContentLoader . Inheritance Object UriLoader TmsTerrainUriLoader GltfUriLoader Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public abstract class UriLoader Constructors UriLoader(ILoaderActions) Default constructor. Declaration protected UriLoader(ILoaderActions loaderActions) Parameters Type Name Description ILoaderActions loaderActions Reference to the command buffer the UriLoader should publish it's requests to. Properties LoaderActions Reference to the command buffer the UriLoader should publish it's requests to. Declaration protected ILoaderActions LoaderActions { get; } Property Value Type Description ILoaderActions SupportedFileTypes Returns the files types that are supported by this content loader. Declaration public abstract IEnumerable<FileType> SupportedFileTypes { get; } Property Value Type Description IEnumerable < FileType > Methods LoadAsync(NodeId, UriNodeContent, double4x4) Load the content specified by the uri. Returns a task which, when completed, will return the InstanceId of the generated instance. Declaration public abstract Task<InstanceID> LoadAsync(NodeId nodeId, UriNodeContent content, double4x4 transform) Parameters Type Name Description NodeId nodeId BoundingVolumeHierarchy<T> NodeId requested to be loaded. UriNodeContent content Content holding the URI and transform information. double4x4 transform The transform to be applied to the underlying geometry Returns Type Description Task < InstanceID > The instance ID of the resulting geometry. Unload(InstanceID) Unload the specified instanceId Declaration public abstract void Unload(InstanceID instanceId) Parameters Type Name Description InstanceID instanceId The instance Id to be unloaded"
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.UriNodeContent.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.UriNodeContent.html",
    "title": "Class UriNodeContent | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UriNodeContent NodeContent associated with a specific UriLoader . Inheritance Object NodeContent UriNodeContent Inherited Members NodeContent.Type NodeContent.DataSource NodeContent.Bounds NodeContent.GeometricError NodeContent.AlwaysExpand NodeContent.NodeId Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public class UriNodeContent : NodeContent Constructors UriNodeContent(ContentType, UGDataSourceID, in DoubleBounds, Single, double4x4, IUriCollection) Default constructor. Declaration public UriNodeContent(ContentType type, UGDataSourceID dataSource, in DoubleBounds bounds, float geometricError, double4x4 transform, IUriCollection uris) Parameters Type Name Description ContentType type Type identifier allowing to figure which INodeContentLoader to execute when loading this content. UGDataSourceID dataSource The UGDataSource instance id this NodeContent refers to. Unity.Geospatial.HighPrecision.DoubleBounds bounds Limits of the node in space that will be evaluated within each UGSceneObserver . Single geometricError If the evaluated screen space error is higher than this value, the node will not be expanded. double4x4 transform Where to place the node once loaded. IUriCollection uris URI providing where the resource is accessible. Properties Transform The expected position of the node once loaded. Declaration public double4x4 Transform { get; } Property Value Type Description double4x4 Uri The URIs of the given content to load. Declaration public IUriCollection Uri { get; } Property Value Type Description IUriCollection"
  },
  "api/Unity.Geospatial.Streaming.UniversalDecoder.UriNodeContentLoader.html": {
    "href": "api/Unity.Geospatial.Streaming.UniversalDecoder.UriNodeContentLoader.html",
    "title": "Class UriNodeContentLoader | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UriNodeContentLoader Classes with NodeId LoadNodeAsync(NodeId, NodeContent) / UnloadNode(NodeId) capabilities. based on a URI . Inheritance Object UriNodeContentLoader GltfContentLoader Implements INodeContentLoader Namespace : Unity.Geospatial.Streaming.UniversalDecoder Assembly : solution.dll Syntax public class UriNodeContentLoader : INodeContentLoader Constructors UriNodeContentLoader(UriLoader) Default constructor. Declaration public UriNodeContentLoader(UriLoader uriLoader) Parameters Type Name Description UriLoader uriLoader UriLoader to use when loading / unloading nodes. Methods LoadNodeAsync(NodeId, NodeContent) Load the given NodeId given the provided NodeContent. Declaration public async Task<InstanceID> LoadNodeAsync(NodeId nodeId, NodeContent nodeContent) Parameters Type Name Description NodeId nodeId The NodeId of the node to be loaded. This should come directly from the bounding volume hierarchy. NodeContent nodeContent The node content that should be loaded by the content loader. Given that this is an abstract class, various implementations can be passed here. Returns Type Description Task < InstanceID > The newly created instance corresponding to the loaded content. UnloadNode(NodeId) Unload the given node. Declaration public void UnloadNode(NodeId nodeId) Parameters Type Name Description NodeId nodeId The NodeId of the node to be unloaded. This should come directly from the BoundingVolumeHierarchy. Implements INodeContentLoader"
  },
  "api/Unity.Geospatial.Streaming.UUIDGenerator.html": {
    "href": "api/Unity.Geospatial.Streaming.UUIDGenerator.html",
    "title": "Class UUIDGenerator | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class UUIDGenerator The UUID Generator is used to generate session unique identifiers for various geospatial internals. It is thread safe, ensuring that it can be accessed both from the main thread as well as from any other thread without worrying about thread safety. Inheritance Object UUIDGenerator Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class UUIDGenerator Properties Instance Create a new UUIDGenerator instance. Declaration public static UUIDGenerator Instance { get; } Property Value Type Description UUIDGenerator Methods GetInstanceID() Generate a new InstanceID Declaration public InstanceID GetInstanceID() Returns Type Description InstanceID InstanceID GetMaterialID() Generate a new Material ID Declaration public MaterialID GetMaterialID() Returns Type Description MaterialID MaterialID GetMeshID() Generate a new Mesh ID Declaration public MeshID GetMeshID() Returns Type Description MeshID MeshID GetTextureID() Generate a new Texture ID Declaration public TextureID GetTextureID() Returns Type Description TextureID TextureID"
  },
  "api/Unity.Geospatial.Streaming.VertexInterpolator.html": {
    "href": "api/Unity.Geospatial.Streaming.VertexInterpolator.html",
    "title": "Class VertexInterpolator | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class VertexInterpolator Class allowing to interpolate blocks of vertices from a source to a goal with a blending ratio. Inheritance Object VertexInterpolator Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public class VertexInterpolator Constructors VertexInterpolator(VertexAttributeDescriptor[]) Default constructor. Declaration public VertexInterpolator(VertexAttributeDescriptor[] vertexDescriptors) Parameters Type Name Description VertexAttributeDescriptor [] vertexDescriptors Attributes defining the vertices the new instance will interact with. Properties StreamCount Get the amount vertex buffer streams part of this instance. Declaration public int StreamCount { get; } Property Value Type Description Int32 VertexAttributeDescriptors Information about the VertexAttributes of a Mesh vertices . Mesh vertices vertex data comprised of different Vertex Attributes. For example, a vertex can include a Position, Normal, TexCoord0, and Color. Meshes usually use a known format for data layout, for example, a position is most often a 3-component float vector ( Vector3 ), but you can also specify non-standard data formats and their layout for a Mesh . You can use VertexAttributeDescriptor to specify custom mesh data layout in Mesh.SetVertexBufferParams . Vertex data is laid out in separate \"streams\" (each stream goes into a separate vertex buffer in the underlying graphics API). While Unity supports up to 4 vertex streams, most meshes use just one. Separate streams are most useful when some vertex attributes don't need to be processed, for example skinned meshes often use two vertex streams (one containing all the skinned data: positions, normals, tangents; while the other stream contains all the non-skinned data: colors and texture coordinates). Within each stream, attributes of a vertex are laid out one after another, in this order: VertexAttribute.Position VertexAttribute.Normal VertexAttribute.Tangent VertexAttribute.Color VertexAttribute.TexCoord0 VertexAttribute.TexCoord1 VertexAttribute.TexCoord2 VertexAttribute.TexCoord3 VertexAttribute.TexCoord4 VertexAttribute.TexCoord5 VertexAttribute.TexCoord6 VertexAttribute.TexCoord7 VertexAttribute.BlendWeight VertexAttribute.BlendIndices Not all format and dimension combinations are valid. Specifically, the data size of a vertex attribute must be a multiple of 4 bytes. For example, a VertexAttributeFormat.Float16 format with dimension 3 is not valid. See Also: SystemInfo.SupportsVertexAttributeFormat . Declaration public VertexAttributeDescriptor[] VertexAttributeDescriptors { get; } Property Value Type Description VertexAttributeDescriptor [] Methods DuplicateVertexData(SortedSet<Int32>, Int32, Dictionary<Int32, Int32>) Copy part of the vertex indices part of this instance to the given dictionary srcToDstIndexMap . Declaration public void DuplicateVertexData(SortedSet<int> srcIndices, int dstStartIndex, Dictionary<int, int> srcToDstIndexMap) Parameters Type Name Description SortedSet < Int32 > srcIndices Keys to copy to the srcToDstIndexMap dictionary. Int32 dstStartIndex Skip the vertices before this index. Dictionary < Int32 , Int32 > srcToDstIndexMap Copy the indices to this dictionary. GetPosition(Int32) Get the position of one vertex for the given index . Declaration public Vector3 GetPosition(int index) Parameters Type Name Description Int32 index Index of the array the VertexInterpolator was initialized with. Returns Type Description Vector3 The position of the vertex. GetVertexDataByteSize(Int32) Get the byte size for one given stream Declaration public int GetVertexDataByteSize(int stream) Parameters Type Name Description Int32 stream Index of the stream to get its size Returns Type Description Int32 The stream size. LerpUnclamped(Int32, Int32, Single, Int32) Linearly interpolates between the source to the destination. Declaration public void LerpUnclamped(int indexA, int indexB, float t, int indexDst) Parameters Type Name Description Int32 indexA Start of the interpolation index. Int32 indexB Goal of the interpolation index. Single t The blending amount to apply. Int32 indexDst Index where to save the result. SetPosition(Int32, Vector3) Change the position of a single vertex. Declaration public void SetPosition(int index, Vector3 pos) Parameters Type Name Description Int32 index Index of the vertex to modify. Vector3 pos The new position to set. SetVertexBuffers(Byte[][]) Vertices streams with the source / destination / result of the interpolation process. Declaration public void SetVertexBuffers(byte[][] vertexStreams) Parameters Type Name Description Byte [][] vertexStreams Blocks of vertices data."
  },
  "api/Unity.Geospatial.Streaming.Wgs84.html": {
    "href": "api/Unity.Geospatial.Streaming.Wgs84.html",
    "title": "Class Wgs84 | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Class Wgs84 Methods allowing to convert from / to GeodeticCoordinates when based on the Earth-fixed terrestrial reference system and geodetic datum: WGS84. Inheritance Object Wgs84 Namespace : Unity.Geospatial.Streaming Assembly : solution.dll Syntax public static class Wgs84 Methods ConvertRegionBoundingVolume(Double, Double, Double, Double, Double, Double) Convert a region as defined by lat, lon and elevation into an axis aligned bounding volume in ECEF space. Declaration public static DoubleBounds ConvertRegionBoundingVolume(double minLat, double maxLat, double minLon, double maxLon, double minEle, double maxEle) Parameters Type Name Description Double minLat Minimum latitude, in degrees Double maxLat Maximum latitude, in degrees Double minLon Minimum longitude, in degrees Double maxLon Maximum longitude, in degrees Double minEle Minimum elevation, in meters Double maxEle Maximum elevation, in meters Returns Type Description Unity.Geospatial.HighPrecision.DoubleBounds GeodeticToXzyEcef(GeodeticCoordinates, float3) Convert a geodetic (latitude/longitude) to a euclidean transformation. Declaration public static EuclideanTR GeodeticToXzyEcef(GeodeticCoordinates position, float3 eulerAngles) Parameters Type Name Description GeodeticCoordinates position The coordinates values representing the translation expressed in degrees and minutes.. float3 eulerAngles Orientation of the vector where zero (0, 0, 0) is pointing to the same direction as the normal. Returns Type Description EuclideanTR The converted translation / rotation. GetGeodeticCoordinates(double3) Convert a euclidean transformation to a geodetic (latitude/longitude) format. Declaration public static GeodeticCoordinates GetGeodeticCoordinates(double3 xzyEcef) Parameters Type Name Description double3 xzyEcef The position to convert. Returns Type Description GeodeticCoordinates The converted result. GetXzyEcefFromXzyEnuMatrix(GeodeticCoordinates) Convert a geodetic (latitude/longitude) to a euclidean matrix. Declaration public static double4x4 GetXzyEcefFromXzyEnuMatrix(GeodeticCoordinates origin) Parameters Type Name Description GeodeticCoordinates origin The position to convert as a matrix. Returns Type Description double4x4 The converted result. XzyEcefToGeodetic(double3, quaternion) Convert a euclidean transformation with its rotation to a geodetic (latitude/longitude) format. Declaration public static GeodeticTR XzyEcefToGeodetic(double3 position, quaternion rotation) Parameters Type Name Description double3 position The translation of the vector to convert. quaternion rotation The orientation of the vector to convert. Returns Type Description GeodeticTR The converted result."
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . [1.0.0] - 2022-08-15 Fix Euclidian Fly Camera's properties Global Fly Camera's properties UGCamaraBehaviours configurable properties [1.0.0-preview.3] - 2022-08-03 Modified Changed Ogc3dTiles extensions list to a class instead of a JsonToken. Rename UnityTerrain to TmsTerrain Renamed UGOmniCameraBehaviour to UGOmniObserverBehaviour Updated to unity glTFast 4.6.0 Updated High Precision Framework dependency to 1.0.0 Documentation IndirectionBlock is now internal. UGSynchronizationContext is now internal. Removed unused InstanceGroupID. Removed UGSceneObserver default constructor. Renamed MaterialProperty.VectorValue to MaterialProperty.Vector4Value Renamed MaterialProperty.Color to MaterialProperty.AlbedoColor Renamed MaterialPropertyType.ColorTexture to MaterialPropertyType.AlbedoTexture Renamed MaterialPropertyType.ColorValue to MaterialPropertyType.AlbedoColor Replaced EdgeCollection to a List extension. Renamed BuiltinLit to BuiltinLitOpaque to match the Material names. README file to direct contributors to CONTRIBUTING.md ### Fixed BuiltInLitOpaque is now working in Unity 2022. Fixed the Toggle Gui not drawn when no style is given. ### Added Getting Started guide on how to create a custom Material Factory. [1.0.0-preview.2] - 2022-06-08 Modified Make MaterialType readonly due to immutable hashcode, use SerializableMaterialType in editor inspector Refactored UGObjectPool for better performances. Using Unity Mathematics when converting WGS84 Removed UGEditorWindow, UGGeodeticExtentInspector, UGSkyboxInspector Renamed FlyCamera.setClipPlanes to updateClipPlanes to prevent clash between the property and the method Renamed UGSimpleSceneObserver.Implementation to UGSimpleSceneObserver.IImplementation Changed UGSystemBehaviour / UGBehaviourPresenter delegates to events Set NodeContent, UGMath to internal Set MaximumSimultaneousContentRequests back to 10 Changed WGS84 to a static class Changed many properties / fields to readonly UGMetadata now store object values instead of serialized data. Changed editor classes by using a wrapper allowing easier testing and uniformized the UI layout. ### Added SerializableMaterialType to allow for easy MaterialType serialization Documentation to explain the calculation of terrain extents when the dataset starts with non-zero min level Implement two task managers to enable single thread operation [1.0.0-preview.1] - 2022-05-11 Modified Use the SerializableDoubleBounds where necessary, since DoubleBounds is no longer serializable [1.0.0-preview.0] - 2022-05-11 Modified Separate extent modifier from UGSystem. Add sub-structs in UTR TileContent to group parameters. Add supported platform in the index doc page. Major refactor of the Universal Decoder. Now using Unity.Mathematics. Reimplementation of the priority queue to reduce idle CPU usage. Created FileType class allowing user own types. Allow to specify a different schema when decoding Ogc3dTiles. Created IOgcContentLoader allowing custom loaders. UnityTerrainContentLoader and OgcTilesetContentLoader now derive from HierarchyContentLoader defining our HLod decoding base solution. Create default material per alpha mode instead of overriding material properties at runtime. Change relative path to be streaming assets. ### Added Add a detail multiplier parameter on data sources to adjust level of detail per dataset. Ability to modify the maximum simultaneous loads via the the UGSystem. New UGSystem events: OnBeginProcessing, OnEndProcessing. OGC B3DM support. Add vertex color support for HDRP, URP, and Built-in render pipeline. Add transparency and alpha-test support for HDRP, URP, and Built-in render pipeline. ### Fixed Delay unloading to prevent unnecessary unloads when the observer come back to its previous position. Unity Earth zoom 0 is now loaded when the camera is far. Link from the inspector to the UGSystem advanced options was not valid. Sphere Bound requesting an array of 12 floats instead of 4 withing Ogc3DTiles. Ogc3DTiles nulls checks in case of empty content. Removed duplicate UGMetadataBehaviour component creation. Stability issues in UGSynchronizationContext tests. Inconsistent serialization of the UGExtentModifierBehaviour. Lists not getting populated in new System Inspector in Unity 2021. Update refinement mode and geometric error on tileset loading root node OGC 3D Tiles not applying Detail Multiplier to root tiles. [0.5.1-preview.0] - 2021-12-23 Fixed Support counterclockwise extent modifier Support negative DBound with extent modifier Connect URPLit smoothness to the underlying Unity material [0.5.0-preview.0] - 2021-11-04 Added Support for Omnidirectional camera Support material customization per instance data [0.4.0-preview.0] - 2021-11-03 Added Support relative path for data sources Fixed Ability to unload nodes that do not have content [0.3.3-preview.0] - 2021-10-03 Added Support for variable resolution Terrain Tiles Support edge extrusion for uncontinuous edges in mesh editor [0.3.2-preview.0] - 2021-09-16 Modified Migrate to Standard Unity Package format Split High Precision Framework repo from Streaming Framework Migrate documentation from Sphinx to Unity DocTools Updated to latest GLTFast Improved performance of many WGS84 functions ### Added Ability to stream UTR files for terrain Skirting in extent modifier Add control over mipmaps and aniso level Default material when material is not specified in GLTF file ### Fixed Compatibility with the Built-In Render pipeline Bugs related to geometric error, bounds and error specs in BVH [0.3.1-preview.3] - 2021-06-04 Added Support for multiple cameras A geodetic extent object which can be reused to define an extent for modifiers. The extent can also be modified at play-time. ### Modify Extent modifier to use the new geodetic extent object Extent modifier to support multiple vertex streams Documentation to reflect changes made to the extent modifier. ### Fix Memory leak which was detected in previous version [0.3.1-preview.2] - 2021-05-15 Added Support for hierarchical OGC 3DTiles tilesets Ability to generate HP Framework package only ### Modified Move 3DTile json parsing to another thread Split Universal decoder processing over multiple frames to reduce overall impact on performance Prioritize tiles based on the ratio between their geometric error and their error specification, causing closer objects to load first rather than the opposite in previous implementation. [0.3.1-preview.1] - 2021-05-12 Added Geospatial Synchronization Context to better control execution time of await/async in GLTFast. ### Modifier Make it possible to have an Camera that is located in world space rather than being located in Universe space. Make it possible for extent modifier to deal with children [0.3.1-preview.0] - 2021-05-10 Added Universal OGC 3D Tiles loader Dependency on GLTFast for 3D tile loader ### Modified HPTransform optimizations Changes to the internal presenter structure to support children (required for GLTFast) [0.3.0-preview.0] - 2021-04-02 Added HDRP Support via HDRP Material Factory UGSystem Modifier Stack UGExtentModifier to remove or contain dataset extents HDRP Test project (dev only) ECEF Coordinate system inspector Force-Lit texture support on Cesium-Native, allowing unlit datasets to be pushed into lit shaders for relighting Presenter concept has been added to UGSystem, allowing datasets to be spawned on different render layers as well as on different GameObjects. ### Modified Significant changes to documentation Moved away from .unitypackage and into package manager workflow UGSystem has become UGSystemBehaviour. Similar name changes have been made across the API for a uniform naming convention and preparation for future DOTS support. Changed the way sample datasets are loaded via package manager Import through package manager rather than .unitypackage UGSystem now uses a node graph for it's processing across multiple internal modules. This standardizes the way processing is done within the system. HPTransform coordinate system is now saved to editor preference rather than static variables, ensuring coherence from edit to play mode and from HPTransform to HPRoot and vice-versa. Geodetic coordinate system inspector now shows pitch, yaw and roll rather than heading, pitch, roll. Order has been changed to fit with Euler angles and nomenclature has been standardized to something more familiar. Build script has been cleaned up (dev only) Demo application has been migrated to HDRP UGSystem configuration errors will show a single explicit error message rather than pop an undescript message on every frame. Cesium Native error messages are still non-descript. Implemented proper error message on missing Cesium-Ion token [0.2.1-preview.0] - 2021-02-25 Fixed Perpetual dialog that opened up when adding an HPTransform to a prefab. [0.2.0-preview.0] - 2021-02-22 Modified THIS IS A COMPLETELY NEW VERSION OF THE API THAT INCORPORATES A HIGH PRECISION RENDERING FRAMEWORK. SEE BELOW FOR PRIMARY CHANGES: The UGCamera must now be a child of the UGSystem The UGCamera must now have an HPTransform component The UGSystem must now have an HPRoot component The UGSkybox must now be a child of the UGSystem The UGSkybox must now have an HPTransform component Static rebasing is no longer implemented by the UGSystem, rather it is implemented via the HPRoot. This allows for dynamic rebasing as well as static rebasing, via the HPRoot/HPTransform. All objects instantiated by the UGSystem now have an HPTransform component. [0.1.0-preview.5] - 2020-12-15 Added Docs: Doxygen + Breathe for API docs Docs: Wrote API docs for primary classes Makefile: Automated zip archive for builds Makefile: Added Unity Tests to build pipeline ### Modified Fly Camera script has been modified such that it is no possible to disable the automatic clip plane adjustments Build Preprocessor populates required shaders in build Terrain shaders had a Red Color that was shown when textures are not loaded. This was intended for debugging issues during development, not in a release. A UNITY_GEOSPATIAL_DEBUG define has been added to enable or disable this feature. Since new projects do not have this define, a black color will be shown instead, by default. ### Fixed Fixed bug where a light in b3dm file would cause the application to crash. Fly Camera script has been fixed such that it is no longer possible for the camera to get stuck looking down. [0.1.0-preview.4] - 2020-11-07 Added Docs: Added license file to .unitypackage Docs: Added license file in root of build product Docs: Added page to guide use of multiple layers ### Modified Fly Camera now controls near clip plane and far clip plane automatically Refactored some private variables in Fly Camera to match coding standard [0.1.0-preview.2] - 2020-11-03 Added Docs: Screenshots for more explicit documentation Docs: How to disable fog in Getting Started ### Changed Changed project file structure Updated Makefile accordingly Built documentation into the Makefile [0.1.0-preview.1] - 2020-11-02 Added Initial release for internal review"
  },
  "index.html": {
    "href": "index.html",
    "title": "Home Page. | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Home Page. This is the home page for this package."
  },
  "license/index.html": {
    "href": "license/index.html",
    "title": "| Unity Geospatial Streaming | 1.0.0",
    "keywords": "window.location.replace('LICENSE.html')"
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| Unity Geospatial Streaming | 1.0.0",
    "keywords": "Unity Geospatial Streaming copyright © 2022 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects (see https://unity3d.com/legal/licenses/unity_companion_license ). Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "manual/Architecture/material-factory.html": {
    "href": "manual/Architecture/material-factory.html",
    "title": "Material Factory | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Material Factory The material factory allows the UG System to take function with any render pipeline, provided that the appropriate material factory has been created and has been assigned. The Unity Geospatial Framework comes with material factories for both the Built-in render pipeline, the High Definition Render Pipeline as well as the Universal Render Pipeline. Create A Material Factory New Material Factory First, in your Asset directory, create a new Material Factory Object by right clicking in a and selecting Create > Geospatial > Rendering > Simple Material Factory . Now add a new element by clicking the + sign. We must create an element for each Material combination that we will use. The Lighting value defines if the selected material receives light contribution. The Alpha Mode defines how the selected material manage shaders with transparency values. The Material is the base material that will be applied to instances that requires the selected lighting and alpha mode. The Property Object is the selected material mapping for each property type (albedo, texture, smoothness, alpha). For our example, create a new Material based on HDRP/Lit. Set the lighting to Lit , the alpha to Opaque and the material to our newly created HDRP Material. Leave the Property Object as is for the moment. New Shader Properties In your Asset directory, create a new Shader Properties Object by right clicking in a directory and selecting Create > Geospatial > Rendering > Shader Properties . This new properties list allow to map property types to material properties. For example, if we specify the property type to be Albedo Color and we set the name to _BaseColor , each time a dataset needs to set the color to the material albedo channel, it will set its value to the _BaseColor property of the assigned material. We then return to our created Material Factory Object and we set the property object to our newly created Shader Properties Object. We now have a functional Material Factory that we can assign to a System. Still, if we would want to support transparency, unlit materials, textures and smoothness, we would need to create new material factory elements and the corresponding shader properties. Use the Deferred Material Factory Using the Simple Material Factory allows to customize how to instantiate the materials independently to the instance. But if you want to create a shader based on the instance attributes (color by height or an other metadata field for example), you would need to use the Deferred Material Factory instead and implement your own material instantiation via a custom UGSystem ."
  },
  "manual/Architecture/universal-decoder.html": {
    "href": "manual/Architecture/universal-decoder.html",
    "title": "Universal Decoder | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Universal Decoder The universal decoder is a decoder implementation that has the intent of supporting many different content types within the same decoder, provided the given content is HLODed and can be represented within a bounding volume hierarchy. In its current state, the Universal decoder can be used to decode a subset of the 3DTiles specification, GLTF files as well as Unity GIS terrain data. Internal Structure Looking at the internal structure of the Universal Decoder class, we can see that it is composed of many simple classes that each play their own role in spatializing and loading pieces of content. Let us go over them in order to better understand their roles and responsibilities. DetailObserverData : The DetailObserverData class is the starting point for any decoder. It represents cameras and sensors in the scene such that we can determine how much detail is required at any point in space. TargetStateController : The TargetStateController uses the DetailObserverData in order to determine which parts of the BoundingVolumeHierarchy needs to be expanded and further detailed and which parts should be collapsed, removing detail and, thus, reducing the overall memory footprint. The HierarchyTargetControl , sets the target state of each node in the hierarchy such that the target state represents the steady state of the hierarchy. BoundingVolumeHierarchy : The BoundingVolumeHierarchy simply represents the state of system. All of the information relating to each node is contained within the hierarchy. However, the hierarchy is a passive class that does not do any processing. CurrentStateController : The CurrentStateController translates commands to load, unload, show and hide nodes such that both the current state in the BVH is up-to-date and so that the corresponding instructions have been sent to the UGContentManager . ExpansionScheduler : The ExpansionScheduler observes the target state of each node and determines the order in which they should be expanded and/or collapsed in order to maximize the level of detail seen by the user as well as keep the system as reactive as possible when cameras change positions. It has a readonly relationship with the hierarchy (with the exception of a cache it can use to store implementation-specific data) and interacts with the CurrentStateController to change the state of the hierarchy. UGContentManager : The UGContentManager makes use of multiple registered UGContentLoader in order to load nodes of various content types. It is also responsible for building a simultaneous download queue such that multiple UGContentLoader , which can be blocked temporarily by external resources, can work in parallel. UGCommandBuffer : The UGCommandBuffer allows content loaders to work on threads that are separate from the main thread and resynchronizes a series of output commands with the main thread. This way, mesh, texture and material data can be deserialized off of the main thread, but be instantiate using UnityEngine types on the main thread. Note: For the sake of simplicity, the diagram below does not illustrate the interfaces that link the classes to one another. For this purpose, detailed diagrams have been added in the subsequent sections of this document. Bounding Volume Hierarchy The BoundingVolumeHierarchy is responsible for storing data pertaining to each node in the BVH as well as their target state and current state. Its only purpose is to represent the state and relation of the nodes in memory. This class is broken into four separate interfaces to limit how external classes can affect the BVH: IEditHierarchyNodes : Allows external classes to add and remove nodes from the BVH. This is primarily be used by the UniversalDecoder class for initialization as well as various UGContentLoader in order to dynamically expand the size of the BVH. IEditTargetState : Allows the TargetStateController to read the information required to determine and set the target state of each node. IEditCurrentState : Allows the CurrentStateController to set the current state of the node as well as query a node's NodeContent such that it can also trigger the loading process. IPrioritizeHierarchy : Allows the CompansionScheduler to read the target state of each node of the hierarchy, information pertaining to the node's error as well a cache that the CompansionScheduler can use to store data required for its internal logic. Other than the aforementioned cache, this interface is essentially readonly. Target State Controller Class The TargetStateController communicates with the IEditHierarchyTargetState interface, which allows it to explore the hierarchy, obtain information pertaining to each node's geometric error and bounding volume in order to compute a target state as well as an error specification. The responsibility of computing the error specification has not be separated from that of computing the target state because, for the sake of computational efficiency, we do not want to be computing the error specification for all nodes, we simply want to compute the error specification of any node which has a parent with an expanded target state. The error specification of other nodes is irrelevant and does not need to be computed, thus saving a tremendous amount of CPU time. The TargetStateController also needs to receive none or more DetailObserverData. Should no DetailObserverData be provided, all target states should be set to unloaded. The DetailObserverData is used to determine whether a node should be expanded or collapsed, where a result of expanded from one detail observer supersedes a result of collapsed from another. Unlike the current state, the target state does not dictate whether a node should be loaded or not. It only determines whether a node is expanded or collapsed. Current State Controller Class The CurrentStateController has the purpose of ensuring that the current state of the hierarchy is always valid and that the corresponding content has been loaded and has the appropriate visibility status. It exposes a simple set of methods which allows the CompansionScheduler to expand and collapse nodes without needing to worry about whether a node is loaded or not and without needing to worry about which instructions should be sent to the UGContentManager . Additionally, it provides information to the CompansionScheduler as to how many nodes are currently being loaded such that it can throttle the number of nodes to expand and limit the number of simultaneous web and IO operations. ExpansionScheduler The ExpansionScheduler observes the difference between each node's target state and it's current state and progressively causes the two to converge. Using the error metrics, it also determines the order in which nodes should be collapsed and expanded. It holds an essentially readonly interface to obtain the information it needs from the BVH and it applies the desired changes via the ICurrentStateController . The ExpansionScheduler also has a data cache that it can use on each node where it can store timers or other node-specific variables needed for internal logic. Bounding Volume Hierarchy State The BoundingVolumeHierarchy relies heavily on the concept of target and current state. All nodes have both a target state and a current state. Understanding how these states relate to each is key to understanding how the bounding volume hierarchy functions. Target State The target state represents the steady-state of each node without consideration for optimizations. In short, it expresses the visibility of the nodes should the DetailObserverData remain unchanging for an infinite amount of time. It is a binary state that can either be set to Expanded or Collapsed . When collapsed, this indicates that it's children should not be visible and that the content of the given node should be. When expanded, this indicates that it's children should be visible but the given node should respect the replacement mode parameter. However, a change of state may take multiple frames to come into effect, which brings us to the current state. Current State The current state represents the actual state of a node and its relevant content. Unlike the target state, the current state is not a single binary but rather a triplet of binary states. Each of these binary states are detailed below: Name False True Expanded Collapsed, children are hidden Expanded, children may be visible Loaded Node content has not yet been loaded Node content has been loaded Visible Node content is hidden Node content is visible Given the above states, it is obvious that some states are not possible and cannot make sense. Here are a few cases that need to be safe-guarded against: A node cannot be visible and unloaded, regardless of the expanded state. If a node is expanded and its refinement mode is additive, it cannot be hidden."
  },
  "manual/FileFormats/ogc-3d-tiles.html": {
    "href": "manual/FileFormats/ogc-3d-tiles.html",
    "title": "OGC 3D Tiles | Unity Geospatial Streaming | 1.0.0",
    "keywords": "OGC 3D Tiles The Geospatial Framework offers a partial support for the OGC 3DTiles standard. The following is a list of features that not or are only partially supported: Section 11 - Declarative styling specification is not supported at all In terms of content, only GLB payloads are currently supported. b3dm, i3dm pnts and cmpt contents are not supported. However, nested tilesets are properly supported. Link to 3D Tiles specification: https://docs.opengeospatial.org/cs/18-053r2/18-053r2.html"
  },
  "manual/FileFormats/tms.html": {
    "href": "manual/FileFormats/tms.html",
    "title": "Terrain Management System - Version 1.0 | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Terrain Management System - Version 1.0 The Terrain Management System format is a proprietary mesh format designed to be streamed efficiently within the geospatial streaming framework. Its primary objective is to provide data that can easily be converted into a UnityEngine.Mesh but formatted in such a way that it can easily be procedurally augmented to attenuate or remove seams between tiles and efficiently sampled such that the application layer can easily determine heigh above ground at any point in space. File structure The Terrain Management System is designed to be hosted on a static web server or within a local folder structure. The imagery and elevation, generated at multiple resolutions is distributed within a quad tree structure such any area of interest can be efficiently fetched at any resolution. The structure of the tree is defined within a terrain.json file, which informs the streamer of the extent of the dataset, its maximum resolution, as well as other parameters which may affect the folder structure's layout. The folder structure is expected to be as follows: <Root Folder> - terrain.json - 0 // zoom level - 0 // column number - 0.utr // row terrain - 0.jpg // row imagery - 1.utr - 1.jpg - 2.utr - 2.jpg - ... - 1 - ... - 2 - ... - ... - 1 - ... Row and Column order Rows and columns will be ordered north to south and west to east respectively. In other words, the north-most row for a given zoom level will have a row number of zero and the west-most column will have a column number of zero. Terrain.json Specification The terrain.json files allows the streamer to predict the exact folder structure such that it can directly query the files of interest. It contains the following properties within a json object: Example terrain.json File The following is an example terrain.json file which describes a double-head quad-tree which spans the entire globe, down to zoom-level 13. { \"version\":\"1.0\" \"extent\": { \"minLat\": -90, \"maxLat\": 90, \"minLon\": -180, \"maxLon\": 180 }, \"setLimits\": { \"layout\": 277, \"minLevel\":0, \"maxLevel\":13, \"minCol\":0, \"minRow\":0, \"maxCol\":1, \"maxRow\":0 } \"content\": { \"terrainFormat\":\"utr\", \"terrainUri\":\".\", \"imageryFormat\":\"jpg\", \"imageryUri\":\".\" } } Terrain Property Type Description Default version string The major and minor version of the file format. Minor version increments must remain backward compatible. reqd extent object The dataset's extent reqd setLimits object Properties pertaining to the file structure reqd content object Properties pertaining to the content files reqd Terrain.version The version of the terrain format being used which follows semantic versioning. Terrain.extent Property Type Description Default minLat double The minimum latitude of the dataset. This number is expected to be between -90 and 90. reqd maxLat double The minimum latitude of the dataset. This number is expected to be between -90 and 90. reqd minLon double The minimum longitude of the dataset. This number is expected to be between -180 and 180. If a local dataset were to sit on the anti-meridian, splitting it into two datasets would be required. Few datasets are expected to require this. reqd maxLon double The maximum longitude of the dataset. This number is expected to be between -180 and 180. If a local dataset were to sit on the anti-meridian, splitting it into two datasets would be required. Few datasets are expected to require this. reqd Terrain.setLimits Property Type Description Default globalDiv int An integer that defines how the tile structure maps to real-world coordinates. See section on Terrain.setLimits.Layout for more information. reqd minLevel int The minimum zoom level of the dataset. For a full dataset, this should always be zero. However, datasets can start at any zoom level. 0 maxLevel int The maximum zoom level of the dataset, inclusively. In other words, if a value of 10 were to be contained in this property, it would be expected that the folder structure contains zoom-levels from [0, 10] . reqd minCol int The minimum column (inclusively) of the dataset within the minimum zoom level. reqd maxCol int The maximum column (inclusively) of the dataset within the minimum zoom level. reqd minRow int The minimum row (inclusively) of the dataset within the minimum zoom level. reqd maxRow int The maximum row (inclusively) of the dataset within the minimum zoom level. reqd Calculation of terrain extents for datasets with non-zero minimum level The value of minLat , maxLat , minLon , and maxLon are relative to the min level of the dataset. The following is an example which shows the property values of Terrain.extent and Terrain.setLimits , when the dataset with layout 277 starts with a min level > 0: \"extent\": { \"minLat\": 0, \"maxLat\": 90, \"minLon\": -90, \"maxLon\": 90 }, \"setLimits\": { \"layout\": 277, \"minLevel\":1, \"maxLevel\":2, \"minCol\":1, \"minRow\":1, \"maxCol\":2, \"maxRow\":1 } Terrain.content Property Type Description Default terrainFormat string See Terrain.content.terrainFormat for more information \"none\" terrainUri string Uri to the folder containing the terrain data \".\" imageryFormat string See Terrain.content.imageryFormat for more information \"none\" imageryUri string Uri to the folder containing the imagery data \".\" Terrain.setLimits.Layout This 2D distribution of tiles can be laid out multiple ways to represent the globe. The global division defines how the 2D distribution maps to a 3D surface such as the earth. Currently, only one division mode is specified but many more could be specified to represent bodies other than the earth as well as accommodate S2-like layouts, for example. ID Z0 Dims (WxH) Subdivision Proportions Elevation Reference 277 2x1 Equal and uniform geodetic subdivision according to EPSG4326. For example, a tile measuring 45deg x 45deg would break into four tiles measuring 22.5deg x 22.5deg, regardless of latitude. WGS84 Terrain.content.terrainFormat The format of the terrain files contained within the dataset. This can take one of the following values: none: Indicates that no elevation data is contained within the dataset. utr: Indicates that the elevation data is in utr format, as described in the present document. See the section on Terrain Format for more information about the utr files. Terrain.content.imageryFormat The format of the imagery files contained within the dataset. This can take the following values: none: Indicates that no imagery is provided in the dataset. jpg: Indicates that jpg files have been provided in the dataset png: Indicates that png files have been provided in the dataset. See the section on Imagery Format for more information about the expected imagery formats. Terrain Format A .utr file is a binary file that contains mesh information about the terrain. Each file is inherently self-sufficient and can be individually turned into a mesh. The layout of the binary file follows the following C# data struct: [StructLayout(LayoutKind.Sequential)] public struct Header { public fixed byte[4] magic public unsigned int fileByteSize; public int type; public unsigned short majorVersion; public unsigned short minorVersion; } public struct TileData { public unsigned int layout; public double minLon; public double maxLon; public double minLat; public double maxLat; public double minElevation; public double maxElevation; public float geometricError; public unsigned short vertexBufferOffset; public unsigned short vertexBufferCount; public unsigned short trianglesOffset; public unsigned short trianglesCount; public unsigned short northEdgeStart; public unsigned short northEdgeCount; public unsigned short northEdgeExtra; public unsigned short eastEdgeStart; public unsigned short eastEdgeCount; public unsigned short eastEdgeExtra; public unsigned short southEdgeStart; public unsigned short southEdgeCount; public unsigned short southEdgeExtra; public unsigned short westEdgeStart; public unsigned short westEdgeCount; public unsigned short westEdgeExtra; } [StructLayout(LayoutKind.Sequential)] public struct Vertex { public unsigned short u; public unsigned short v; public unsigned short z; public short nu; public short nv; } [StructLayout(LayoutKind.Sequential)] public struct Triangle { public short a; public short b; public short c; } The header must correspond to the first bytes contained within the file. If the tile is a non-empty tile, the TileData must then immediately follow. However, the byte structure following these two sections can be arranged and padded arbitrarily, provided that the start address of the buffers have been correctly attributed within the header. Header The header is comprised of the following properties: Property Description magic 4 unique bytes to identify the file. These are always utrm fileByteSize The total size of the file, in bytes. type The type of the given terrain data 0 = Empty without children 1 = Empty with children 25 = TileData without children 26 = TileData with children majorVersion The major version of this tile. An increment in the major version is expected to require a new version of the decoder minorVersion The minor version of this tile. An increment in the minor version is expected to continue working with previous decoders and only provides extra information. TileData If the terrain is of tile type, it is expected that a tiledata block follows immediately after then header. The tileData block has the following properties: Property Description layout Same as Terrain.setLimits.layout minLon The minimum longitude of the tile, in degrees maxLon The maximum longitude of the tile, in degrees minLat The minimum latitude of the tile, in degrees maxLat The maximum latitude of the tile, in degrees minElevation The minimum elevation of the tile, relative to the reference specified in the terrain.json file. maxElevation The maximum elevation of the tile, relative to the ellipsoid specified in the terrain.json file. vertexBufferStart The start of the vertex buffer relative to the start of the file, in bytes. vertexBufferCount The number of vertices represented within the vertex buffer. trianglesStart The start of the index buffer relative to the start of the file, in bytes. trianglesCount The number of triangles represented in the index buffer. northEdgeStart The starting index of the vertices which compose the north edge of the tile. northEdgeCount The number of vertices which compose the north edge of the tile. northEdgeExtra The last vertex of the north edge. Can be set to 65535 if unused. eastEdgeStart The starting index of the vertices which compose the east edge of the tile. eastEdgeCount The number of vertices which compose the east edge of the tile. eastEdgeExtra The last vertex of the east edge. Can be set to 65535 if unused. southEdgeStart The starting index of the vertices which compose the south edge of the tile. southEdgeCount The number of vertices which compose the south edge of the tile. southEdgeExtra The last vertex of the south edge. Can be set to 65535 if unused. westEdgeStart The starting index of the vertices which compose the west edge of the tile. westEdgeCount The number of vertices which compose the west edge of the tile. westEdgeExtra The last vertex of the west edge. Can be set to 65535 if unused. Note 1: Edge data is expected to be laid out such that they are ordered clock-wise when viewed from above. Note 2: Edge data is expected to include both corners. Note 3: The extra vertex can be used to indicate the last vertex of the edge, should the last vertex need to be discontinuously laid out in the vertex buffer. If possible, prefer a continuous vertex layout and set the extra to 65535. It is normal and expected that at least one edge requires the use of the extra. Vertex Data The vertex data is comprised of the following properties: Property Description u The longitude of the vertex relative to minLon and maxLon . A value of 0 will make the longitude of this vertex correspond exactly to minLon and a value of 2^16-1 would correspond exactly to maxLon . Vertices on the western-most edge of the tile are expected to have values of 0 and vertices on the eastern-most edge of the tile are expected to have values of 2^16-1 . v The latitude of the vertex relative to minLat and maxLat . A value of 0 will make the latitude of this vertex correspond exactly to minLat and a value of 2^16-1 would correspond exactly to maxLat . Vertices on the northern-most edge of the tile are expected to have values of 0 and vertices on the southern-most edge of the tile are expected to have values of 2^16-1 . z The elevation of the vertex relative to maxElevation and minElevation . A value of 0 will make the elevation of this vertex correspond exactly to minElevation and a value of 2^16-1 would correspond exactly to maxElevation . It is normal and expected normal for values of 0 and 2^16-1 to appear in this field. n u & n v Two of the tree normal values of any given vertex. See section on Calculating Normals for more information. Index Data The index data is used to form triangles with the vertices specified in the vertex buffer. Each triangle is comprised of 3 vertices arranged in clock-wise winding order. The integers used represent the index of the vertex within the buffer. In other words, a value of 0 would represent the very first vertex within the vertex buffer. Calculating Normals Normals provided within a tile need to be converted over to normals that can be represented on the GPU. This is how to achieve this conversion: Assuming x, y and z which follow the ECEF standard and a set of reference vectors r u , r v and r w which form a orthonormal set where r w represents an up vector relative to the elevation reference, r u represents a vector pointing due-east and r v represents a vector pointing due-north. The normal vector n would be derived using the following expressions: m u = 1/32768 * n u m v = 1/32768 * n v m w = sqrt(1 - m u 2 - m v 2 ) n = m u * r u + m v * r v + m w * r w Conversely, for each vertex in a mesh defined in ECEF, the same r u and r v described above can be used to compute n u and n v from normalized vector n defined within the ECEF coordinate system. n u = 32768 * dot(n, r u ) n v = 32768 * dot(n, r v ) Imagery Format The imagery of each cell is expected to respect the following constraints: Imagery is expected to be either in jpg or png format. The format and resolution of all images at all zoom levels is identical. The resolutions of the images are equal in both dimensions. The resolution of the imagery is a power of 2. The color space of the imagery is encoded sRGB. The images are oriented such that north is up and east is right."
  },
  "manual/GettingStarted/first-time-setup.html": {
    "href": "manual/GettingStarted/first-time-setup.html",
    "title": "First Time Setup | Unity Geospatial Streaming | 1.0.0",
    "keywords": "First Time Setup Open or Create a Compatible Project The Unity Geospatial Framework currently supports the built-in render pipeline, the Universal Render Pipeline as well as the High Definitions Render Pipeline for Unity versions 2020.2. and above. Although you can use any of the aforementioned render pipelines and any project you would like, this tutorial will guide you through the process of getting up and running with HDRP inside of a fresh Unity project. To begin, create a new project using the HDRP template. Import the Package In order to import the package, we will use Unity's Package Manager. Open it by clicking Window -> Package Manager Once the package manager has appeared, click on the + icon at the top left of the screen and select Add package from git URL... . Add all three following packages, in the following order. The gis.streaming-framework package must be added last as it has dependencies on the two other packages. git@github.com:Unity-Technologies/glTFast.git git@github.com:Unity-Technologies/com.unity.gis.high-precision-framework.git git@github.com:Unity-Technologies/com.unity.gis.streaming-framework.git Basic Scene Setup Create a new scene by clicking File -> New Scene and select the Basic Outdoor (HDRP) scene template. Delete the Main Camera . In the Scene Hierarchy's context menu, select Geospatial -> Geospatial System . This will create a new GameObject in the scene with a UG System component and a few child objects. Creating a Data Layer By default, the UGSystem doesn't display anything. We need to create and provide a geospatial data source. We're going to begin by creating a data source that will point the UGSystem towards the Unity Earth dataset. Download the UnityEarth-610m-v3.0 and decompress the archive anywhere on your machine. In your asset's right-click context menu select Create -> Geospatial -> Data Sources -> TMS Terrain . Name this newly created asset UnityEarth . Select the asset and, in the inspector, set the URI field of the asset to file:///c:/path-to-earth-asset/terrain-hdrp.json Since this data source is unlit by default, which won't take advantage of the HDRP, let's also force the data source's materials to be lit by changing the Lighting setting from Default to Lit . Configure the UGSystem Select the UGSystem and, in the inspector, apply the following configurations: Leave the Scene Observers untouched. By default, it will point towards the camera object contained within the system. Add the UnityEarth asset you created in the previous step to the data sources. Leave the modifiers untouched. Leave the Presenters untouched. By default, there will be a single presenter which will instantiate all of your data sources on the default render layer. Set the material factory field to the HDRP Material Factory . Leave the advanced options untouched. Adjust Settings IMPORTANT! The default settings in a new HDRP project are not ideal to get started with the geospatial framework. We recommend making the following simple changes just to get started. Keep in mind these settings are just a functional starting point. Different applications may/will required significantly different settings from the ones shown below. Input System Under Edit -> Project Settings -> Player -> Other Settings -> Active Input Handling make sure the value is either set to Input Manager (Old) or to Both . This is only necessary for the example Fly Camera script to work. If you write your own camera controller, feel free to use the input system of your choosing. Fog By default, the fog will completely occlude the planet on both URP and HDRP. To disable it, select the Sky and Fog Volume in the Hierarchy window and, in the inspector, enable the fog override and disable the fog. Procedural Sky Settings HDRP has default sky settings that are not optimal for low resolution terrain. We recommend using these settings to get started. Note that the values we are proposing are not realistic values. However, without these settings, you will experience a horrendous golf-ball effect when the camera is away from the surface of the planet. We are working on finding a better solution for the future. Testing and Exploring When you enter play mode, it will take a few seconds for the first geometry to load. Normally, if everything is working as expected, you should be seeing something similar to the following screenshot. Now, feel free to explore the world, using the Fly Cam! It is very similar to Unity's scene camera controls: w a s d : Move and Strafe e : Move Up q : Move Down Right Mouse Button : Pan / Tilt Shift : Fast Move Scroll : Increase/Decrease movement speed"
  },
  "manual/GettingStarted/frequently-asked.html": {
    "href": "manual/GettingStarted/frequently-asked.html",
    "title": "Frequently Asked Questions | Unity Geospatial Streaming | 1.0.0",
    "keywords": "Frequently Asked Questions How do I upgrade the project? In order to upgrade the package to a newer version, simply remove the old package and point towards the new package. Why is everything coming out white? It is very likely that the default fog settings are too aggressive. We recommend disabling the fog completely during setup then adjusting it for your application. Why is everything coming out black? It is very likely that the default fog settings are too aggressive. We recommend disabling the fog completely during setup then adjusting it for your application. Why is nothing being rendered? Firstly, start by checking whether geometry is being generated in the scene. If no geometry is being generated, double check you UGSystem configuration. If geometry is being generated, check the camera's clipping planes. Planet-scale scenes will require very large clipping plane values while moving close to the surface of the globe will required much smaller clipping plane values. How do I host my own 3DTiles Package? 3DTiles can easily be hosted on a static web server. This can be done with nodejs, python or Apache. Once the web server is up and running, simply create a 3DTile dataset that points towards it. How can I add a custom asset to the scene? GameObjects can be added to the scene as you normally would in Unity. However, unless you are using a static rebasing scheme, you will be required to add an HPTransform to the root GameObject. See Known Limitations for a better understanding of what assets may not work as expected."
  },
  "manual/GettingStarted/known-limitations.html": {
    "href": "manual/GettingStarted/known-limitations.html",
    "title": "Platform Support | Unity Geospatial Streaming | 1.0.0",
    "keywords": ".md# Known Limitations Platform Support Currently, only 64 bit windows is fully tested. However, the framework is reported to work on other platforms. Physics Physics can only work in a static rebasing context due to the performance cost of moving colliders. Navigation Mesh Unity's navigation system cannot pull data from the Geospatial framework at the current time. Additionally, authored navigation meshes can only be used in a static rebasing context. Particle Systems World-space particle simulations may or may not behave as expected depending on the rebasing strategy that is used by the high precision rendering scheme. If dynamic rebasing updates the HPRoot , particles simulated in world space will appear to jump around as a function of the rebasing. Scripts Any script that reads world-space positions will likely behave strangely when using the High Precision Framework. These scripts would need to be written such that only relative values are used or so that they use the HPTransform component rather than the Transform component. Shaders Shaders that rely on world space coordinates, such as tri-planar shaders will behave oddly when used with the High Precision Framework as the world space is constantly being adjusted with dynamic rebasing schemes. Transparent and Alpha-tested materials Transparent material or alpha-tested material is not supported in URP for Unity version below 2021. Baked Lighting Baked lighting is not supported due to the unavailability of the streamed data at editor time. However, textures with lighting data can be published to the source and streamed using unlit materials. Occlusion Culling As occlusion culling requires static editor-time geometry, it is not supported. Individual layers decoders may support their own implementation of occlusion culling to improve performance and improve bandwidth requirements."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "GIS Streaming Framework | Unity Geospatial Streaming | 1.0.0",
    "keywords": "GIS Streaming Framework Introduction The GIS Streaming Framework is designed to stream planet-scale environments into the Unity Editor. It is a flexible framework that provides an abstraction layer to the various geospatial layers that can be streamed into the engine. It also includes a streaming implementation for the OGC 3D Tiles format. Notice Currently, only 64 bit windows version is supported. The GIS Streaming Framework version v1.0.0 is compatible with the following versions of the Unity Editor: 2020.3 and later The GIS Streaming Framework is not yet fully integrated with all of Unity's subsystems, such as physics and navigation mesh . See the dedicated page Known Limitations for more information. Package Dependencies The GIS Streaming Framework requires the following packages to be installed along-side it. Because theses packages are not in the Unity Registry, they must be installed manually: glTFast gis-high-precision-framework Getting Started First Time Setup Frequently Asked Questions Known Limitations"
  },
  "manual/TableOfContents.html": {
    "href": "manual/TableOfContents.html",
    "title": "| Unity Geospatial Streaming | 1.0.0",
    "keywords": "GIS Streaming Framework Getting Started First Time Setup Frequently Asked Questions Known Limitations Dataset Formats OGC 3D Tiles Terrain Management System Internal Architecture Universal Decoder Material Factory"
  }
}